/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/AccessibilityUtilities.framework/AccessibilityUtilities
 */

@interface AXTimer : NSObject <AXTimer> {
    AXAccessQueue *_accessQueue;
    bool _accessQueueIsExternal;
    bool _active;
    bool _automaticallyCancelPendingBlockUponSchedulingNewBlock;
    NSObject<OS_dispatch_source> *_dispatchTimer;
    NSString *_label;
    int _state;
}

@property(assign,retain) AXAccessQueue * accessQueue;
@property(assign,readwrite) bool accessQueueIsExternal;
@property(getter=isActive,assign,readwrite) bool active;
@property(assign,readwrite) bool automaticallyCancelPendingBlockUponSchedulingNewBlock;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,retain) NSObject<OS_dispatch_source> * dispatchTimer;
@property(assign,readonly) unsigned long long hash;
@property(assign,copy) NSString * label;
@property(getter=isPending,assign,readonly) bool pending;
@property(assign,readwrite) int state;
@property(assign,readonly) Class superclass;

+ (void)initialize;
+ (id)timerTargettingMainAccessQueue;

- (void)_afterDelay:(double)arg1 processBlock:(id)arg2 shouldTreatAsWritingBlock:(bool)arg3;
- (void)_didFinishProcessingBlock;
- (void)_performEnqueuedWritingBlock:(id)arg1 asynchronousExecutionWarningHandler:(SEL)arg2;
- (void)_reallyCancel;
- (void)_warnAboutAsynchronousCancelling;
- (void)_warnAboutAsynchronousScheduling;
- (id)accessQueue;
- (bool)accessQueueIsExternal;
- (void)afterDelay:(double)arg1 processBlock:(id)arg2;
- (void)afterDelay:(double)arg1 processReadingBlock:(id)arg2;
- (void)afterDelay:(double)arg1 processWritingBlock:(id)arg2;
- (bool)automaticallyCancelPendingBlockUponSchedulingNewBlock;
- (void)cancel;
- (void)dealloc;
- (id)description;
- (id)dispatchTimer;
- (id)init;
- (id)initWithTargetAccessQueue:(id)arg1;
- (bool)isActive;
- (bool)isPending;
- (id)label;
- (void)setAccessQueue:(id)arg1;
- (void)setAccessQueueIsExternal:(bool)arg1;
- (void)setActive:(bool)arg1;
- (void)setAutomaticallyCancelPendingBlockUponSchedulingNewBlock:(bool)arg1;
- (void)setDispatchTimer:(id)arg1;
- (void)setLabel:(id)arg1;
- (void)setState:(int)arg1;
- (int)state;

@end
