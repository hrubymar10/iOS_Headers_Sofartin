/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices
 */

@interface PLPhotoEditModel : NSObject <NSCopying> {
    long long _appliedOrientation;
    bool _autoCropped;
    NSArray *_autoRedEyeCorrections;
    NSString *_autoSmartColorIdentifier;
    double _autoSmartColorLevel;
    NSString *_autoSmartToneIdentifier;
    double _autoSmartToneLevel;
    NSString *_autoWhiteBalanceIdentifier;
    NSDictionary *_autoWhiteBalanceSettings;
    double _blackPointLevelOffset;
    double _brightnessLevelOffset;
    double _bwGrainLevelOffset;
    double _bwHueLevelOffset;
    double _bwNeutralGammaLevelOffset;
    double _bwStrengthLevelOffset;
    double _bwToneLevelOffset;
    double _colorCastLevelOffset;
    double _colorContrastLevelOffset;
    double _colorVibrancyLevelOffset;
    double _contrastLevelOffset;
    long long _cropConstraintHeight;
    long long _cropConstraintWidth;
    NSString *_effectFilterName;
    long long _effectFilterVersion;
    double _exposureLevelOffset;
    double _highlightsLevelOffset;
    NSArray *_legacyAutoEnhanceFilters;
    bool _legacyAutoEnhanceIsOn;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _normalizedCropRect;
    NSArray *_redEyeCorrections;
    double _shadowsLevelOffset;
    bool _smartBWEnabled;
    double _smartBWLevel;
    NSDictionary *_smartBWStatistics;
    bool _smartColorEnabled;
    double _smartColorLevel;
    NSDictionary *_smartColorStatistics;
    bool _smartToneEnabled;
    double _smartToneLevel;
    NSDictionary *_smartToneStatistics;
    double _straightenAngle;
    bool _whiteBalanceEnabled;
    double _whiteBalanceFaceI;
    double _whiteBalanceFaceQ;
    double _whiteBalanceFaceStrength;
    double _whiteBalanceFaceWarmth;
}

@property(assign,readonly) long long appliedOrientation;
@property(getter=isAutoCropped,assign,readonly) bool autoCropped;
@property(assign,copy) NSArray * autoRedEyeCorrections;
@property(assign,copy) NSString * autoSmartColorIdentifier;
@property(assign,readonly) double autoSmartColorLevel;
@property(assign,copy) NSString * autoSmartToneIdentifier;
@property(assign,readonly) double autoSmartToneLevel;
@property(assign,copy) NSString * autoWhiteBalanceIdentifier;
@property(assign,copy) NSDictionary * autoWhiteBalanceSettings;
@property(assign,readonly) double blackPointLevelOffset;
@property(assign,readonly) double brightnessLevelOffset;
@property(assign,readonly) double bwGrainLevelOffset;
@property(assign,readonly) double bwHueLevelOffset;
@property(assign,readonly) double bwNeutralGammaLevelOffset;
@property(assign,readonly) double bwStrengthLevelOffset;
@property(assign,readonly) double bwToneLevelOffset;
@property(assign,readonly) double colorCastLevelOffset;
@property(assign,readonly) double colorContrastLevelOffset;
@property(assign,readonly) double colorVibrancyLevelOffset;
@property(assign,readonly) double contrastLevelOffset;
@property(getter=isCropConstrained,assign,readonly) bool cropConstrained;
@property(assign,readonly) long long cropConstraintHeight;
@property(assign,readonly) long long cropConstraintWidth;
@property(assign,copy) NSString * effectFilterName;
@property(assign,readonly) long long effectFilterVersion;
@property(assign,readonly) double exposureLevelOffset;
@property(assign,readonly) bool hasAnyAutoEnhancement;
@property(assign,readonly) bool hasIdentityCrop;
@property(assign,readonly) bool hasRedEyeCorrections;
@property(assign,readonly) double highlightsLevelOffset;
@property(assign,copy) NSArray * legacyAutoEnhanceFilters;
@property(assign,readonly) bool legacyAutoEnhanceIsOn;
@property(assign,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } normalizedCropRect;
@property(assign,copy) NSArray * redEyeCorrections;
@property(assign,readonly) double shadowsLevelOffset;
@property(getter=isSmartBWEnabled,assign,readonly) bool smartBWEnabled;
@property(assign,readonly) double smartBWLevel;
@property(assign,copy) NSDictionary * smartBWStatistics;
@property(getter=isSmartColorEnabled,assign,readonly) bool smartColorEnabled;
@property(assign,readonly) double smartColorLevel;
@property(assign,copy) NSDictionary * smartColorStatistics;
@property(getter=isSmartToneEnabled,assign,readonly) bool smartToneEnabled;
@property(assign,readonly) double smartToneLevel;
@property(assign,copy) NSDictionary * smartToneStatistics;
@property(assign,readonly) double straightenAngle;
@property(getter=isWhiteBalanceEnabled,assign,readonly) bool whiteBalanceEnabled;
@property(assign,readonly) double whiteBalanceFaceI;
@property(assign,readonly) double whiteBalanceFaceQ;
@property(assign,readonly) double whiteBalanceFaceStrength;
@property(assign,readonly) double whiteBalanceFaceWarmth;

+ (id)_identityModel;
+ (void)_loadReferenceLevelsFromCIFilterWithName:(id)arg1 attributeKeys:(id)arg2 intoLevelStructs:(struct { /* ? */ }**)arg3;
+ (void)_loadSubfilterReferenceLevelsIfNeeded;
+ (double)_referenceValueOfType:(long long)arg1 fromLevels:(struct { double x1; double x2; double x3; })arg2;
+ (long long)identityCropConstraint;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })identityNormalizedCropRect;
+ (long long)identityOrientation;
+ (double)referenceBWGrainLevelOfType:(long long)arg1;
+ (double)referenceBWHueLevelOfType:(long long)arg1;
+ (double)referenceBWNeutralGammaLevelOfType:(long long)arg1;
+ (double)referenceBWStrengthLevelOfType:(long long)arg1;
+ (double)referenceBWToneLevelOfType:(long long)arg1;
+ (double)referenceBlackPointLevelOfType:(long long)arg1;
+ (double)referenceBrightnessLevelOfType:(long long)arg1;
+ (double)referenceColorCastLevelOfType:(long long)arg1;
+ (double)referenceColorContrastLevelOfType:(long long)arg1;
+ (double)referenceColorVibrancyLevelOfType:(long long)arg1;
+ (double)referenceContrastLevelOfType:(long long)arg1;
+ (double)referenceExposureLevelOfType:(long long)arg1;
+ (double)referenceHighlightsLevelOfType:(long long)arg1;
+ (double)referenceShadowsLevelOfType:(long long)arg1;
+ (double)referenceSmartBWLevelOfType:(long long)arg1;
+ (double)referenceSmartColorLevelOfType:(long long)arg1;
+ (double)referenceSmartToneLevelOfType:(long long)arg1;
+ (double)referenceStraightenAngleOfType:(long long)arg1;
+ (double)referenceWhiteBalanceFaceILevelOfType:(long long)arg1;
+ (double)referenceWhiteBalanceFaceQLevelOfType:(long long)arg1;
+ (double)referenceWhiteBalanceFaceStrengthLevelOfType:(long long)arg1;
+ (double)referenceWhiteBalanceFaceWarmthLevelOfType:(long long)arg1;

- (void)_copyValuesFromModel:(id)arg1 interpolationStartModel:(id)arg2 progress:(double)arg3;
- (id)_debugDictionaryRepresentation;
- (bool)_shouldEarlyExitComparisonToModel:(id)arg1 returnValue:(bool*)arg2;
- (long long)appliedOrientation;
- (id)autoRedEyeCorrections;
- (id)autoSmartColorIdentifier;
- (double)autoSmartColorLevel;
- (id)autoSmartToneIdentifier;
- (double)autoSmartToneLevel;
- (id)autoWhiteBalanceIdentifier;
- (id)autoWhiteBalanceSettings;
- (double)blackPointLevelOffset;
- (double)brightnessLevelOffset;
- (double)bwGrainLevelOffset;
- (double)bwHueLevelOffset;
- (double)bwNeutralGammaLevelOffset;
- (double)bwStrengthLevelOffset;
- (double)bwToneLevelOffset;
- (double)colorCastLevelOffset;
- (double)colorContrastLevelOffset;
- (double)colorVibrancyLevelOffset;
- (double)contrastLevelOffset;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (long long)cropConstraintHeight;
- (long long)cropConstraintWidth;
- (void)dealloc;
- (id)description;
- (id)effectFilterName;
- (long long)effectFilterVersion;
- (double)exposureLevelOffset;
- (bool)hasAnyAutoEnhancement;
- (bool)hasIdentityCrop;
- (bool)hasRedEyeCorrections;
- (double)highlightsLevelOffset;
- (id)init;
- (bool)isAutoCropped;
- (bool)isCropConstrained;
- (bool)isCropConstraintEqualToPhotoEditModel:(id)arg1;
- (bool)isEffectFilterEqualToPhotoEditModel:(id)arg1;
- (bool)isEqualToPhotoEditModel:(id)arg1;
- (bool)isGeometryEqualToPhotoEditModel:(id)arg1;
- (bool)isGeometryIdentity;
- (bool)isIdentityModel;
- (bool)isRedEyeCorrectionEqualToPhotoEditModel:(id)arg1;
- (bool)isSmartBWEnabled;
- (bool)isSmartBWPrecisionEqualToPhotoEditModel:(id)arg1;
- (bool)isSmartColorEnabled;
- (bool)isSmartColorPrecisionEqualToPhotoEditModel:(id)arg1;
- (bool)isSmartToneEnabled;
- (bool)isSmartTonePrecisionEqualToPhotoEditModel:(id)arg1;
- (bool)isVisuallyEqualToPhotoEditModel:(id)arg1;
- (bool)isWhiteBalanceEnabled;
- (id)legacyAutoEnhanceFilters;
- (bool)legacyAutoEnhanceIsOn;
- (id)mutableCopy;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })normalizedCropRect;
- (id)pl_aggregateKeysForPreviousPhotoEditModel:(id)arg1;
- (id)pl_aggregateNameForEffectFilter;
- (struct CGSize { double x1; double x2; })pl_dataCropConstraintSizeForImageGeometry:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })pl_dataCropRectForImageGeometry:(id)arg1 straightenAngle:(double)arg2;
- (bool)pl_isCropConstraintEnabled;
- (bool)pl_isCropEnabled;
- (id)redEyeCorrections;
- (double)shadowsLevelOffset;
- (double)smartBWLevel;
- (id)smartBWStatistics;
- (double)smartColorLevel;
- (id)smartColorStatistics;
- (double)smartToneLevel;
- (id)smartToneStatistics;
- (double)straightenAngle;
- (double)whiteBalanceFaceI;
- (double)whiteBalanceFaceQ;
- (double)whiteBalanceFaceStrength;
- (double)whiteBalanceFaceWarmth;

@end
