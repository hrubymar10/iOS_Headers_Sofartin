/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

@interface BRCRelativePath : NSObject <NSSecureCoding> {
    NSString *_absolutePath;
    BRCRelativePath *_basePath;
    struct timespec { 
        long long tv_sec; 
        long long tv_nsec; 
    } _birthtime;
    BRCBookmark *_bookmark;
    NSDirectoryEnumerator *_descendantsEnumerator;
    int _deviceID;
    struct { int x1; long long x2; long long x3; char *x4; int x5; long long x6; long long x7; int x8; struct _opaque_pthread_mutex_t { long long x_9_1_1; BOOL x_9_1_2[56]; } x9; struct _telldir {} *x10; } *_dir;
    unsigned int _documentID;
    int _fd;
    unsigned long long _fileID;
    unsigned char _finderInfo;
    unsigned int _flags;
    unsigned int _fsGenerationID;
    BRCGenerationID *_generationID;
    unsigned int _hasFinderTags;
    unsigned int _isAlias;
    unsigned int _isBusy;
    unsigned int _isExcluded;
    unsigned int _isInPackage;
    unsigned int _isPackageRoot;
    unsigned short _mode;
    struct timespec { 
        long long tv_sec; 
        long long tv_nsec; 
    } _mtime;
    struct _opaque_pthread_rwlock_t { 
        long long __sig; 
        BOOL __opaque[192]; 
    } _mutex;
    unsigned int _nlink;
    int _openRefCount;
    unsigned long long _parentFileID;
    unsigned int _qtnResolved;
    NSData *_quarantineInfo;
    unsigned int _readFault;
    NSString *_relativePath;
    BRCServerZone *_serverZone;
    BRCAccountSession *_session;
    BRCItemID *_sharedItemID;
    NSString *_sharedOwnerName;
    long long _size;
    NSString *_symlinkContent;
    unsigned short _type;
    NSNumber *_volumeID;
}

@property(assign,readonly) NSString * absolutePath;
@property(assign,readonly) long long birthTime;
@property(assign,readonly) BRCBookmark * bookmark;
@property(assign,readonly) BRCLocalContainer * container;
@property(assign,readonly) int deviceID;
@property(assign,readonly) unsigned int documentID;
@property(assign,readonly) bool exists;
@property(assign,readonly) NSString * faultDisplayName;
@property(assign,readonly) unsigned long long fileID;
@property(assign,readonly) NSNumber * fileObjectID;
@property(assign,readonly) unsigned int fileType;
@property(assign,readonly) NSString * filename;
@property(assign,readonly) unsigned int fsGenerationID;
@property(assign,readonly) BRCGenerationID * generationID;
@property(assign,readonly) unsigned int hardlinkCount;
@property(assign,readonly) bool hasFinderTags;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) bool isAlias;
@property(assign,readonly) bool isBusy;
@property(assign,readonly) bool isDocument;
@property(assign,readonly) bool isExcluded;
@property(assign,readonly) bool isExecutable;
@property(assign,readonly) bool isFault;
@property(assign,readonly) bool isFile;
@property(assign,readonly) bool isHiddenExtension;
@property(assign,readonly) bool isHiddenFile;
@property(assign,readonly) bool isInPackage;
@property(assign,readonly) bool isPackageRoot;
@property(assign,readonly) bool isRoot;
@property(assign,readonly) bool isSymLink;
@property(assign,readonly) bool isUnixDir;
@property(assign,readonly) bool isWritable;
@property(assign,readonly) long long modificationTime;
@property(assign,readonly) unsigned long long parentFileID;
@property(assign,readonly) unsigned long long parentHash;
@property(assign,readonly) NSString * pathRelativeToPackageRoot;
@property(assign,readonly) NSString * pathRelativeToRoot;
@property(assign,readonly) NSData * quarantineInfo;
@property(assign,readonly) BRCRelativePath * root;
@property(assign,readonly) BRCServerZone * serverZone;
@property(assign,readonly) BRCAccountSession * session;
@property(assign,readonly) BRCItemID * sharedItemID;
@property(assign,readonly) NSString * sharedOwnerName;
@property(assign,readonly) long long size;
@property(assign,readonly) NSString * symlinkContent;
@property(assign,readonly) unsigned short type;
@property(assign,readonly) NSURL * url;
@property(assign,readonly) NSNumber * volumeID;

+ (int)locateByFileID:(unsigned long long)arg1 zone:(id)arg2;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (void)_close;
- (bool)_fixupRelativePath;
- (id)_initWithPath:(id)arg1 relativeToRoot:(id)arg2;
- (bool)_resolveAndKeepOpenMustExist:(bool)arg1 error:(int*)arg2;
- (int)_resolveBasePath;
- (int)_resolvePathTypeAndContainer;
- (int)_resolveSymlinkRelativeTo:(int)arg1 path:(id)arg2;
- (int)_resolveWhenDoesntExist;
- (int)_resolveWhenExists;
- (bool)_shouldKeepBasePathOpen;
- (id)absolutePath;
- (long long)birthTime;
- (id)bookmark;
- (void)close;
- (void)closeDirectoryScan;
- (id)container;
- (void)dealloc;
- (id)description;
- (int)deviceID;
- (unsigned int)documentID;
- (void)encodeWithCoder:(id)arg1;
- (bool)exists;
- (id)faultDisplayName;
- (unsigned long long)fileID;
- (id)fileObjectID;
- (unsigned int)fileType;
- (id)filename;
- (bool)flock:(int)arg1;
- (unsigned int)fsGenerationID;
- (id)generationID;
- (unsigned int)hardlinkCount;
- (bool)hasFinderTags;
- (unsigned long long)hash;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFileID:(unsigned long long)arg1 zone:(id)arg2;
- (id)initWithPath:(id)arg1 zone:(id)arg2;
- (id)initWithRootPath:(id)arg1 session:(id)arg2;
- (bool)isAlias;
- (bool)isBusy;
- (bool)isDocument;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToRelativePath:(id)arg1;
- (bool)isExcluded;
- (bool)isExecutable;
- (bool)isFault;
- (bool)isFile;
- (bool)isHiddenExtension;
- (bool)isHiddenFile;
- (bool)isInPackage;
- (bool)isPackageRoot;
- (bool)isResolved;
- (bool)isRoot;
- (bool)isSymLink;
- (bool)isUnixDir;
- (bool)isWritable;
- (id)logicalURLWithLogicalName:(id)arg1;
- (long long)modificationTime;
- (id)nextChild;
- (id)nextDescendant;
- (bool)openDirectoryForRecursiveScan;
- (bool)openDirectoryForScanWithError:(int*)arg1;
- (unsigned long long)parentFileID;
- (unsigned long long)parentHash;
- (id)pathOfPackageRoot;
- (id)pathRelativeToPackageRoot;
- (id)pathRelativeToRoot;
- (id)pathWithChildAtPath:(id)arg1;
- (bool)performOnOpenFileDescriptor:(id)arg1 error:(int*)arg2;
- (bool)performOnOpenParentFileDescriptor:(id)arg1 error:(int*)arg2;
- (id)quarantineInfo;
- (id)refreshFromPathMustExist:(bool)arg1;
- (bool)resolveAndKeepOpenMustExist:(bool)arg1 error:(int*)arg2;
- (bool)resolveMustExist:(bool)arg1 error:(int*)arg2;
- (id)root;
- (id)serverZone;
- (id)session;
- (id)sharedItemID;
- (id)sharedOwnerName;
- (long long)size;
- (id)symlinkContent;
- (unsigned short)type;
- (id)url;
- (id)volumeID;

@end
