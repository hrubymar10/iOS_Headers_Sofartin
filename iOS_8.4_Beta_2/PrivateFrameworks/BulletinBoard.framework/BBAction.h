/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/BulletinBoard.framework/BulletinBoard
 */

@interface BBAction : NSObject <NSCopying, NSSecureCoding> {
    long long _actionType;
    NSDictionary *_activatePluginContext;
    NSString *_activatePluginName;
    unsigned long long _activationMode;
    BBAppearance *_appearance;
    bool _authenticationRequired;
    bool _deliverResponse;
    NSString *_identifier;
    id _internalBlock;
    NSString *_launchBundleID;
    bool _launchCanBypassPinLock;
    NSURL *_launchURL;
    NSString *_remoteServiceBundleIdentifier;
    NSString *_remoteViewControllerClassName;
    bool _shouldDismissBulletin;
}

@property(assign,readwrite) long long actionType;
@property(assign,copy) NSDictionary * activatePluginContext;
@property(assign,copy) NSString * activatePluginName;
@property(assign,readwrite) unsigned long long activationMode;
@property(assign,copy) BBAppearance * appearance;
@property(getter=isAuthenticationRequired,assign,readwrite) bool authenticationRequired;
@property(assign,readwrite) bool canBypassPinLock;
@property(assign,copy) NSString * identifier;
@property(assign,copy) id internalBlock;
@property(assign,copy) NSString * launchBundleID;
@property(assign,readwrite) bool launchCanBypassPinLock;
@property(assign,copy) NSURL * launchURL;
@property(assign,copy) NSString * remoteServiceBundleIdentifier;
@property(assign,copy) NSString * remoteViewControllerClassName;
@property(assign,readwrite) bool shouldDismissBulletin;

+ (id)action;
+ (id)actionWithActivatePluginName:(id)arg1 activationContext:(id)arg2;
+ (id)actionWithAppearance:(id)arg1;
+ (id)actionWithCallblock:(id)arg1;
+ (id)actionWithIdentifier:(id)arg1;
+ (id)actionWithIdentifier:(id)arg1 title:(id)arg2;
+ (id)actionWithLaunchBundleID:(id)arg1;
+ (id)actionWithLaunchBundleID:(id)arg1 callblock:(id)arg2;
+ (id)actionWithLaunchURL:(id)arg1;
+ (id)actionWithLaunchURL:(id)arg1 callblock:(id)arg2;
+ (bool)supportsSecureCoding;

- (id)_nameForActionType:(long long)arg1;
- (long long)actionType;
- (id)activatePluginContext;
- (id)activatePluginName;
- (unsigned long long)activationMode;
- (id)appearance;
- (id)bundleID;
- (bool)canBypassPinLock;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (bool)deliverResponse:(id)arg1;
- (id)description;
- (void)encodeWithCoder:(id)arg1;
- (bool)hasLaunchAction;
- (bool)hasPluginAction;
- (bool)hasRemoteViewAction;
- (unsigned long long)hash;
- (id)identifier;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithIdentifier:(id)arg1;
- (id)internalBlock;
- (bool)isAuthenticationRequired;
- (bool)isEqual:(id)arg1;
- (id)launchBundleID;
- (bool)launchCanBypassPinLock;
- (id)launchURL;
- (id)partialDescription;
- (id)remoteServiceBundleIdentifier;
- (id)remoteViewControllerClassName;
- (void)setActionType:(long long)arg1;
- (void)setActivatePluginContext:(id)arg1;
- (void)setActivatePluginName:(id)arg1;
- (void)setActivationMode:(unsigned long long)arg1;
- (void)setAppearance:(id)arg1;
- (void)setAuthenticationRequired:(bool)arg1;
- (void)setCallblock:(id)arg1;
- (void)setCanBypassPinLock:(bool)arg1;
- (void)setIdentifier:(id)arg1;
- (void)setInternalBlock:(id)arg1;
- (void)setLaunchBundleID:(id)arg1;
- (void)setLaunchCanBypassPinLock:(bool)arg1;
- (void)setLaunchURL:(id)arg1;
- (void)setRemoteServiceBundleIdentifier:(id)arg1;
- (void)setRemoteViewControllerClassName:(id)arg1;
- (void)setShouldDismissBulletin:(bool)arg1;
- (bool)shouldDismissBulletin;
- (id)url;

@end
