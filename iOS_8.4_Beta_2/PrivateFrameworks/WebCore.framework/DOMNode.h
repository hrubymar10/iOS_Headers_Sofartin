/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/WebCore.framework/WebCore
 */

@interface DOMNode : DOMObject <DOMEventTarget, UIKeyInput, UIKeyboardInput, UITextInputPrivate, UITextInputTokenizer, UITextInput_Internal, UIWebSelectionBlock>

@property(getter=_proxyTextInput,assign,readonly) UIResponder<UITextInput> * __content;
@property(assign,readonly) UIView<UITextInputPrivate> * _textSelectingContainer;
@property(assign,readwrite) bool acceptsEmoji;
@property(assign,readwrite) bool acceptsFloatingKeyboard;
@property(assign,readwrite) bool acceptsSplitKeyboard;
@property(assign,readonly) DOMNamedNodeMap * attributes;
@property(assign,readwrite) long long autocapitalizationType;
@property(assign,copy) NSString * autocorrectionContext;
@property(assign,readwrite) long long autocorrectionType;
@property(assign,copy) NSString * baseURI;
@property(assign,readonly) UITextPosition * beginningOfDocument;
@property(assign,readonly) DOMNodeList * childNodes;
@property(assign,readwrite) bool contentsIsSingleValue;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) bool deferBecomingResponder;
@property(assign,copy) NSString * description;
@property(assign,copy) NSString * description;
@property(assign,copy) NSString * description;
@property(assign,readwrite) bool disablePrediction;
@property(assign,readwrite) bool displaySecureTextUsingPlainText;
@property(assign,readwrite) int emptyContentReturnKeyType;
@property(assign,readwrite) bool enablesReturnKeyAutomatically;
@property(assign,readwrite) bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(assign,readonly) UITextPosition * endOfDocument;
@property(assign,readonly) DOMNode * firstChild;
@property(assign,readwrite) bool forceEnableDictation;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) <UITextInputDelegate> * inputDelegate;
@property(assign,retain) UIColor * insertionPointColor;
@property(assign,readwrite) unsigned long long insertionPointWidth;
@property(assign,readonly) UITextInteractionAssistant * interactionAssistant;
@property(assign,readonly) bool isContentEditable;
@property(assign,readwrite) bool isSingleLineDocument;
@property(assign,readwrite) long long keyboardAppearance;
@property(assign,readwrite) long long keyboardType;
@property(assign,readonly) DOMNode * lastChild;
@property(assign,readwrite) bool learnsCorrections;
@property(assign,copy) NSString * localName;
@property(assign,readonly) UITextRange * markedTextRange;
@property(assign,copy) NSDictionary * markedTextStyle;
@property(assign,readonly) bool mf_isAttachment;
@property(assign,readonly) bool mf_isBody;
@property(assign,copy) NSString * namespaceURI;
@property(assign,readonly) DOMNode * nextSibling;
@property(assign,copy) NSString * nodeName;
@property(assign,readonly) unsigned short nodeType;
@property(assign,copy) NSString * nodeValue;
@property(assign,readonly) DOMDocument * ownerDocument;
@property(assign,readonly) DOMElement * parentElement;
@property(assign,readonly) DOMNode * parentNode;
@property(assign,copy) NSString * prefix;
@property(assign,readonly) DOMNode * previousSibling;
@property(assign,copy) NSString * responseContext;
@property(assign,readwrite) bool returnKeyGoesToNextResponder;
@property(assign,readwrite) long long returnKeyType;
@property(getter=isSecureTextEntry,assign,readwrite) bool secureTextEntry;
@property(assign,copy) UITextRange * selectedTextRange;
@property(assign,readwrite) long long selectionAffinity;
@property(assign,retain) UIColor * selectionBarColor;
@property(assign,retain) UIImage * selectionDragDotImage;
@property(assign,readwrite) long long selectionGranularity;
@property(assign,retain) UIColor * selectionHighlightColor;
@property(assign,readwrite) int shortcutConversionType;
@property(assign,readwrite) long long spellCheckingType;
@property(assign,readonly) Class superclass;
@property(assign,readonly) Class superclass;
@property(assign,readonly) Class superclass;
@property(assign,readwrite) bool suppressReturnKeyStyling;
@property(assign,copy) NSString * textContent;
@property(assign,readonly) UIView * textInputView;
@property(assign,readwrite) int textLoupeVisibility;
@property(assign,readwrite) int textSelectionBehavior;
@property(assign,readwrite) id textSuggestionDelegate;
@property(assign,readwrite) struct __CFCharacterSet { }* textTrimmingSet;
@property(assign,readonly) <UITextInputTokenizer> * tokenizer;
@property(assign,readwrite) bool useInterfaceLanguageForLocalization;
@property(assign,readonly) WebArchive * webArchive;

+ (id)_nodeFromJSWrapper:(struct OpaqueJSValue { }*)arg1;

- (void)_accessoryClear;
- (unsigned int)_characterAfterCaretSelection;
- (unsigned int)_characterBeforeCaretSelection;
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;
- (void)_deleteBackwardAndNotify:(bool)arg1;
- (void)_deleteByWord;
- (void)_deleteForwardAndNotify:(bool)arg1;
- (void)_deleteToEndOfLine;
- (void)_deleteToStartOfLine;
- (void)_expandSelectionToBackwardDeletionCluster;
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;
- (void)_extendCurrentSelection:(int)arg1;
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;
- (void)_fixParagraphsAndQuotesFromMicrosoftNodesToRemove:(id)arg1;
- (id)_fontForCaretSelection;
- (id)_fullRange;
- (id)_fullText;
- (bool)_hasMarkedText;
- (bool)_hasMarkedTextOrRangedSelection;
- (int)_indexForTextPosition:(id)arg1;
- (bool)_isEmptySelection;
- (id)_keyInput;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_lastRectForRange:(id)arg1;
- (struct Element { int (**x1)(); struct Weak<WebCore::JSDOMWrapper> { struct WeakImpl {} *x_2_1_1; } x2; int x3; unsigned int x4; struct ContainerNode {} *x5; struct TreeScope {} *x6; struct Node {} *x7; struct Node {} *x8; union DataUnion { struct RenderObject {} *x_9_1_1; struct NodeRareDataBase {} *x_9_1_2; } x9; struct Node {} *x10; struct Node {} *x11; struct QualifiedName { struct RefPtr<WebCore::QualifiedName::QualifiedNameImpl> { struct QualifiedNameImpl {} *x_1_2_1; } x_12_1_1; } x12; struct RefPtr<WebCore::ElementData> { struct ElementData {} *x_13_1_1; } x13; }*)_linkElement;
- (void)_moveCurrentSelection:(int)arg1;
- (id)_moveDown:(bool)arg1 withHistory:(id)arg2;
- (id)_moveLeft:(bool)arg1 withHistory:(id)arg2;
- (id)_moveRight:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveUp:(bool)arg1 withHistory:(id)arg2;
- (id)_newPhraseBoundaryGestureRecognizer;
- (id)_nextAssistedNode;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_nsrangeForTextRange:(id)arg1;
- (void)_phraseBoundaryGesture:(id)arg1;
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(bool)arg4;
- (id)_previousAssistedNode;
- (id)_proxyTextInput;
- (id)_rangeOfEnclosingWord:(id)arg1;
- (id)_rangeOfLineEnclosingPosition:(id)arg1;
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;
- (id)_realNode;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_renderRect:(bool*)arg1;
- (void)_replaceCurrentWordWithText:(id)arg1;
- (bool)_requiresAccessoryView;
- (bool)_requiresInputView;
- (struct RootObject { }*)_rootObject;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (void)_selectAll;
- (id)_selectableText;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_selectedNSRange;
- (long long)_selectionAffinity;
- (bool)_selectionAtDocumentEnd;
- (bool)_selectionAtDocumentStart;
- (bool)_selectionAtWordStart;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionClipRect;
- (void)_setCaretSelectionAtEndOfSelection;
- (void)_setGestureRecognizers;
- (id)_setHistory:(id)arg1 withExtending:(bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(bool)arg4;
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(bool)arg2;
- (id)_setSelectionRangeWithHistory:(id)arg1;
- (bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(bool)arg3;
- (void)_startAssistingDocumentView:(id)arg1;
- (void)_stopAssistingDocumentView:(id)arg1;
- (bool)_supportsAccessoryClear;
- (bool)_supportsAutoFill;
- (id)_textColorForCaretSelection;
- (id)_textFormElement;
- (id)_textSelectingContainer;
- (void)_unmarkText;
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(bool)arg2;
- (bool)_usesAsynchronousProtocol;
- (id)_wordContainingCaretSelection;
- (struct _WKQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })absoluteQuad;
- (struct _WKQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })absoluteQuadAndInsideFixedPosition:(bool*)arg1;
- (id)absoluteQuads;
- (id)absoluteQuadsAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)acceptedAutoFillWord:(id)arg1;
- (void)addEventListener:(id)arg1 :(id)arg2 :(bool)arg3;
- (void)addEventListener:(id)arg1 listener:(id)arg2 useCapture:(bool)arg3;
- (bool)alwaysAttemptToShowTapHighlight;
- (id)appendChild:(id)arg1;
- (id)asDomNode;
- (id)asDomRange;
- (id)asElement;
- (id)attributes;
- (id)automaticallySelectedOverlay;
- (id)baseURI;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (bool)becomesEditableWithGestures;
- (void)beginSelectionChange;
- (id)beginningOfDocument;
- (id)borderRadii;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingBox;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingBoxUsingTransforms;
- (id)boundingBoxes;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundingRectAndInsideFixedPosition:(int*)arg1;
- (bool)canShrinkDirectlyToTextOnly;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (unsigned short)characterAfterCaretSelection;
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (id)childNodes;
- (void)clearMarkedText;
- (id)cloneNode:(bool)arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (unsigned short)compareDocumentPosition:(id)arg1;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (float)computedFontSize;
- (void)confirmMarkedText:(id)arg1;
- (struct CGPoint { double x1; double x2; })constrainedPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })constrainedPoint:(struct CGPoint { double x1; double x2; })arg1 withInset:(double)arg2;
- (bool)contains:(id)arg1;
- (bool)containsBlock:(id)arg1;
- (bool)containsNode:(id)arg1;
- (bool)containsOnlyInlineObjects;
- (bool)containsRange:(id)arg1;
- (id)content;
- (bool)contentsIsSingleValue;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertCaretRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toView:(id)arg2;
- (id)createPeripheral;
- (id)createPickerCell;
- (id)createSelectedItem;
- (void)dd_removeResultLinks;
- (bool)dd_searchForLinkEndNode:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (void)deleteBackward;
- (id)description;
- (bool)dispatchEvent:(id)arg1;
- (bool)editable;
- (bool)editing;
- (id)enclosingDocument;
- (id)enclosingElementIncludingSelf;
- (id)endOfDocument;
- (id)endPosition;
- (void)endSelectionChange;
- (void)extendCurrentSelection:(int)arg1;
- (void)finalize;
- (id)findExplodedTextNodeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)firstChild;
- (id)firstDescendantOfAboutTheSameWidthOrHeight;
- (id)firstDescendantOfAboutTheSameWidthOrHeightAsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withDescentDirection:(int)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (id)fontForCaretSelection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForDictationResultPlaceholder:(id)arg1;
- (void)handleKeyWebEvent:(id)arg1;
- (bool)hasAttributes;
- (bool)hasChildNodes;
- (bool)hasContent;
- (bool)hasCustomLineHeight;
- (bool)hasSelection;
- (bool)hasText;
- (void)hidePlaceholder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })hrefFrame;
- (id)hrefLabel;
- (id)hrefTarget;
- (id)hrefTitle;
- (id)hrefURL;
- (int)initialSelectionBehavior;
- (struct _WKQuad { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGPoint { double x_2_1_1; double x_2_1_2; } x2; struct CGPoint { double x_3_1_1; double x_3_1_2; } x3; struct CGPoint { double x_4_1_1; double x_4_1_2; } x4; })innerFrameQuad;
- (id)inputDelegate;
- (id)insertBefore:(id)arg1 :(id)arg2;
- (id)insertBefore:(id)arg1 refChild:(id)arg2;
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (id)insertDictationResultPlaceholder;
- (void)insertText:(id)arg1;
- (void)inspect;
- (id)interactionAssistant;
- (bool)isAutoFillMode;
- (bool)isContentEditable;
- (bool)isDefaultNamespace:(id)arg1;
- (bool)isEditable;
- (bool)isEditing;
- (bool)isEqualNode:(id)arg1;
- (bool)isHorizontalWritingMode;
- (bool)isLikelyToBeginPageLoad;
- (bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;
- (bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;
- (bool)isSameBlock:(id)arg1;
- (bool)isSameNode:(id)arg1;
- (bool)isSecure;
- (bool)isSelectableBlock;
- (bool)isShowingPlaceholder;
- (bool)isSupported:(id)arg1 :(id)arg2;
- (bool)isSupported:(id)arg1 version:(id)arg2;
- (bool)isTextControl;
- (id)itemTitle;
- (long long)keyboardType;
- (id)largerParent;
- (id)lastChild;
- (id)lastDescendantOfAboutTheSameWidthOrHeight;
- (id)lineBoxQuads;
- (id)lineBoxRects;
- (id)localName;
- (id)lookupNamespaceURI:(id)arg1;
- (id)lookupPrefix:(id)arg1;
- (id)markedTextRange;
- (id)markedTextStyle;
- (id)markupString;
- (id)metadataDictionariesForDictationResults;
- (id)mf_appendBlockPlaceholder;
- (id)mf_blockNodeAncestor;
- (id)mf_childNodeAtIndex:(int)arg1;
- (id)mf_commonAncestorWithNode:(id)arg1;
- (id)mf_containingBlockQuote;
- (bool)mf_containsOnlySelectionMarkers;
- (bool)mf_containsRichText;
- (id)mf_findElementWithTag:(id)arg1 className:(id)arg2 andIdName:(id)arg3;
- (id)mf_firstDescendantBlockQuote;
- (id)mf_firstSibling;
- (void)mf_fixParagraphsAndQuotesFromMicrosoft;
- (id)mf_highestContainingBlockQuote;
- (bool)mf_isAtBeginningOfContainerNode:(id)arg1;
- (bool)mf_isAtEndOfContainerNode:(id)arg1;
- (bool)mf_isAttachment;
- (bool)mf_isBody;
- (bool)mf_isDescendantOfNode:(id)arg1;
- (bool)mf_isQuoteOrWithinQuote;
- (id)mf_lastSibling;
- (id)mf_nextSiblingOrAunt;
- (int)mf_quoteLevelDelta;
- (id)mf_topmostContainingNodeWithNameInArray:(id)arg1;
- (id)mf_traverseNextNodeStayingWithin:(id)arg1;
- (id)mf_traverseNextSiblingStayingWithin:(id)arg1;
- (id)mf_traversePreviousNode;
- (void)moveDown;
- (void)moveLeft;
- (void)moveRight;
- (void)moveUp;
- (id)namespaceURI;
- (id)nextFocusNode;
- (id)nextSibling;
- (bool)nodeCanBecomeFirstResponder;
- (id)nodeName;
- (unsigned short)nodeType;
- (id)nodeValue;
- (void)normalize;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)ownerDocument;
- (id)parentBlock;
- (id)parentElement;
- (id)parentNode;
- (void)populateCell:(id)arg1;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (id)prefix;
- (id)previousFocusNode;
- (id)previousSibling;
- (id)rangeByExtendingCurrentSelection:(int)arg1;
- (id)rangeByMovingCurrentSelection:(int)arg1;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;
- (id)rangeOfContainingParagraph;
- (id)rangeOfContents;
- (id)rangeOfContents;
- (id)rangeOfEnclosingWord:(id)arg1;
- (id)rectsForNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)recursivelyRemoveMailAttributes;
- (id)removeChild:(id)arg1;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(bool)arg2;
- (void)removeEventListener:(id)arg1 :(id)arg2 :(bool)arg3;
- (void)removeEventListener:(id)arg1 listener:(id)arg2 useCapture:(bool)arg3;
- (bool)rendersAsBlock;
- (id)replaceChild:(id)arg1 :(id)arg2;
- (id)replaceChild:(id)arg1 oldChild:(id)arg2;
- (void)replaceCurrentWordWithText:(id)arg1;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRange:(id)arg1 withText:(id)arg2 closeTyping:(bool)arg3;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (bool)requiresKeyEvents;
- (long long)returnKeyType;
- (void)selectAll;
- (bool)selectable;
- (id)selectedTextRange;
- (long long)selectionAffinity;
- (bool)selectionAtDocumentStart;
- (bool)selectionAtWordStart;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectionRange;
- (id)selectionRectsForRange:(id)arg1;
- (int)selectionState;
- (id)selectionView;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setBecomesEditableWithGestures:(bool)arg1;
- (void)setContentsIsSingleValue:(bool)arg1;
- (void)setInitialSelectionBehavior:(int)arg1;
- (void)setInputDelegate:(id)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setNodeValue:(id)arg1;
- (void)setPrefix:(id)arg1;
- (void)setReturnKeyType:(long long)arg1;
- (void)setSecure:(bool)arg1;
- (void)setSelectedTextRange:(id)arg1;
- (void)setSelectedTextRange:(id)arg1 withAffinityDownstream:(bool)arg2;
- (void)setSelectionAffinity:(long long)arg1;
- (void)setSelectionWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setSelectionWithPoint:(struct CGPoint { double x1; double x2; })arg1 inset:(double)arg2;
- (void)setText:(id)arg1;
- (void)setTextContent:(id)arg1;
- (void)setTextLoupeVisibility:(int)arg1;
- (void)setTextSuggestionDelegate:(id)arg1;
- (void)setTextTrimmingSet:(struct __CFCharacterSet { }*)arg1;
- (void)setupPlaceholderTextIfNeeded;
- (void)showPlaceholderIfNecessary;
- (bool)showsTapHighlight;
- (id)startPosition;
- (bool)strictlyContainsBlock:(id)arg1;
- (bool)strictlyContainsNode:(id)arg1;
- (id)tagName;
- (void)takeTraitsFrom:(id)arg1;
- (id)tapHighlightColor;
- (id)text;
- (id)textColorForCaretSelection;
- (id)textContent;
- (id)textDocument;
- (double)textHeight;
- (id)textInRange:(id)arg1;
- (id)textInputTraits;
- (id)textInputView;
- (int)textLoupeVisibility;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)textRects;
- (id)textSuggestionDelegate;
- (struct __CFCharacterSet { }*)textTrimmingSet;
- (id)tokenizer;
- (bool)touchCalloutEnabled;
- (id)uiWebDocumentView;
- (void)unmarkText;
- (void)updateAutoscroll:(id)arg1;
- (void)updateSelection;
- (id)urlScheme;
- (id)webArchive;
- (id)webArchiveByFilteringSubframes:(id)arg1;
- (id)webFrame;
- (int)wordOffsetInRange:(id)arg1;

@end
