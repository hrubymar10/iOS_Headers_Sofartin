/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FuseUI.framework/FuseUI
 */

@interface MusicSearchViewController : SKUIScrollingSegmentedController <MusicClientContextConsuming, MusicJSNativeViewControllerFactory, MusicJSSearchNativeViewControllerDelegate, MusicLibrarySearchResultsViewControllerDelegate, MusicSearchBarDelegate, MusicSearchHintsViewControllerDelegate, MusicSearchRecentsViewControllerDelegate, SKUIScrollingSegmentedControllerDelegate, UIViewControllerTransitioningDelegate> {
    bool _allowsAllContentInStoreSearch;
    bool _allowsLocalSearchOnly;
    bool _allowsRadioContentInStoreSearch;
    MusicClientContext *_clientContext;
    <MusicSearchCompletionDelegate> *_completionDelegate;
    bool _didInsertStoreSearchResultsDocument;
    bool _didMakeSearchBarFirstResponder;
    MusicLibrarySearchResultsViewController *_librarySearchResultsViewController;
    bool _mediaPickerAllowsMultipleSelection;
    bool _mediaPickerIncludePlaylists;
    _UINavigationControllerPalette *_palette;
    NSString *_partialSearchString;
    MusicSearchBar *_searchBar;
    MusicSearchHintsViewController *_searchHintsViewController;
    unsigned long long _searchOptions;
    bool _shouldUseMediaPickerViewConfiguration;
    UIViewController *_storeSearchResultsViewController;
    bool _storeSearchViewIsVisible;
    bool _storeSearchViewNeedsChangeUponAppearance;
    bool _storeSearchViewNeedsSubmitUponAppearance;
}

@property(assign,readwrite) bool allowsLocalSearchOnly;
@property(assign,retain) SKUIClientContext * clientContext;
@property(assign,readwrite) <MusicSearchCompletionDelegate> * completionDelegate;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) bool mediaPickerAllowsMultipleSelection;
@property(assign,readwrite) bool mediaPickerIncludePlaylists;
@property(assign,readonly) double searchNavigationBarPaletteHeight;
@property(assign,readwrite) unsigned long long searchOptions;
@property(assign,copy) NSString * searchTerm;
@property(assign,readwrite) bool shouldUseMediaPickerViewConfiguration;
@property(assign,readonly) Class superclass;

+ (id)_defaultSearchNavigationControllerWithSearchViewController:(id)arg1;
+ (id)_defaultSearchViewControllerForPresentingViewController:(id)arg1;
+ (id)defaultSearchBarWithTraitCollection:(id)arg1;
+ (id)searchViewControllerForPresentingViewController:(id)arg1 withSearchBar:(id)arg2;

- (void).cxx_destruct;
- (bool)_allowsLocalSearchOnly;
- (void)_attachPaletteIfNecessary;
- (void)_detachPalette;
- (void)_dispatchSearchTextChangeWithTerm:(id)arg1 usingSubmitEventType:(bool)arg2;
- (id)_extraInfoForStoreSearchEvent;
- (void)_handleCanShowRadioDidChangeNotification:(id)arg1;
- (void)_recordSearchRecent:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_searchSegmentedControlContentEdgeInsets;
- (id)_storeSearchSegmentTitle;
- (void)_updateForStoreContentAvailabilityChange;
- (bool)allowsLocalSearchOnly;
- (id)animationControllerForDismissedController:(id)arg1;
- (id)animationControllerForPresentedController:(id)arg1 presentingController:(id)arg2 sourceController:(id)arg3;
- (id)clientContext;
- (id)completionDelegate;
- (void)dealloc;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (void)jsSearchNativeViewController:(id)arg1 setSearchTerm:(id)arg2;
- (void)jsSearchNativeViewController:(id)arg1 setStoreSearchResultsDocument:(id)arg2 options:(id)arg3;
- (void)librarySearchResultsViewController:(id)arg1 didSelectResultWithTitle:(id)arg2;
- (id)loadJSNativeViewControllerWithAppContext:(id)arg1;
- (bool)mediaPickerAllowsMultipleSelection;
- (bool)mediaPickerIncludePlaylists;
- (id)presentationControllerForPresentedViewController:(id)arg1 presentingViewController:(id)arg2 sourceViewController:(id)arg3;
- (void)scrollingSegmentedController:(id)arg1 didEndDisplayingViewControllerAtIndex:(unsigned long long)arg2;
- (void)scrollingSegmentedController:(id)arg1 willDisplayViewControllerAtIndex:(unsigned long long)arg2;
- (void)searchBar:(id)arg1 textDidChange:(id)arg2;
- (void)searchBarBookmarkButtonClicked:(id)arg1;
- (void)searchBarCancelButtonClicked:(id)arg1;
- (void)searchBarDidLayoutSubviews:(id)arg1;
- (void)searchBarSearchButtonClicked:(id)arg1;
- (void)searchBarTextDidBeginEditing:(id)arg1;
- (void)searchBarTextDidEndEditing:(id)arg1;
- (void)searchHintsViewController:(id)arg1 didSelectSearchHintWithText:(id)arg2 URL:(id)arg3 index:(long long)arg4;
- (double)searchNavigationBarPaletteHeight;
- (unsigned long long)searchOptions;
- (void)searchRecentsViewController:(id)arg1 didSelectSearchTerm:(id)arg2;
- (id)searchTerm;
- (void)setAllowsLocalSearchOnly:(bool)arg1;
- (void)setClientContext:(id)arg1;
- (void)setCompletionDelegate:(id)arg1;
- (void)setMediaPickerAllowsMultipleSelection:(bool)arg1;
- (void)setMediaPickerIncludePlaylists:(bool)arg1;
- (void)setSearchOptions:(unsigned long long)arg1;
- (void)setSearchTerm:(id)arg1;
- (void)setShouldUseMediaPickerViewConfiguration:(bool)arg1;
- (bool)shouldUseMediaPickerViewConfiguration;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;

@end
