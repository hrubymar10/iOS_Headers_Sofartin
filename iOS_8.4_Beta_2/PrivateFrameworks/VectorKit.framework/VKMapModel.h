/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKMapModel : VKModelObject <GEOExperimentConfigurationObserver, GEOResourceManifestTileGroupObserver, VKLabelModelDelegate, VKOverlayContainerDelegate, VKPolylineGroupOverlayObserver, VKTileProviderClient> {
    bool _activeMapLayers;
    VKStyleManager *_activeStyleManager;
    GEOResourceManifestConfiguration *_additionalManifestConfiguration;
    int _annotationMarkerStyle;
    VKAnnotationModel *_annotationModel;
    NSMutableSet *_blockingStylesheetObservers;
    VKBuildingFootprintMapModel *_buildingFootprintModel;
    bool _buildingsAreVisible;
    struct Matrix<float, 4, 1> { 
        float _e[4]; 
    } _clearColor;
    struct ClearItem { 
        unsigned char colorMask; 
        struct Matrix<float, 4, 1> { 
            float _e[4]; 
        } color; 
        bool clearDepthBuffer; 
        float depth; 
        unsigned char clearStencilBuffer; 
        int stencil; 
        unsigned char scissorRegion; 
        struct Box<unsigned int, 2> { 
            struct Matrix<unsigned int, 2, 1> { 
                unsigned int _e[2]; 
            } _minimum; 
            struct Matrix<unsigned int, 2, 1> { 
                unsigned int _e[2]; 
            } _maximum; 
        } scissorRect; 
    } _clearItem;
    double _contentScale;
    bool _debugDynamicMapModesEnabled;
    VKDebugModel *_debugModel;
    VKStyleManager *_defaultStyleManager;
    <VKMapModelDelegate> *_delegate;
    long long _desiredMapMode;
    bool _disableBuildingFootprints;
    bool _disableGrid;
    bool _disableLabels;
    bool _disablePolygons;
    bool _disableRasters;
    bool _disableRoadClass;
    bool _disableRoads;
    NSMutableArray *_drawOrder;
    bool _dynamicMapModesEnabled;
    NSMutableArray *_externalAnchors;
    bool _forceMapDrawStyleUpdate;
    double _forcedMaxZoomLevel;
    bool _fullyDrawn;
    VKGridModel *_gridModel;
    bool _hasFailedTile;
    VKHybridRasterMapModel *_hybridRasterModel;
    VKRoadMapModel *_hybridRoadModel;
    VKStyleManager *_hybridStyleManager;
    VKLabelModel *_labelModel;
    NSMapTable *_layerToSourceMaps;
    bool _limitingNavCameraHeight;
    long long _loadingCount;
    NSLocale *_locale;
    double _lodBias;
    GEOResourceManifestConfiguration *_manifestConfiguration;
    GEOFeatureStyleAttributes *_mapFeatureStyleAttributes;
    NSMutableArray *_mapLayerSubmodels;
    long long _mapMode;
    <VKMapModeObserver> *_mapModeObserver;
    unsigned long long _mapPurpose;
    NSMutableArray *_mapTileSubmodels;
    long long _mapType;
    int _metroArea;
    VKAnimation *_modeTransitionAnimation;
    float _navigationPuckSize;
    VKOverlayContainerModel *_overlayContainerModel;
    VKPolygonMapModel *_polygonModel;
    NSMutableSet *_polylineOverlays;
    VKRasterMapModel *_rasterModel;
    VKRasterOverlayMapModel *_rasterOverlayModel;
    VKTileProvider *_rasterOverlayProvider;
    VKRasterOverlayTileSource *_rasterOverlayTileSource;
    VKRasterTrafficMapModel *_rasterTrafficModel;
    VKRasterMapModel *_rasterViewer;
    VKMapRasterizer *_rasterizer;
    VKRealisticMapModel *_realisticModel;
    VKRiverMapModel *_riverLineModel;
    VKRoadMapModel *_roadModel;
    VKRoadTrafficMapModel *_roadTrafficModel;
    <GEORoutePreloadSession> *_routePreloadSession;
    VKStyleManager *_satelliteStyleManager;
    VKPolylineOverlay *_selectedPolyline;
    VKSharedResources *_sharedResources;
    bool _shouldNotifyFullyDrawn;
    bool _shouldRasterize;
    bool _showsBuildings;
    VKSkyModel *_skyModel;
    VKRasterMapModel *_standardRasterModel;
    struct shared_ptr<md::StyleQuery> { 
        struct StyleQuery {} *__ptr_; 
        struct __shared_weak_count {} *__cntrl_; 
    } _styleQuery;
    double _styleTransitionProgress;
    long long _targetDisplay;
    VKTileProvider *_tileProviders;
    long long _tileSize;
    NSMapTable *_tileSources;
    bool _trafficEnabled;
    VKTrafficTileSource *_trafficSource;
    bool _transitioningToNav;
    double _zoomLevel;
}

@property(assign,retain) GEOResourceManifestConfiguration * additionalManifestConfiguration;
@property(assign,readonly) VKBuildingFootprintMapModel * buildingFootprintModel;
@property(assign,readonly) bool buildingsAreVisible;
@property(assign,readwrite) /* Warning: unhandled struct encoding: '{Matrix<float' */ struct  clearColor; /* unknown property attribute:  1>=[4f]} */
@property(assign,readwrite) double contentScale;
@property(assign,readonly) long long currentMapMode;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) bool debugDynamicMapModesEnabled;
@property(assign,readwrite) <VKMapModelDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,readwrite) bool disableBuildingFootprints;
@property(assign,readwrite) bool disableGrid;
@property(assign,readwrite) bool disableLabels;
@property(assign,readwrite) bool disablePolygons;
@property(assign,readwrite) bool disableRasters;
@property(assign,readwrite) bool disableRealisticLand;
@property(assign,readwrite) bool disableRealisticRoads;
@property(assign,readwrite) bool disableRoads;
@property(assign,readwrite) bool dynamicMapModesEnabled;
@property(assign,retain) NSArray * externalTrafficIncidents;
@property(assign,retain) VKPolylineOverlayPainter * focusedLabelsPolylinePainter;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) bool isFullyDrawn;
@property(assign,readwrite) bool labelMarkerSelectionEnabled;
@property(assign,readwrite) long long labelScaleFactor;
@property(assign,readwrite) bool limitingNavCameraHeight;
@property(assign,readwrite) bool localizeLabels;
@property(assign,readwrite) double lodBias;
@property(assign,readwrite) long long mapType;
@property(assign,readwrite) float navigationPuckSize;
@property(assign,readwrite) long long navigationShieldSize;
@property(assign,readwrite) unsigned long long neighborMode;
@property(assign,readwrite) <VKOverlayContainerRouteDelegate> * overlayContainerRouteDelegate;
@property(assign,readonly) NSArray * overlays;
@property(assign,readonly) NSSet * persistentOverlays;
@property(assign,readwrite) <VKRouteMatchedAnnotationPresentation> * routeLineSplitAnnotation;
@property(assign,retain) <GEORoutePreloadSession> * routePreloadSession;
@property(assign,readwrite) struct PolylineCoordinate { unsigned int x1; float x2; } routeUserOffset;
@property(assign,readonly) VKAnnotationMarker * selectedAnnotationMarker;
@property(assign,readonly) VKLabelMarker * selectedLabelMarker;
@property(assign,readonly) VKSharedResources * sharedResources;
@property(assign,readwrite) long long shieldIdiom;
@property(assign,readwrite) long long shieldSize;
@property(assign,readwrite) bool shouldLoadFallbackTiles;
@property(assign,readwrite) bool showsBuildings;
@property(assign,readwrite) bool showsPointsOfInterest;
@property(assign,retain) VKStyleManager * styleManager;
@property(assign,readonly) Class superclass;
@property(assign,readwrite) long long targetDisplay;
@property(assign,readonly) VKMercatorTerrainHeightCache * terrainHeightCache;
@property(assign,readonly) VKTileProvider * tileProvider;
@property(getter=isTrafficEnabled,assign,readwrite) bool trafficEnabled;
@property(assign,readonly) NSArray * visibleTileSets;

+ (const char *)nameForRoadClass:(int)arg1;
+ (unsigned long long)numberOfRoadClasses;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_activateModel:(id)arg1;
- (void)_deactivateModel:(id)arg1;
- (void)_forceLayout;
- (void)_localeChanged:(id)arg1;
- (void)_mapConfigurationDidChange;
- (id)_rasterOverlayTileSourceForLevel:(unsigned long long)arg1;
- (void)_resetMaximumZoomLevel;
- (void)_setMaximumZoomLevel:(double)arg1;
- (void)_setStyleManagerFromMapType:(long long)arg1;
- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(unsigned long long)arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (float)_tileSelectionScale;
- (void)_transitionFromMode:(long long)arg1 toMode:(long long)arg2 animated:(bool)arg3;
- (void)_tryTransitionAndPreloadIfNecessary:(id)arg1;
- (void)_updateOverlayTileSource;
- (void)_updateRegularTileProviderMode;
- (void)_updateTileExclusionAreas;
- (void)_updateZoomLevel:(id)arg1;
- (void)addAnnotationMarker:(id)arg1 allowAnimation:(bool)arg2;
- (void)addExternalAnchor:(id)arg1;
- (void)addOverlay:(id)arg1;
- (void)addPersistentOverlay:(id)arg1;
- (void)addRasterOverlay:(id)arg1;
- (void)addSubmodel:(id)arg1;
- (id)additionalManifestConfiguration;
- (id)annotationCoordinateTest;
- (id)annotationMarkerDeselectionCallback;
- (id)annotationMarkerForSelectionAtPoint:(struct VKPoint { double x1; double x2; double x3; })arg1 avoidCurrent:(bool)arg2 canvasSize:(struct CGSize { double x1; double x2; })arg3;
- (id)annotationMarkers;
- (id)annotationRectTest;
- (id)attributionsForCurrentRegion;
- (id)buildingFootprintModel;
- (bool)buildingsAreVisible;
- (long long)buildingsMapMode;
- (void)cancelTileRequests;
- (struct Matrix<float, 4, 1> { float x1[4]; })clearColor;
- (void)clearScene;
- (void)configureTileSources;
- (double)contentScale;
- (id)createSourceForLayer:(unsigned long long)arg1 tileSet:(id)arg2 mode:(long long)arg3;
- (void)createTrafficTileSourceIfNecessary:(id)arg1;
- (long long)currentMapMode;
- (void)dealloc;
- (bool)debugDynamicMapModesEnabled;
- (void)debugHighlightLabelAtScreenPoint:(struct CGPoint { double x1; double x2; })arg1 viewTransform:(id)arg2;
- (id)delegate;
- (void)deselectAnnotationMarker:(id)arg1;
- (void)deselectLabelMarker;
- (id)detailedDescription;
- (void)didBeginTransitionToNavigation;
- (void)didEndNavigation;
- (void)didReceiveMemoryWarning:(bool)arg1;
- (void)didStopLoadingTilesWithError:(id)arg1;
- (void)didTapZoom;
- (bool)disableBuildingFootprints;
- (bool)disableGrid;
- (bool)disableLabels;
- (bool)disablePolygons;
- (bool)disableRasters;
- (bool)disableRealisticLand;
- (bool)disableRealisticRoads;
- (void)disableRoadClass:(bool)arg1 withRoadClass:(int)arg2;
- (bool)disableRoads;
- (bool)dynamicMapModesEnabled;
- (void)experimentConfigurationDidChange:(id)arg1;
- (id)externalAnchors;
- (id)externalTrafficIncidents;
- (void)flushCaches:(bool)arg1;
- (id)focusedLabelsPolylinePainter;
- (void)forceMapType:(long long)arg1;
- (void)foreachActiveLayer:(id)arg1;
- (void)gatherNavigationRenderingPreloadItems:(struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem> > { }*)arg1;
- (void)gglLayoutScene:(id)arg1 withContext:(id)arg2 renderQueue:(struct RenderQueue { int (**x1)(); struct shared_ptr<ggl::RenderQueue> { struct RenderQueue {} *x_2_1_1; struct __shared_weak_count {} *x_2_1_2; } x2; }*)arg3;
- (double)heightAtPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (id)initShouldRasterize:(bool)arg1 mapPurpose:(unsigned long long)arg2 tileGroupIdentifier:(unsigned int)arg3 locale:(id)arg4 contentScale:(double)arg5;
- (void)insertRasterOverlay:(id)arg1 aboveOverlay:(id)arg2;
- (void)insertRasterOverlay:(id)arg1 belowOverlay:(id)arg2;
- (bool)isFullyDrawn;
- (bool)isRoadClassDisabled:(int)arg1;
- (bool)isShowingNoDataPlaceholders;
- (bool)isTrafficEnabled;
- (id)labelDebugString;
- (id)labelMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1 selectableLabelsOnly:(bool)arg2;
- (bool)labelMarkerSelectionEnabled;
- (id)labelMarkers;
- (id)labelModel:(id)arg1 mapTileForTile:(id)arg2 layer:(unsigned long long)arg3;
- (void)labelModel:(id)arg1 selectedLabelMarkerWillDisappear:(id)arg2;
- (long long)labelScaleFactor;
- (void)layoutScene:(id)arg1 withContext:(id)arg2;
- (bool)limitingNavCameraHeight;
- (bool)localizeLabels;
- (double)lodBias;
- (long long)mapType;
- (double)maxTileHeightAtPoint:(struct VKPoint { double x1; double x2; double x3; })arg1;
- (long long)maximumZoomLevelInView:(id)arg1;
- (long long)minimumZoomLevelInView:(id)arg1;
- (id)navTileSource;
- (float)navigationPuckSize;
- (long long)navigationShieldSize;
- (unsigned long long)neighborMode;
- (id)overlayContainer:(id)arg1 painterForOverlay:(id)arg2;
- (id)overlayContainer:(id)arg1 roadTileForTile:(id)arg2;
- (void)overlayContainer:(id)arg1 showingRouteInStandardModeDidChange:(bool)arg2;
- (bool)overlayContainerIsInRealisticMode:(id)arg1;
- (id)overlayContainerRouteDelegate;
- (id)overlays;
- (void)performStylesheetDidChange;
- (void)performStylesheetDoneChanging;
- (void)performStylesheetTransitionDidProgress;
- (void)performStylesheetWillTransitionToDisplayStyle:(unsigned long long)arg1;
- (void)performstylesheetDidReload;
- (id)persistentOverlays;
- (void)polylineGroup:(id)arg1 didAddPolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didRemovePolyline:(id)arg2;
- (void)polylineGroup:(id)arg1 didSelectPolyline:(id)arg2;
- (float)ppi;
- (void)reloadStylesheet;
- (void)removeAnnotationMarker:(id)arg1;
- (void)removeExternalAnchor:(id)arg1;
- (void)removeOverlay:(id)arg1;
- (void)removePersistentOverlay:(id)arg1;
- (void)removeRasterOverlay:(id)arg1;
- (void)requestStylesheetAnimation:(id)arg1 targetMapDisplayStyle:(unsigned long long)arg2 setupHandler:(id)arg3;
- (void)resetTileContainers;
- (void)resourceManifestManager:(id)arg1 didChangeActiveTileGroup:(id)arg2 fromOldTileGroup:(id)arg3;
- (void)resourceManifestManagerWillChangeActiveTileGroup:(id)arg1;
- (id)routeLineSplitAnnotation;
- (id)routePreloadSession;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (void)selectAnnotationMarker:(id)arg1;
- (void)selectLabelMarker:(id)arg1;
- (id)selectedAnnotationMarker;
- (id)selectedLabelMarker;
- (void)setAdditionalManifestConfiguration:(id)arg1;
- (void)setAnnotationMarkerDeselectionCallback:(id)arg1;
- (void)setApplicationState:(unsigned int)arg1;
- (void)setClearColor:(struct Matrix<float, 4, 1> { float x1[4]; })arg1;
- (void)setContentScale:(double)arg1;
- (void)setCurrentLocationText:(id)arg1;
- (void)setDebugDynamicMapModesEnabled:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDesiredMapMode:(long long)arg1 immediate:(bool)arg2;
- (void)setDisableBuildingFootprints:(bool)arg1;
- (void)setDisableGrid:(bool)arg1;
- (void)setDisableLabels:(bool)arg1;
- (void)setDisablePolygons:(bool)arg1;
- (void)setDisableRasters:(bool)arg1;
- (void)setDisableRealisticLand:(bool)arg1;
- (void)setDisableRealisticRoads:(bool)arg1;
- (void)setDisableRoads:(bool)arg1;
- (void)setDynamicMapModesEnabled:(bool)arg1;
- (void)setExternalTrafficIncidents:(id)arg1;
- (void)setFocusedLabelsPolylinePainter:(id)arg1;
- (void)setLabelMarkerSelectionEnabled:(bool)arg1;
- (void)setLabelScaleFactor:(long long)arg1;
- (void)setLimitingNavCameraHeight:(bool)arg1;
- (void)setLocalizeLabels:(bool)arg1;
- (void)setLodBias:(double)arg1;
- (void)setMapType:(long long)arg1;
- (void)setNavigationPuckSize:(float)arg1;
- (void)setNavigationShieldSize:(long long)arg1;
- (void)setNeighborMode:(unsigned long long)arg1;
- (void)setOverlayContainerRouteDelegate:(id)arg1;
- (void)setRouteLineSplitAnnotation:(id)arg1;
- (void)setRoutePreloadSession:(id)arg1;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setShieldIdiom:(long long)arg1;
- (void)setShieldSize:(long long)arg1;
- (void)setShouldLoadFallbackTiles:(bool)arg1;
- (void)setShowsBuildings:(bool)arg1;
- (void)setShowsPointsOfInterest:(bool)arg1;
- (void)setStyleManager:(id)arg1;
- (void)setStylesheetMapDisplayStyle:(unsigned long long)arg1;
- (void)setTargetDisplay:(long long)arg1;
- (void)setTrafficEnabled:(bool)arg1;
- (id)sharedResources;
- (long long)shieldIdiom;
- (long long)shieldSize;
- (void)shouldFlushCaches:(id)arg1;
- (bool)shouldLoadFallbackTiles;
- (bool)showsBuildings;
- (bool)showsPointsOfInterest;
- (id)sourceForLayer:(unsigned long long)arg1 mode:(long long)arg2;
- (id)styleManager;
- (void)stylesheetAnimationDidEnd:(bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(unsigned long long)arg1 toStyle:(unsigned long long)arg2;
- (long long)targetDisplay;
- (id)terrainHeightCache;
- (id)tileProvider;
- (bool)tileProviderMayUseNetwork:(id)arg1;
- (void)tileProviderNeedsUpdate:(id)arg1;
- (id)tileSetForMapLayer:(unsigned long long)arg1 tileGroup:(id)arg2;
- (long long)tileSize;
- (int)tileStyleForMapLayer:(unsigned long long)arg1;
- (void)updateMapDrawStyleWithContext:(id)arg1;
- (void)updateRasterOverlayProviders:(id)arg1 withContext:(id)arg2;
- (id)visibleTileSets;
- (void)willStartLoadingTiles;
- (void)willTapZoom;

@end
