/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit
 */

@interface CKUIBehavior : NSObject {
    long long _HUDStyle;
    double _waveformMaxWidth;
}

@property(assign,readwrite) long long HUDStyle;
@property(assign,readonly) UIColor * activeRecordingDotColor;
@property(assign,readonly) UIColor * appTintColor;
@property(assign,readonly) UIColor * attachmentBalloonActionColor;
@property(assign,readonly) struct CGSize { double x1; double x2; } attachmentBalloonSize;
@property(assign,readonly) UIColor * attachmentBalloonSubtitleTextColor;
@property(assign,readonly) UIColor * attachmentBalloonTitleTextColor;
@property(assign,readonly) struct CGSize { double x1; double x2; } attachmentBrowserDefaultSizeForSquare;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } attachmentBrowserFeedLayoutSectionInset;
@property(assign,readonly) double attachmentBrowserGridInterItemSpacing;
@property(assign,readonly) double attachmentBrowserGridMinimumLineSpacing;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } attachmentBrowserGridSectionInset;
@property(assign,readonly) double attachmentBrowserHeaderLabelPadding;
@property(assign,readonly) UIFont * attachmentTextFont;
@property(assign,readonly) Class attachmentViewClass;
@property(assign,readonly) UIFont * audioBalloonTimeFont;
@property(assign,readonly) double audioBalloonTimeInset;
@property(assign,readonly) Class audioBalloonViewClass;
@property(assign,readonly) double audioBalloonWaveformTimeSpace;
@property(assign,readonly) UIFont * audioHintFont;
@property(assign,readonly) bool automaticallyShowsKeyboard;
@property(assign,readonly) double balloonLineFragmentPadding;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } balloonMaskFrameCapInsets;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } balloonMaskFrameInsets;
@property(assign,readonly) double balloonMaskTailHeight;
@property(assign,readonly) double balloonMaskTailWidth;
@property(assign,readonly) NSString * balloonName;
@property(assign,readonly) UIFont * balloonSubjectFont;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } balloonTextContainerInset;
@property(assign,readonly) UIFont * balloonTextFont;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } balloonTranscriptInsets;
@property(assign,readonly) double bottomConversationListSpace;
@property(assign,readonly) double bottomTranscriptSpace;
@property(assign,readonly) bool calculatesWidthForAttachmentBalloons;
@property(assign,readonly) bool cameraIsWhitelisted;
@property(assign,readonly) bool canAccessContacts;
@property(assign,readonly) bool canAccessPhotos;
@property(assign,readonly) UIFont * characterCountFont;
@property(assign,readonly) double checkmarkHorizontalPadding;
@property(assign,readonly) UIImage * chevronImage;
@property(assign,readonly) unsigned long long commonRepliesLoadLimit;
@property(assign,readonly) UIFont * contactAttachmentNameFont;
@property(assign,readonly) UIFont * contactAttachmentOrgFont;
@property(assign,readonly) double contactBalloonHeight;
@property(assign,readonly) double contactBalloonInnerItemSpacing;
@property(assign,readonly) double contactBalloonMinWidth;
@property(assign,readonly) double contactBalloonNameOrgSpacing;
@property(assign,readonly) double contactBalloonOrgBottomSpacing;
@property(assign,readonly) double contactBalloonTopNameSpacing;
@property(assign,readonly) Class contactBalloonViewClass;
@property(assign,readonly) struct CGSize { double x1; double x2; } contactImageSize;
@property(assign,readonly) double contactPhotoBalloonMargin;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } contactPhotoTranscriptInsets;
@property(assign,readonly) unsigned long long conversationCacheSize;
@property(assign,readonly) double conversationListCellBackgroundPadding;
@property(assign,readonly) double conversationListCellLeftMargin;
@property(assign,readonly) unsigned long long conversationListCellMaxSummaryLength;
@property(assign,readonly) double conversationListCellRightMargin;
@property(assign,readonly) unsigned long long conversationListCellSummaryNumberOfLines;
@property(assign,readonly) double conversationListContactImageDiameter;
@property(assign,readonly) UIColor * conversationListDateColor;
@property(assign,readonly) UIFont * conversationListDateFont;
@property(assign,readonly) double conversationListEditingTableMarginWidth;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } conversationListFilterSegmentInset;
@property(assign,readonly) UIColor * conversationListGroupCountColor;
@property(assign,readonly) UIFont * conversationListGroupCountFont;
@property(assign,readonly) UIFont * conversationListGroupSenderFont;
@property(assign,readonly) double conversationListMultipleContactsImageDiameter;
@property(assign,readonly) Class conversationListNavigationControllerClass;
@property(assign,readonly) UIColor * conversationListSenderColor;
@property(assign,readonly) UIFont * conversationListSenderFont;
@property(assign,readonly) UIColor * conversationListSummaryColor;
@property(assign,readonly) UIFont * conversationListSummaryFont;
@property(assign,readonly) double conversationListTableMarginWidth;
@property(assign,readonly) Class conversationListTableViewClass;
@property(assign,readonly) UIColor * darkAppTintColor;
@property(assign,readonly) bool darkUIEnabled;
@property(assign,readonly) NSDictionary * datestampTranscriptBoldTextAttributes;
@property(assign,readonly) NSDictionary * datestampTranscriptTextAttributes;
@property(assign,readonly) unsigned long long defaultConversationSummaryMessageCount;
@property(assign,readonly) unsigned long long defaultConversationViewingMessageCount;
@property(assign,readonly) UIColor * detailsBackgroundColor;
@property(assign,readonly) UIImage * detailsImage;
@property(assign,readonly) UIColor * dimmingViewBackgroundColor;
@property(assign,readonly) double dividerHeight;
@property(assign,readonly) struct CGSize { double x1; double x2; } documentIconSize;
@property(assign,readonly) NSDictionary * drawerTranscriptTextAttributes;
@property(assign,readonly) double editingTransitionAnimationDuration;
@property(assign,readonly) double emojiPreviewMaxWidth;
@property(assign,readonly) double entryContentViewPortraitWidth;
@property(assign,readonly) double entryCoverViewPortraitWidth;
@property(assign,readonly) UIColor * entryFieldAudioRecordingBaloonColor;
@property(assign,readonly) UIColor * entryFieldBackgroundColor;
@property(assign,readonly) UIColor * entryFieldButtonColor;
@property(assign,readonly) UIColor * entryFieldCoverBorderColor;
@property(assign,readonly) UIColor * entryFieldCoverFillColor;
@property(assign,readonly) double entryFieldCoverLineWidth;
@property(assign,readonly) UIColor * entryFieldDividerColor;
@property(assign,readonly) double entryFieldDividerHeight;
@property(assign,readonly) UIColor * entryFieldGrayColor;
@property(assign,readonly) bool entryFieldShouldUseBackdropView;
@property(assign,readonly) UIColor * entryFieldTextColor;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } entryViewCoverInsets;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } entryViewMarginInsets;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } entryViewVerticalAlignmentInsets;
@property(assign,readonly) UIImage * errorDocumentIcon;
@property(assign,readonly) bool faceTimeAudioIsWhitelisted;
@property(assign,readonly) bool faceTimeVideoIsWhitelisted;
@property(assign,readonly) double fadeInBubbleAnimationDuration;
@property(assign,readonly) UIImage * forwardImage;
@property(assign,readonly) UIImage * genericDocumentIcon;
@property(assign,readonly) UIColor * grayTextColor;
@property(assign,readonly) bool handlesBalloonViewTitleTapsSeparately;
@property(assign,readonly) UIFont * headerFont;
@property(assign,readonly) bool hideUnreadCountInTitleBar;
@property(assign,readonly) bool hidesUnreadIndicatorWhenEditing;
@property(assign,readonly) bool hyphenatesTextContent;
@property(assign,readonly) unsigned long long initialConversationViewingMessageCount;
@property(assign,readonly) bool isAccessibilityPreferredContentSizeCategory;
@property(assign,readonly) bool isSizeConstrained;
@property(assign,readonly) bool joystickUsesWindow;
@property(assign,readonly) long long keyboardAppearance;
@property(assign,readonly) double largeTranscriptSpace;
@property(assign,readonly) UIColor * lightGrayColor;
@property(assign,readonly) UIImage * locationShareActionIcon;
@property(assign,readonly) double locationShareBalloonAdditionalVertPadding;
@property(assign,readonly) double locationShareBalloonButtonHeight;
@property(assign,readonly) double locationShareBalloonContactImageDiameter;
@property(assign,readonly) long long locationShareEODHour;
@property(assign,readonly) double locationShareOneHourTimeInterval;
@property(assign,readonly) UIFont * locationSubtitleFont;
@property(assign,readonly) double locationValidInterval;
@property(assign,readonly) bool lowClearanceInLandscape;
@property(assign,readonly) bool mailIsWhitelisted;
@property(assign,readonly) double maxAudioRecordingDuration;
@property(assign,readonly) double mediumTranscriptSpace;
@property(assign,readonly) UIColor * messagesControllerBackgroundColor;
@property(assign,readonly) double minAudioRecordingDuration;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } minimumPlayButtonInsets;
@property(assign,readonly) bool modifiesFirstBalloonLayout;
@property(assign,readonly) bool modifiesSingleLineBalloonLayout;
@property(assign,readonly) double muteEightHourTimeInterval;
@property(assign,readonly) double muteOneHourTimeInterval;
@property(assign,readonly) UIFont * nameFieldFont;
@property(assign,readonly) double nanoNoteSenderContentSpace;
@property(assign,readonly) Class navigationBarClass;
@property(assign,readonly) UIColor * notificationSubtitleColor;
@property(assign,readonly) unsigned long long numberOfAssetsInPhotoPicker;
@property(assign,readonly) unsigned long long numberOfButtonsInPhotoPicker;
@property(assign,readonly) bool opensLocationsInMapsApp;
@property(assign,readonly) bool phoneIsWhitelisted;
@property(assign,readonly) double photoPickerInterItemSpacing;
@property(assign,readonly) double photoPickerMaxPhotoHeight;
@property(assign,readonly) double photoPickerMaxPopoverPhotoHeight;
@property(assign,readonly) double photoPickerPopoverWidth;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } photoPickerSectionInsets;
@property(assign,readonly) bool photoPickerShouldZoomOnSelection;
@property(assign,readonly) struct CGSize { double x1; double x2; } photoSheetProgressIndicatorSize;
@property(assign,readonly) double photoSheetVideoIconPadding;
@property(assign,readonly) bool photosIsWhitelisted;
@property(assign,readonly) UIImage * playButtonArrowImage;
@property(assign,readonly) long long playButtonBackdropStyle;
@property(assign,readonly) UIImage * playButtonImage;
@property(assign,readonly) bool playButtonPunchesOutArrow;
@property(assign,readonly) bool playsInlineVideo;
@property(assign,readonly) bool presentForwardingUIModally;
@property(assign,readonly) bool presentsFullscreenInViewService;
@property(assign,readonly) bool presentsQuickLookController;
@property(assign,readonly) bool presentsReaderController;
@property(assign,readonly) double previewMaxWidth;
@property(assign,readonly) double previewTitleBarHeight;
@property(assign,readonly) UIFont * previewTitleFont;
@property(assign,readonly) UIColor * progressBarTrackTintColor;
@property(assign,readonly) bool promptsForReadReceiptsSetting;
@property(assign,readonly) double raiseToTalkAutoSendMaxDuration;
@property(assign,readonly) double raiseToTalkErrorMaxDuration;
@property(assign,readonly) UIImage * readDNDImage;
@property(assign,readonly) UIFont * readerFont;
@property(assign,readonly) UIFont * recipientNameFont;
@property(assign,readonly) UIColor * recipientsDividerColor;
@property(assign,readonly) bool recordsRecentContact;
@property(assign,readonly) bool resetsIdleTimer;
@property(assign,readonly) double resizeMessageEntryViewAnimationDuration;
@property(assign,readonly) double scrollInNewMessageAnimationDuration;
@property(assign,readonly) bool scrollToBottomStopsAtTopOfLastBubble;
@property(assign,readonly) bool selectNewConversationOnDeletion;
@property(assign,readonly) bool selectNewConversationOnStateRestore;
@property(assign,readonly) double senderSummaryConversationListSpace;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } senderTranscriptInsets;
@property(assign,readonly) NSDictionary * senderTranscriptTextAttributes;
@property(assign,readonly) bool shouldAdjustWidthForSendFailure;
@property(assign,readonly) bool shouldAutomaticallyCheckAvailabilityOfAlternateAddresses;
@property(assign,readonly) bool shouldBackfillTranscript;
@property(assign,readonly) bool shouldFillAttachmentBalloon;
@property(assign,readonly) bool shouldGrabBackgroundAssertion;
@property(assign,readonly) bool shouldHomogenizeAtomsForPreferredService;
@property(assign,readonly) bool shouldInsetForStatusBar;
@property(assign,readonly) bool shouldNotShowSendButton;
@property(assign,readonly) bool shouldReconfigureNewComposeOnRotation;
@property(assign,readonly) bool shouldRefreshAlternateAddressesSheet;
@property(assign,readonly) bool shouldShowContactPhotosInConversationList;
@property(assign,readonly) bool shouldShowContactPhotosInTranscript;
@property(assign,readonly) bool shouldShowDisclosureChevronInRecipientAtoms;
@property(assign,readonly) bool shouldShowSearchBarInConversationList;
@property(assign,readonly) bool shouldSuppressRotationInNewCompose;
@property(assign,readonly) bool shouldUseDynamicGradient;
@property(assign,readonly) bool shouldUseDynamicScrolling;
@property(assign,readonly) bool shouldUseRotisserieScrolling;
@property(assign,readonly) bool shouldUseSendAnimation;
@property(assign,readonly) bool shouldUseTranslucentBars;
@property(assign,readonly) bool showMMSSetup;
@property(assign,readonly) bool showPendingInConversationList;
@property(assign,readonly) bool showsBalloonChevron;
@property(assign,readonly) bool showsCompositionPanel;
@property(assign,readonly) bool showsConversationListCellChevronImage;
@property(assign,readonly) bool showsFileSizeInSubtitle;
@property(assign,readonly) bool showsNoMessagesDialog;
@property(assign,readonly) bool showsPlaceCardForBalloonViewTitleTap;
@property(assign,readonly) bool showsProgressInNavigationBar;
@property(assign,readonly) bool showsSendAnimation;
@property(assign,readonly) bool showsVCalViewer;
@property(assign,readonly) NSString * skinnyBalloonName;
@property(assign,readonly) double skinnyBalloonWidthDifference;
@property(assign,readonly) NSString * skinnyTaillessBalloonName;
@property(assign,readonly) double smallTranscriptSpace;
@property(assign,readonly) NSDictionary * stampTranscriptBoldTextAttributes;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } stampTranscriptInsets;
@property(assign,readonly) NSDictionary * stampTranscriptTextAttributes;
@property(assign,readonly) NSAttributedString * statusSaveButtonTranscriptText;
@property(assign,readonly) struct CGSize { double x1; double x2; } statusSaveButtonTranscriptTextSize;
@property(assign,readonly) NSString * strokedBalloonName;
@property(assign,readonly) NSString * strokedTaillessBalloonName;
@property(assign,readonly) double summaryDateConversationListSpace;
@property(assign,readonly) unsigned long long supportedInterfaceOrientations;
@property(assign,readonly) bool supportsContiguousAttachments;
@property(assign,readonly) bool supportsPassbookAttachments;
@property(assign,readonly) bool supportsTypingIndicatorAnimation;
@property(assign,readonly) NSString * taillessBallonName;
@property(assign,readonly) UIImage * textDocumentIcon;
@property(assign,readonly) double throwMessageAnimationDuration;
@property(assign,readonly) NSDateFormatter * timestampDateFormatter;
@property(assign,readonly) bool timestampsPushBalloons;
@property(assign,readonly) double topConversationListSpace;
@property(assign,readonly) double topTranscriptSpace;
@property(assign,readonly) UIColor * transcriptBackgroundColor;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } transcriptBoldTextAlignmentInsets;
@property(assign,readonly) UIFont * transcriptBoldTextFont;
@property(assign,readonly) double transcriptBoldTextHeight;
@property(assign,readonly) double transcriptButtonCharge;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } transcriptButtonContentEdgeInsets;
@property(assign,readonly) NSDictionary * transcriptButtonTextAttributes;
@property(assign,readonly) bool transcriptCanUseOpaqueMask;
@property(assign,readonly) double transcriptContactImageDiameter;
@property(assign,readonly) double transcriptDrawerContactImageDiameter;
@property(assign,readonly) double transcriptDrawerContactImagePadding;
@property(assign,readonly) UIFont * transcriptHeaderTextFont;
@property(assign,readonly) double transcriptHeaderViewMaxRows;
@property(assign,readonly) UIFont * transcriptJunkHeaderButtonFont;
@property(assign,readonly) double transcriptJunkHeaderButtonHeight;
@property(assign,readonly) UIFont * transcriptJunkHeaderTitleFont;
@property(assign,readonly) long long transcriptLoadingIndicatorStyle;
@property(assign,readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } transcriptMarginInsets;
@property(assign,readonly) double transcriptPortraitWidth;
@property(assign,readonly) UIColor * transcriptSeparatorColor;
@property(assign,readonly) UIColor * transcriptTextColor;
@property(assign,readonly) UIFont * transcriptTextFont;
@property(assign,readonly) UIImage * trashImage;
@property(assign,readonly) struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; double x5; struct CGPoint { double x_6_1_1; double x_6_1_2; } x6; struct CGPoint { double x_7_1_1; double x_7_1_2; } x7; struct CGPoint { double x_8_1_1; double x_8_1_2; } x8; double x9; double x10; struct CGPoint { double x_11_1_1; double x_11_1_2; } x11; } typingIndicatorSpec;
@property(assign,readonly) UIImage * unreadDNDImage;
@property(assign,readonly) UIImage * unreadImage;
@property(assign,readonly) double updateTranscriptInsetsAnimationDuration;
@property(assign,readonly) bool useSingleLineForContactVCardNames;
@property(assign,readonly) bool usesCustomSplitViewMasterColumnWidth;
@property(assign,readonly) bool usesDataDetectorsUI;
@property(assign,readonly) bool usesEntryView;
@property(assign,readonly) bool usesJoystick;
@property(assign,readonly) bool usesNavigationBarControls;
@property(assign,readonly) bool usesPersistentConversationSelection;
@property(assign,readonly) bool usesPopovers;
@property(assign,readonly) bool usesUncollapsedSplitview;
@property(assign,readonly) UIColor * waveformDisabledColor;
@property(assign,readonly) unsigned long long waveformGapWidth;
@property(assign,readonly) double waveformHeight;
@property(assign,readonly) unsigned long long waveformMaxPowerLevelsCount;
@property(assign,readonly) double waveformMaxWidth;
@property(assign,readonly) double waveformMaxWidthDuration;
@property(assign,readonly) double waveformMinDbPowerLevel;
@property(assign,readonly) double waveformMinLinearPowerLevel;
@property(assign,readonly) unsigned long long waveformMinPowerLevelsCount;
@property(assign,readonly) unsigned long long waveformPowerLevelWidth;
@property(assign,readonly) unsigned long long waveformPowerLevelWidthIncrement;
@property(assign,readonly) UIColor * waveformUnplayedColor;

+ (id)sharedBehaviors;

- (long long)HUDStyle;
- (id)_leftStatusTranscriptBoldTextAttributes;
- (id)_leftStatusTranscriptTextAttributes;
- (id)_rightStatusTranscriptBoldTextAttributes;
- (id)_rightStatusTranscriptTextAttributes;
- (double)_transcriptAnimationScaleFactor;
- (id)activeRecordingDotColor;
- (id)appTintColor;
- (id)attachmentBalloonActionColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })attachmentBalloonAlignmentRectInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })attachmentBalloonAlignmentRectInsetsWithTail:(bool)arg1;
- (struct CGSize { double x1; double x2; })attachmentBalloonSize;
- (id)attachmentBalloonSubtitleTextColor;
- (id)attachmentBalloonTitleTextColor;
- (struct CGSize { double x1; double x2; })attachmentBrowserDefaultSizeForSquare;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })attachmentBrowserFeedLayoutSectionInset;
- (double)attachmentBrowserGridInterItemSpacing;
- (double)attachmentBrowserGridMinimumLineSpacing;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })attachmentBrowserGridSectionInset;
- (double)attachmentBrowserHeaderLabelPadding;
- (id)attachmentTextFont;
- (Class)attachmentViewClass;
- (id)audioBalloonTimeFont;
- (double)audioBalloonTimeInset;
- (double)audioBalloonTimeWidthForDuration:(double)arg1;
- (Class)audioBalloonViewClass;
- (double)audioBalloonWaveformTimeSpace;
- (id)audioHintFont;
- (bool)automaticallyShowsKeyboard;
- (double)balloonBalloonTranscriptSpace:(unsigned char)arg1;
- (id)balloonColorsForColorType:(BOOL)arg1;
- (double)balloonLineFragmentPadding;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })balloonMaskAlignmentRectInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })balloonMaskAlignmentRectInsetsWithTail:(bool)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })balloonMaskCapInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })balloonMaskCapInsetsWithTail:(bool)arg1 skinny:(bool)arg2;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })balloonMaskFrameCapInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })balloonMaskFrameInsets;
- (struct CGSize { double x1; double x2; })balloonMaskSize;
- (struct CGSize { double x1; double x2; })balloonMaskSizeWithTail:(bool)arg1;
- (double)balloonMaskTailHeight;
- (double)balloonMaskTailWidth;
- (id)balloonName;
- (id)balloonOverlayColorForColorType:(BOOL)arg1;
- (id)balloonSubjectFont;
- (id)balloonTextColorForColorType:(BOOL)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })balloonTextContainerInset;
- (id)balloonTextFont;
- (id)balloonTextLinkColorForColorType:(BOOL)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })balloonTranscriptInsets;
- (id)blue_balloonColors;
- (id)blue_balloonOverlayColor;
- (id)blue_balloonTextColor;
- (id)blue_balloonTextLinkColor;
- (id)blue_chevronImage;
- (id)blue_progressViewColor;
- (id)blue_recipientTextColor;
- (id)blue_sendButtonColor;
- (id)blue_unfilledBalloonColor;
- (id)blue_waveformColor;
- (double)bottomConversationListSpace;
- (double)bottomTranscriptSpace;
- (bool)calculatesWidthForAttachmentBalloons;
- (bool)cameraIsWhitelisted;
- (bool)canAccessContacts;
- (bool)canAccessPhotos;
- (id)characterCountFont;
- (double)checkmarkHorizontalPadding;
- (id)chevronImage;
- (id)chevronImageForColorType:(BOOL)arg1;
- (unsigned long long)commonRepliesLoadLimit;
- (double)composeBalloonMaxWidthForEntryContentViewWidth:(double)arg1;
- (id)contactAttachmentNameFont;
- (id)contactAttachmentOrgFont;
- (double)contactBalloonHeight;
- (double)contactBalloonInnerItemSpacing;
- (double)contactBalloonMinWidth;
- (double)contactBalloonNameOrgSpacing;
- (double)contactBalloonOrgBottomSpacing;
- (double)contactBalloonTopNameSpacing;
- (Class)contactBalloonViewClass;
- (struct CGSize { double x1; double x2; })contactImageSize;
- (double)contactPhotoBalloonMargin;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })contactPhotoTranscriptInsets;
- (unsigned long long)conversationCacheSize;
- (double)conversationListCellBackgroundPadding;
- (double)conversationListCellLeftMargin;
- (unsigned long long)conversationListCellMaxSummaryLength;
- (double)conversationListCellRightMargin;
- (unsigned long long)conversationListCellSummaryNumberOfLines;
- (double)conversationListContactImageDiameter;
- (id)conversationListDateColor;
- (id)conversationListDateFont;
- (double)conversationListEditingTableMarginWidth;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })conversationListFilterSegmentInset;
- (id)conversationListGroupCountColor;
- (id)conversationListGroupCountFont;
- (id)conversationListGroupSenderFont;
- (double)conversationListMultipleContactsImageDiameter;
- (Class)conversationListNavigationControllerClass;
- (double)conversationListSenderBodyLeading;
- (id)conversationListSenderColor;
- (id)conversationListSenderFont;
- (double)conversationListSummaryBodyLeading;
- (id)conversationListSummaryColor;
- (id)conversationListSummaryFont;
- (double)conversationListTableMarginWidth;
- (Class)conversationListTableViewClass;
- (id)darkAppTintColor;
- (bool)darkUIEnabled;
- (id)datestampTranscriptBoldTextAttributes;
- (id)datestampTranscriptTextAttributes;
- (unsigned long long)defaultConversationSummaryMessageCount;
- (unsigned long long)defaultConversationViewingMessageCount;
- (id)detailsBackgroundColor;
- (id)detailsImage;
- (id)dimmingViewBackgroundColor;
- (double)dividerHeight;
- (struct CGSize { double x1; double x2; })documentIconSize;
- (id)drawerTranscriptTextAttributes;
- (double)editingTransitionAnimationDuration;
- (double)emojiPreviewMaxWidth;
- (double)entryContentViewPortraitWidth;
- (double)entryCoverViewPortraitWidth;
- (id)entryFieldAudioRecordingBaloonColor;
- (id)entryFieldBackgroundColor;
- (id)entryFieldButtonColor;
- (id)entryFieldCoverBorderColor;
- (id)entryFieldCoverFillColor;
- (double)entryFieldCoverLineWidth;
- (id)entryFieldDividerColor;
- (double)entryFieldDividerHeight;
- (id)entryFieldGrayColor;
- (bool)entryFieldShouldUseBackdropView;
- (id)entryFieldTextColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })entryViewCoverInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })entryViewMarginInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })entryViewVerticalAlignmentInsets;
- (id)errorDocumentIcon;
- (bool)faceTimeAudioIsWhitelisted;
- (bool)faceTimeVideoIsWhitelisted;
- (double)fadeInBubbleAnimationDuration;
- (id)forwardImage;
- (id)genericDocumentIcon;
- (id)grayTextColor;
- (id)gray_balloonColors;
- (id)gray_balloonOverlayColor;
- (id)gray_balloonTextColor;
- (id)gray_balloonTextLinkColor;
- (id)gray_chevronImage;
- (id)gray_progressViewColor;
- (id)gray_recipientTextColor;
- (id)gray_sendButtonColor;
- (id)gray_unfilledBalloonColor;
- (id)gray_waveformColor;
- (id)green_balloonColors;
- (id)green_balloonOverlayColor;
- (id)green_balloonTextColor;
- (id)green_balloonTextLinkColor;
- (id)green_chevronImage;
- (id)green_progressViewColor;
- (id)green_recipientTextColor;
- (id)green_sendButtonColor;
- (id)green_unfilledBalloonColor;
- (id)green_waveformColor;
- (bool)handlesBalloonViewTitleTapsSeparately;
- (id)headerFont;
- (bool)hideUnreadCountInTitleBar;
- (bool)hidesUnreadIndicatorWhenEditing;
- (bool)hyphenatesTextContent;
- (unsigned long long)initialConversationViewingMessageCount;
- (void)invalidateTranscriptDrawerWidth;
- (bool)isAccessibilityPreferredContentSizeCategory;
- (bool)isSizeConstrained;
- (bool)joystickUsesWindow;
- (long long)keyboardAppearance;
- (double)largeTranscriptSpace;
- (double)leftBalloonMaxWidthForTranscriptWidth:(double)arg1 marginInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (double)leftSplitPaneMaximumWidth;
- (double)leftSplitPaneMinimumWidth;
- (double)leftSplitPaneWidthForUIInterfaceOrientation:(long long)arg1;
- (double)leftSplitPaneWidthFraction;
- (id)lightGrayColor;
- (struct CGSize { double x1; double x2; })locationOfferMapThumbnailFillSizeForWidth:(double)arg1;
- (id)locationShareActionIcon;
- (double)locationShareBalloonAdditionalVertPadding;
- (double)locationShareBalloonButtonHeight;
- (double)locationShareBalloonContactImageDiameter;
- (double)locationShareBalloonLabelMaxHeightForOfferState:(long long)arg1;
- (struct CGSize { double x1; double x2; })locationShareBalloonSizeForWidth:(double)arg1 offerState:(long long)arg2;
- (long long)locationShareEODHour;
- (double)locationShareOneHourTimeInterval;
- (id)locationSubtitleFont;
- (double)locationValidInterval;
- (bool)lowClearanceInLandscape;
- (bool)mailIsWhitelisted;
- (struct CGSize { double x1; double x2; })mapThumbnailFillSizeForWidth:(double)arg1;
- (double)maxAudioRecordingDuration;
- (double)mediumTranscriptSpace;
- (id)messagesControllerBackgroundColor;
- (double)minAudioRecordingDuration;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })minimumPlayButtonInsets;
- (bool)modifiesFirstBalloonLayout;
- (bool)modifiesSingleLineBalloonLayout;
- (double)muteEightHourTimeInterval;
- (double)muteOneHourTimeInterval;
- (id)nameFieldFont;
- (double)nanoNoteSenderContentSpace;
- (Class)navigationBarClass;
- (id)notificationSubtitleColor;
- (unsigned long long)numberOfAssetsInPhotoPicker;
- (unsigned long long)numberOfButtonsInPhotoPicker;
- (bool)opensLocationsInMapsApp;
- (bool)phoneIsWhitelisted;
- (double)photoPickerInterItemSpacing;
- (double)photoPickerMaxPhotoHeight;
- (double)photoPickerMaxPhotoWidthForAlertWidth:(double)arg1;
- (double)photoPickerMaxPopoverPhotoHeight;
- (double)photoPickerMaxZoomedPhotoHeightForAlertWidth:(double)arg1;
- (double)photoPickerPopoverWidth;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })photoPickerSectionInsets;
- (bool)photoPickerShouldZoomOnSelection;
- (struct CGSize { double x1; double x2; })photoSheetProgressIndicatorSize;
- (double)photoSheetVideoIconPadding;
- (bool)photosIsWhitelisted;
- (id)playButtonArrowImage;
- (long long)playButtonBackdropStyle;
- (id)playButtonImage;
- (bool)playButtonPunchesOutArrow;
- (bool)playsInlineVideo;
- (bool)presentForwardingUIModally;
- (bool)presentsFullscreenInViewService;
- (bool)presentsQuickLookController;
- (bool)presentsReaderController;
- (double)previewMaxWidth;
- (double)previewTitleBarHeight;
- (id)previewTitleFont;
- (id)progressBarTrackTintColor;
- (id)progressViewColorForColorType:(BOOL)arg1;
- (bool)promptsForReadReceiptsSetting;
- (double)raiseToTalkAutoSendMaxDuration;
- (double)raiseToTalkErrorMaxDuration;
- (id)readDNDImage;
- (id)readerFont;
- (id)recipientNameFont;
- (id)recipientTextColorForColorType:(BOOL)arg1;
- (id)recipientsDividerColor;
- (bool)recordsRecentContact;
- (id)red_balloonColors;
- (id)red_balloonOverlayColor;
- (id)red_balloonTextColor;
- (id)red_balloonTextLinkColor;
- (id)red_chevronImage;
- (id)red_progressViewColor;
- (id)red_recipientTextColor;
- (id)red_sendButtonColor;
- (id)red_unfilledBalloonColor;
- (id)red_waveformColor;
- (bool)resetsIdleTimer;
- (double)resizeMessageEntryViewAnimationDuration;
- (double)rightBalloonMaxWidthForEntryContentViewWidth:(double)arg1;
- (double)scrollInNewMessageAnimationDuration;
- (bool)scrollToBottomStopsAtTopOfLastBubble;
- (bool)selectNewConversationOnDeletion;
- (bool)selectNewConversationOnStateRestore;
- (id)sendButtonColorForColorType:(BOOL)arg1;
- (double)senderSummaryConversationListSpace;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })senderTranscriptInsets;
- (id)senderTranscriptTextAttributes;
- (void)setHUDStyle:(long long)arg1;
- (bool)shouldAdjustWidthForSendFailure;
- (bool)shouldAutomaticallyCheckAvailabilityOfAlternateAddresses;
- (bool)shouldBackfillTranscript;
- (bool)shouldFillAttachmentBalloon;
- (bool)shouldGrabBackgroundAssertion;
- (bool)shouldHomogenizeAtomsForPreferredService;
- (bool)shouldInsetForStatusBar;
- (bool)shouldNotShowSendButton;
- (bool)shouldReconfigureNewComposeOnRotation;
- (bool)shouldRefreshAlternateAddressesSheet;
- (bool)shouldShowContactPhotosInConversationList;
- (bool)shouldShowContactPhotosInTranscript;
- (bool)shouldShowDisclosureChevronInRecipientAtoms;
- (bool)shouldShowSearchBarInConversationList;
- (bool)shouldSuppressRotationInNewCompose;
- (bool)shouldUseDynamicGradient;
- (bool)shouldUseDynamicScrolling;
- (bool)shouldUseRotisserieScrolling;
- (bool)shouldUseSendAnimation;
- (bool)shouldUseTranslucentBars;
- (bool)showMMSSetup;
- (bool)showPendingInConversationList;
- (bool)showsBalloonChevron;
- (bool)showsCompositionPanel;
- (bool)showsConversationListCellChevronImage;
- (bool)showsFileSizeInSubtitle;
- (bool)showsNoMessagesDialog;
- (bool)showsPlaceCardForBalloonViewTitleTap;
- (bool)showsProgressInNavigationBar;
- (bool)showsSendAnimation;
- (bool)showsVCalViewer;
- (id)siri_balloonColors;
- (id)siri_balloonOverlayColor;
- (id)siri_balloonTextColor;
- (id)siri_balloonTextLinkColor;
- (id)siri_chevronImage;
- (id)siri_progressViewColor;
- (id)siri_recipientTextColor;
- (id)siri_sendButtonColor;
- (id)siri_unfilledBalloonColor;
- (id)siri_waveformColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })skinnyBalloonMaskCapInsets;
- (struct CGSize { double x1; double x2; })skinnyBalloonMaskSize;
- (struct CGSize { double x1; double x2; })skinnyBalloonMaskSizeWithTail:(bool)arg1;
- (id)skinnyBalloonName;
- (double)skinnyBalloonWidthDifference;
- (id)skinnyTaillessBalloonName;
- (double)smallTranscriptSpace;
- (id)stampTranscriptBoldTextAttributes;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })stampTranscriptInsets;
- (id)stampTranscriptTextAttributes;
- (id)statusSaveButtonTranscriptText;
- (struct CGSize { double x1; double x2; })statusSaveButtonTranscriptTextSize;
- (id)statusTranscriptBoldTextAttributesForOrientation:(BOOL)arg1;
- (id)statusTranscriptTextAttributesForOrientation:(BOOL)arg1;
- (id)strokedBalloonName;
- (id)strokedTaillessBalloonName;
- (double)summaryDateConversationListSpace;
- (unsigned long long)supportedInterfaceOrientations;
- (bool)supportsContiguousAttachments;
- (bool)supportsPassbookAttachments;
- (bool)supportsTypingIndicatorAnimation;
- (id)systemGrayChevronImage;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })taillessAttachmentBalloonAlignmentRectInsets;
- (id)taillessBallonName;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })taillessBalloonMaskAlignmentRectInsets;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })taillessBalloonMaskCapInsets;
- (struct CGSize { double x1; double x2; })taillessBalloonMaskSize;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })taillessSkinnyBalloonMaskCapInsets;
- (struct CGSize { double x1; double x2; })taillessSkinnyBalloonMaskSize;
- (id)textDocumentIcon;
- (double)throwMessageAnimationDuration;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })thumbnailContentAlignmentInsetsForOrientation:(BOOL)arg1;
- (struct CGSize { double x1; double x2; })thumbnailFillSizeForWidth:(double)arg1 imageSize:(struct CGSize { double x1; double x2; })arg2;
- (id)timestampDateFormatter;
- (bool)timestampsPushBalloons;
- (double)toFieldPreferredHeight;
- (double)topConversationListSpace;
- (double)topTranscriptSpace;
- (id)transcriptBackgroundColor;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })transcriptBoldTextAlignmentInsets;
- (id)transcriptBoldTextFont;
- (double)transcriptBoldTextHeight;
- (double)transcriptButtonCharge;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })transcriptButtonContentEdgeInsets;
- (id)transcriptButtonTextAttributes;
- (bool)transcriptCanUseOpaqueMask;
- (double)transcriptContactImageDiameter;
- (double)transcriptDrawerContactImageDiameter;
- (double)transcriptDrawerContactImagePadding;
- (id)transcriptDrawerFont;
- (double)transcriptDrawerMaxContentOffsetXForMarginInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (double)transcriptDrawerOverlapForMarginInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (double)transcriptDrawerSpace;
- (double)transcriptDrawerWidthForMarginInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (id)transcriptHeaderTextFont;
- (double)transcriptHeaderViewMaxRows;
- (id)transcriptJunkHeaderButtonFont;
- (double)transcriptJunkHeaderButtonHeight;
- (id)transcriptJunkHeaderTitleFont;
- (long long)transcriptLoadingIndicatorStyle;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })transcriptMarginInsets;
- (double)transcriptPortraitWidth;
- (id)transcriptSeparatorColor;
- (id)transcriptTextColor;
- (id)transcriptTextFont;
- (double)transcriptWaveformWidthForDuration:(double)arg1;
- (id)trashImage;
- (struct { struct CGSize { double x_1_1_1; double x_1_1_2; } x1; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_2_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_2_1_2; } x2; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_3_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_3_1_2; } x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; double x5; struct CGPoint { double x_6_1_1; double x_6_1_2; } x6; struct CGPoint { double x_7_1_1; double x_7_1_2; } x7; struct CGPoint { double x_8_1_1; double x_8_1_2; } x8; double x9; double x10; struct CGPoint { double x_11_1_1; double x_11_1_2; } x11; })typingIndicatorSpec;
- (id)unfilledBalloonColorForColorType:(BOOL)arg1;
- (id)unreadDNDImage;
- (id)unreadImage;
- (double)updateTranscriptInsetsAnimationDuration;
- (bool)useSingleLineForContactVCardNames;
- (bool)usesCustomSplitViewMasterColumnWidth;
- (bool)usesDataDetectorsUI;
- (bool)usesEntryView;
- (bool)usesJoystick;
- (bool)usesNavigationBarControls;
- (bool)usesPersistentConversationSelection;
- (bool)usesPopovers;
- (bool)usesUncollapsedSplitview;
- (id)waveformColorForColorType:(BOOL)arg1;
- (id)waveformDisabledColor;
- (unsigned long long)waveformGapWidth;
- (double)waveformHeight;
- (unsigned long long)waveformMaxPowerLevelsCount;
- (double)waveformMaxWidth;
- (double)waveformMaxWidthDuration;
- (double)waveformMinDbPowerLevel;
- (double)waveformMinLinearPowerLevel;
- (unsigned long long)waveformMinPowerLevelsCount;
- (unsigned long long)waveformPowerLevelWidth;
- (unsigned long long)waveformPowerLevelWidthIncrement;
- (id)waveformUnplayedColor;
- (id)whiteChevronImage;

@end
