/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoMediaRemote.framework/NanoMediaRemote
 */

@interface _NMRCommandInfoProtobuf : PBCodable <NSCopying> {
    bool _active;
    int _command;
    bool _enabled;
    struct { 
        unsigned int command : 1; 
        unsigned int maximumRating : 1; 
        unsigned int minimumRating : 1; 
        unsigned int presentationStyle : 1; 
        unsigned int repeatMode : 1; 
        unsigned int shuffleMode : 1; 
        unsigned int active : 1; 
        unsigned int enabled : 1; 
    } _has;
    NSString *_localizedShortTitle;
    NSString *_localizedTitle;
    float _maximumRating;
    float _minimumRating;
    struct { 
        double *list; 
        unsigned long long count; 
        unsigned long long size; 
    } _preferredIntervals;
    int _presentationStyle;
    int _repeatMode;
    int _shuffleMode;
    struct { 
        float *list; 
        unsigned long long count; 
        unsigned long long size; 
    } _supportedRates;
}

@property(assign,readwrite) bool active;
@property(assign,readwrite) int command;
@property(assign,readwrite) bool enabled;
@property(assign,readwrite) bool hasActive;
@property(assign,readwrite) bool hasCommand;
@property(assign,readwrite) bool hasEnabled;
@property(assign,readonly) bool hasLocalizedShortTitle;
@property(assign,readonly) bool hasLocalizedTitle;
@property(assign,readwrite) bool hasMaximumRating;
@property(assign,readwrite) bool hasMinimumRating;
@property(assign,readwrite) bool hasPresentationStyle;
@property(assign,readwrite) bool hasRepeatMode;
@property(assign,readwrite) bool hasShuffleMode;
@property(assign,retain) NSString * localizedShortTitle;
@property(assign,retain) NSString * localizedTitle;
@property(assign,readwrite) float maximumRating;
@property(assign,readwrite) float minimumRating;
@property(assign,readonly) double* preferredIntervals;
@property(assign,readonly) unsigned long long preferredIntervalsCount;
@property(assign,readwrite) int presentationStyle;
@property(assign,readwrite) int repeatMode;
@property(assign,readwrite) int shuffleMode;
@property(assign,readonly) float* supportedRates;
@property(assign,readonly) unsigned long long supportedRatesCount;

- (void).cxx_destruct;
- (bool)active;
- (void)addPreferredInterval:(double)arg1;
- (void)addSupportedRate:(float)arg1;
- (void)clearPreferredIntervals;
- (void)clearSupportedRates;
- (int)command;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (bool)enabled;
- (bool)hasActive;
- (bool)hasCommand;
- (bool)hasEnabled;
- (bool)hasLocalizedShortTitle;
- (bool)hasLocalizedTitle;
- (bool)hasMaximumRating;
- (bool)hasMinimumRating;
- (bool)hasPresentationStyle;
- (bool)hasRepeatMode;
- (bool)hasShuffleMode;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (id)localizedShortTitle;
- (id)localizedTitle;
- (float)maximumRating;
- (void)mergeFrom:(id)arg1;
- (float)minimumRating;
- (double)preferredIntervalAtIndex:(unsigned long long)arg1;
- (double*)preferredIntervals;
- (unsigned long long)preferredIntervalsCount;
- (int)presentationStyle;
- (bool)readFrom:(id)arg1;
- (int)repeatMode;
- (void)setActive:(bool)arg1;
- (void)setCommand:(int)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setHasActive:(bool)arg1;
- (void)setHasCommand:(bool)arg1;
- (void)setHasEnabled:(bool)arg1;
- (void)setHasMaximumRating:(bool)arg1;
- (void)setHasMinimumRating:(bool)arg1;
- (void)setHasPresentationStyle:(bool)arg1;
- (void)setHasRepeatMode:(bool)arg1;
- (void)setHasShuffleMode:(bool)arg1;
- (void)setLocalizedShortTitle:(id)arg1;
- (void)setLocalizedTitle:(id)arg1;
- (void)setMaximumRating:(float)arg1;
- (void)setMinimumRating:(float)arg1;
- (void)setPreferredIntervals:(double*)arg1 count:(unsigned long long)arg2;
- (void)setPresentationStyle:(int)arg1;
- (void)setRepeatMode:(int)arg1;
- (void)setShuffleMode:(int)arg1;
- (void)setSupportedRates:(float*)arg1 count:(unsigned long long)arg2;
- (int)shuffleMode;
- (float)supportedRateAtIndex:(unsigned long long)arg1;
- (float*)supportedRates;
- (unsigned long long)supportedRatesCount;
- (void)writeTo:(id)arg1;

@end
