/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MediaPlayerUI.framework/MediaPlayerUI
 */

@interface MPUSlantedTextPlaceholderArtworkView : UIImageView {
    NSObject<OS_dispatch_queue> *_accessQueue;
    bool _drawsArtworkAsynchronously;
    UIColor *_externalBackgroundColor;
    long long _externalContentMode;
    UIImage *_externalImage;
    bool _hasValidEffectiveImage;
    bool _hasValidPlaceholderImage;
    bool _hasValidPlaceholderTextAttributes;
    UIColor *_placeholderBackgroundColor;
    long long _placeholderContentMode;
    NSObject<OS_dispatch_queue> *_placeholderCreationQueue;
    UIImage *_placeholderImage;
    struct CGSize { 
        double width; 
        double height; 
    } _placeholderSize;
    UIColor *_placeholderStrokeColor;
    double _placeholderStrokeLineWidth;
    long long _placeholderStyle;
    NSString *_placeholderSubtitle;
    NSMutableDictionary *_placeholderSubtitleTextAttributes;
    NSString *_placeholderTitle;
    NSMutableDictionary *_placeholderTitleTextAttributes;
    unsigned long long _placeholderVersion;
}

@property(getter=isDisplayingPlaceholder,assign,readonly) bool displayingPlaceholder;
@property(assign,readwrite) bool drawsArtworkAsynchronously;
@property(assign,retain) UIColor * placeholderBackgroundColor;
@property(assign,readwrite) long long placeholderContentMode;
@property(assign,retain) UIImage * placeholderImage;
@property(assign,readwrite) struct CGSize { double x1; double x2; } placeholderSize;
@property(assign,retain) UIColor * placeholderStrokeColor;
@property(assign,readwrite) double placeholderStrokeLineWidth;
@property(assign,readwrite) long long placeholderStyle;
@property(assign,copy) NSString * placeholderSubtitle;
@property(assign,copy) NSString * placeholderTitle;

- (void).cxx_destruct;
- (void)_drawPlaceholderWithBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 displayScale:(double)arg2;
- (void)_invalidateEffectiveImage;
- (void)_invalidateForChangedPlaceholderProperties;
- (void)_invalidatePlaceholderTextAttributes;
- (void)_updateEffectiveImage;
- (void)_updatePlaceholderImage;
- (void)_updatePlaceholderTextAttributes;
- (bool)drawsArtworkAsynchronously;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithImage:(id)arg1;
- (id)initWithImage:(id)arg1 highlightedImage:(id)arg2;
- (bool)isDisplayingPlaceholder;
- (void)layoutSubviews;
- (id)placeholderBackgroundColor;
- (long long)placeholderContentMode;
- (id)placeholderImage;
- (struct CGSize { double x1; double x2; })placeholderSize;
- (id)placeholderStrokeColor;
- (double)placeholderStrokeLineWidth;
- (long long)placeholderStyle;
- (id)placeholderSubtitle;
- (id)placeholderTitle;
- (void)setBackgroundColor:(id)arg1;
- (void)setContentMode:(long long)arg1;
- (void)setDrawsArtworkAsynchronously:(bool)arg1;
- (void)setImage:(id)arg1;
- (void)setPlaceholderBackgroundColor:(id)arg1;
- (void)setPlaceholderContentMode:(long long)arg1;
- (void)setPlaceholderImage:(id)arg1;
- (void)setPlaceholderSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setPlaceholderStrokeColor:(id)arg1;
- (void)setPlaceholderStrokeLineWidth:(double)arg1;
- (void)setPlaceholderStyle:(long long)arg1;
- (void)setPlaceholderSubtitle:(id)arg1;
- (void)setPlaceholderTitle:(id)arg1;

@end
