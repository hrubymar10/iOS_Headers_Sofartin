/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoAudioControl.framework/NanoAudioControl
 */

@interface NACVolumeControllerProxy : NSObject <NACVolumeController> {
    float _EUVolumeLimit;
    NSString *_category;
    <NACVolumeControllerDelegate> *_delegate;
    float _hapticIntensity;
    NACEventThrottler *_hapticThrottler;
    bool _isObserving;
    float _lastReceivedVolumeValue;
    float _lastRecievedHapticIntensity;
    bool _muted;
    NSObject<OS_dispatch_source> *_setHapticTimer;
    NSObject<OS_dispatch_source> *_setVolumeTimer;
    bool _systemMuted;
    bool _volumeControlAvailable;
    NACEventThrottler *_volumeThrottler;
    float _volumeValue;
    bool _volumeWarningEnabled;
    NACXPCClient *_xpcClient;
}

@property(assign,readonly) float EUVolumeLimit;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <NACVolumeControllerDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,readwrite) float hapticIntensity;
@property(assign,readonly) unsigned long long hash;
@property(getter=isMuted,assign,readonly) bool muted;
@property(assign,readonly) Class superclass;
@property(getter=isSystemMuted,assign,readwrite) bool systemMuted;
@property(getter=isVolumeControlAvailable,assign,readonly) bool volumeControlAvailable;
@property(assign,readonly) float volumeValue;
@property(getter=isVolumeWarningEnabled,assign,readonly) bool volumeWarningEnabled;

- (void).cxx_destruct;
- (float)EUVolumeLimit;
- (void)_EUVolumeLimitDidChange;
- (void)_applicationDidBecomeActiveNotification:(id)arg1;
- (void)_applicationWillResignActiveNotification:(id)arg1;
- (void)_cancelSetHapticTimer;
- (void)_cancelSetVolumeTimer;
- (void)_hapticIntensityDidChange;
- (void)_hapticTimeout;
- (void)_mutedStateDidChange;
- (void)_notifyDelegateHapticChanged;
- (void)_notifyDelegateSystemMutedStateChanged;
- (void)_notifyDelegateVolumeChanged;
- (id)_scheduleTimeoutWithBlock:(id)arg1;
- (void)_setHapticIntensity:(id)arg1;
- (void)_setVolumeValue:(id)arg1;
- (void)_systemMutedStateDidChange;
- (void)_volumeControlAvailabilityDidChange;
- (void)_volumeTimout;
- (void)_volumeValueDidChange;
- (void)_volumeWarningDidChange;
- (void)beginObservingVolume;
- (void)dealloc;
- (id)delegate;
- (void)endObservingVolume;
- (float)hapticIntensity;
- (id)init;
- (id)initWithAudioCategory:(id)arg1;
- (bool)isMuted;
- (bool)isSystemMuted;
- (bool)isVolumeControlAvailable;
- (bool)isVolumeWarningEnabled;
- (void)setDelegate:(id)arg1;
- (void)setHapticIntensity:(float)arg1;
- (void)setMuted:(bool)arg1;
- (void)setSystemMuted:(bool)arg1;
- (void)setVolumeValue:(float)arg1;
- (void)setVolumeValue:(float)arg1 muted:(bool)arg2 overrideEULimit:(bool)arg3;
- (float)volumeValue;

@end
