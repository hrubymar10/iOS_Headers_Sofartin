/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpringBoardUIServices.framework/SpringBoardUIServices
 */

@interface SBSUIWallpaperPreviewViewController : UIViewController <SBFLegibilitySettingsProvider, SBFWallpaperViewLegibilityObserver> {
    bool _allowScrolling;
    bool _colorSamplingEnabled;
    SBFLockScreenSimpleDateFormatter *_dateFormatter;
    NSTimer *_dateTimer;
    <SBFLegibilitySettingsProviderDelegate> *_delegate;
    bool _motionEnabled;
    NSString *_name;
    NSDictionary *_proceduralWallpaper;
    NSDictionary *_proceduralWallpaperOptions;
    long long _variant;
    UIImage *_wallpaperImage;
}

@property(assign,readwrite) bool colorSamplingEnabled;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <SBFLegibilitySettingsProviderDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,readonly) unsigned long long hash;
@property(assign,retain) _UILegibilitySettings * legibilitySettings;
@property(assign,readwrite) bool motionEnabled;
@property(assign,readonly) Class superclass;
@property(assign,readonly) UIImage * wallpaperImage;

- (id)_backdropWallpaperView;
- (id)_dateView;
- (double)_parallaxFactor;
- (id)_previewView;
- (id)_proceduralWallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 variant:(long long)arg2;
- (void)_startDateTimer;
- (void)_stopDateTimer;
- (void)_updateDateView;
- (id)_wallpaperView;
- (id)_wallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_wallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 image:(id)arg2 supportsCropping:(bool)arg3 variant:(long long)arg4;
- (id)_wallpaperViewWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 variant:(long long)arg2 options:(id)arg3;
- (bool)colorSamplingEnabled;
- (void)dealloc;
- (id)delegate;
- (id)initWithColorSamplingEnabled:(bool)arg1;
- (id)initWithImage:(id)arg1;
- (id)initWithImage:(id)arg1 name:(id)arg2;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (id)initWithProceduralWallpaper:(id)arg1 options:(id)arg2;
- (id)initWithScrollableImage:(id)arg1;
- (id)initWithWallpaperVariant:(long long)arg1;
- (id)legibilitySettings;
- (void)loadView;
- (bool)motionEnabled;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)setColorSamplingEnabled:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setMotionEnabled:(bool)arg1;
- (void)setWallpaperForLocations:(long long)arg1;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (id)wallpaperImage;
- (void)wallpaperView:(id)arg1 legibilitySettingsDidChange:(id)arg2;

@end
