/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TNPageController : NSObject {
    TNPrintProperties *_printProperties;
    NSMutableDictionary *mCachedAutoFitContentScaleDictionary;
    long long mCachedPageCountDuringDynamicContentScaleChange;
    bool mComputingPageCounts;
    NSObject<TNPageControllerDelegate> *mDelegate;
    TNDocumentRoot *mDocumentRoot;
    TNPageCoordinateDictionary *mFooterLayerCache;
    double mFooterTextHeight;
    TNPageCoordinateDictionary *mHeaderLayerCache;
    double mHeaderTextHeight;
    TSUPointerKeyDictionary *mHintCacheDictionary;
    bool mInDynamicContentScaleChange;
    struct { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    } mMaxPageCoordinate;
    bool mMaxPageCoordinateValid;
    bool mPageCountsValid;
    TNPageCoordinateDictionary *mPageLayoutCache;
    long long mPriorPageCount;
    TNSheet *mSheet;
    TSUPointerKeyDictionary *mSheetPageCountCache;
    long long mSubsequentPageCount;
    double mUserViewScale;
}

@property(assign,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } contentFrame;
@property(assign,readonly) double contentScale;
@property(assign,readwrite) NSObject<TNPageControllerDelegate> * delegate;
@property(assign,readwrite) TNDocumentRoot * documentRoot;
@property(assign,readwrite) double footerTextHeight;
@property(assign,readwrite) double headerTextHeight;
@property(assign,readonly) bool inDynamicContentScaleChange;
@property(assign,readonly) unsigned long long numPages;
@property(assign,readonly) struct CGSize { double x1; double x2; } pageSize;
@property(assign,readonly) struct CGSize { double x1; double x2; } pageSizeWithGutter;
@property(getter=isPortrait,assign,readonly) bool portrait;
@property(assign,readonly) TNPrintProperties * printProperties;
@property(assign,readwrite) TNSheet * sheet;
@property(assign,readwrite) double userViewScale;

+ (double)autoFitContentScaleForSheet:(id)arg1;
+ (id)p_cachedAutoFitContentScaleDictionary;
+ (double)p_contentScaleAutoFitForSheet:(id)arg1;

- (id).cxx_construct;
- (void)canvasViewScaleDidChange:(double)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrame;
- (double)contentScale;
- (struct CGSize { double x1; double x2; })contentSizeForCanvasLayer;
- (void)dealloc;
- (id)delegate;
- (id)documentRoot;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstPartitionFrameForInfo:(id)arg1 outStartPageCoordinate:(out struct { unsigned short x1; unsigned char x2; unsigned char x3; }*)arg2;
- (double)footerTextHeight;
- (double)headerTextHeight;
- (void)i_invalidateHintCache;
- (void)i_invalidatePageLayoutCache;
- (id)i_layerForHeaderType:(int)arg1 fragment:(int)arg2 atPageCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg3;
- (void)i_setLayer:(id)arg1 forHeaderType:(int)arg2 fragment:(int)arg3 atPageCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg4;
- (bool)inDynamicContentScaleChange;
- (id)initWithDocumentRoot:(id)arg1;
- (void)invalidateCachedAutoFitContentScaleForSheet:(id)arg1;
- (void)invalidateDrawableLayouts;
- (void)invalidatePageLayout;
- (void)invalidatePageLayoutGeometries;
- (bool)isPagePlaceholderAtPageCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)isPortrait;
- (void)layoutAtPageIndex:(unsigned long long)arg1 forLayoutController:(id)arg2;
- (void)layoutInPageRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1 forLayoutController:(id)arg2;
- (unsigned long long)numPages;
- (void)p_clearHintCache;
- (void)p_computePriorPageCountForCurrentSheet;
- (void)p_computeSubsequentPageCountForCurrentSheet;
- (void)p_didEndDynamicContentScaleChange:(id)arg1;
- (void)p_enumerateOverPageRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1 usingBlock:(id)arg2;
- (bool)p_headersOrFootersContainPageNumberRelatedAttachments;
- (id)p_hintCacheForInfo:(id)arg1;
- (void)p_invalidatePageCounts;
- (id)p_layoutForInfo:(id)arg1 atCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2 parentLayout:(id)arg3;
- (void)p_layoutInfo:(id)arg1 intoPageLayout:(id)arg2 atPageCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg3;
- (void)p_layoutInfo:(id)arg1 intoPageRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg2;
- (void)p_measureHeadersAndFooters;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })p_pageCoordinateForPageLayoutAtDevicePoint:(struct CGPoint { double x1; double x2; })arg1;
- (long long)p_pageCountForSheet:(id)arg1;
- (id)p_pageInfoForPageAtIndex:(unsigned long long)arg1;
- (id)p_pageLayoutAtCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (double)p_printViewDefaultUserViewScale;
- (long long)p_priorPageCount;
- (long long)p_updateCachedPageCountForCurrentSheet;
- (void)p_updateVisiblePageRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1 forLayoutController:(id)arg2;
- (void)p_willBeginDynamicContentScaleChange:(id)arg1;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })pageCoordinateForDrawableAtUnscaledPoint:(struct CGPoint { double x1; double x2; })arg1;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })pageCoordinateForMaxVisiblePage;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })pageCoordinateForPageIndex:(unsigned long long)arg1;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })pageCoordinateForPageLayoutAtUnscaledPoint:(struct CGPoint { double x1; double x2; })arg1;
- (unsigned long long)pageCount;
- (id)pageInfoForPageIndex:(unsigned long long)arg1;
- (id)pageLayoutGeometryForPageCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (id)pageLayoutGeometryForPrintingAtPageCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (unsigned long long)pageNumberForPageCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeForContent;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeForContentWithUpperBound:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeForInfo:(id)arg1 upperBound:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeForPageIndex:(unsigned long long)arg1;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })pageRangeWithPlaceholdersWithUpperBound:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (struct CGSize { double x1; double x2; })pageSize;
- (struct CGSize { double x1; double x2; })pageSizeWithGutter;
- (id)printProperties;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })printingLayoutRectForPageIndex:(unsigned long long)arg1;
- (void)registerPageLayout:(id)arg1 atPageCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (void)removeLayoutsFromPages;
- (void)setDelegate:(id)arg1;
- (void)setDocumentRoot:(id)arg1;
- (void)setFooterTextHeight:(double)arg1;
- (void)setHeaderTextHeight:(double)arg1;
- (void)setSheet:(id)arg1;
- (void)setUserViewScale:(double)arg1;
- (id)sheet;
- (void)syncPositionOfLayout:(id)arg1 atCoordinate:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg2;
- (void)updateContentScale;
- (void)updatePrintMargins;
- (void)updateUserViewScale;
- (void)updateViewScale;
- (double)userViewScale;
- (void)willExitPrintView;

@end
