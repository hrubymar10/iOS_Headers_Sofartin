/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSDBezierSubpath : NSObject {
    bool mClosed;
    NSMutableArray *mNodes;
}

@property(assign,readonly) bool allNodesSelected;
@property(assign,readonly) TSUBezierPath * bezierPath;
@property(assign,readonly) bool canDeleteSelectedNodes;
@property(assign,readonly) bool closeIfEndpointsAreEqual;
@property(getter=isClosed,assign,readwrite) bool closed;
@property(assign,readonly) TSDBezierNode * firstNode;
@property(assign,readonly) bool hasSelectedNode;
@property(assign,readonly) bool isRectangular;
@property(assign,readonly) TSDBezierNode * lastNode;
@property(assign,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } nodeBounds;
@property(assign,retain) NSMutableArray * nodes;

- (void)addNode:(id)arg1;
- (void)addNodesToArray:(id)arg1;
- (void)addTemporarySmoothNodes;
- (bool)allNodesSelected;
- (void)appendToBezierPath:(id)arg1;
- (void)appendToBezierPath:(id)arg1 selectedNodesOnly:(bool)arg2 fromIndex:(unsigned long long)arg3;
- (id)bezierNodeUnderPoint:(struct CGPoint { double x1; double x2; })arg1 withTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2 andTolerance:(double)arg3 returningType:(long long*)arg4;
- (id)bezierPath;
- (struct CGPoint { double x1; double x2; })calculateNewControlFromOriginalDelta:(struct CGPoint { double x1; double x2; })arg1 currentDelta:(struct CGPoint { double x1; double x2; })arg2 originalSmoothDelta:(struct CGPoint { double x1; double x2; })arg3 node:(struct CGPoint { double x1; double x2; })arg4;
- (bool)canDeleteSelectedNodes;
- (bool)closeIfEndpointsAreEqual;
- (void)convertToHobby;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (void)deleteSelectedNodes;
- (id)description;
- (void)deselectAllNodes;
- (double)distanceToPoint:(struct CGPoint { double x1; double x2; })arg1 elementIndex:(unsigned long long*)arg2 tValue:(double*)arg3 threshold:(double)arg4;
- (id)firstNode;
- (bool)hasSelectedNode;
- (id)init;
- (bool)isCircular;
- (bool)isClosed;
- (bool)isRectangular;
- (id)lastNode;
- (void)morphWithMorphInfo:(id)arg1;
- (id)nodeAfterNode:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })nodeBounds;
- (id)nodePriorToNode:(id)arg1;
- (id)nodes;
- (void)offsetSelectedEdgesByDelta:(struct CGPoint { double x1; double x2; })arg1;
- (void)offsetSelectedNodesByDelta:(struct CGPoint { double x1; double x2; })arg1;
- (void)removeLastNode;
- (void)removeNode:(id)arg1;
- (void)removeTemporaryNodes;
- (void)reverseDirection;
- (void)selectAllNodes;
- (void)setClosed:(bool)arg1;
- (void)setNodes:(id)arg1;
- (void)sharpenAllNodes;
- (void)smoothAllNodes;
- (void)smoothNode:(id)arg1;
- (id)splitEdgeAtIndex:(unsigned long long)arg1 atPercentage:(double)arg2;
- (void)transformUsingAffineTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)updateReflectedState;
- (void)updateSmoothNodes;
- (void)updateSmoothNodes:(id)arg1 addTemporaryNodes:(bool)arg2;
- (long long)updateSmoothNodes:(id)arg1 from:(long long)arg2 to:(long long)arg3 closed:(bool)arg4 addTemporaryNodes:(bool)arg5;

@end
