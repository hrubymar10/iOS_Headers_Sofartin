/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
 */

@interface CMMotionManagerInternal : NSObject {
    struct Dispatcher { int (**x1)(); id x2; } *fAccelerometerDispatcher;
    id fAccelerometerHandler;
    NSOperationQueue *fAccelerometerQueue;
    double fAccelerometerUpdateInterval;
    struct Dispatcher { int (**x1)(); id x2; } *fAmbientPressureDispatcher;
    id fAmbientPressureHandler;
    NSOperationQueue *fAmbientPressureQueue;
    double fAmbientPressureUpdateInterval;
    unsigned long long fAttitudeReferenceFrame;
    bool fCompassCalibrationHud;
    struct CLConnectionClient { struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_1_1_1; } x1; id x2; id x3; id x4; struct CLConnection {} *x5; struct CLNameValuePair { int (**x_6_1_1)(); struct __CFDictionary {} *x_6_1_2; } x6; struct CLNameValuePair { int (**x_7_1_1)(); struct __CFDictionary {} *x_7_1_2; } x7; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > { struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > { struct __rep { union { struct __long { char *x_1_5_1; unsigned long long x_1_5_2; unsigned long long x_1_5_3; } x_1_4_1; struct __short { BOOL x_2_5_1[23]; struct { unsigned char x_2_6_1; } x_2_5_2; } x_1_4_2; struct __raw { unsigned long long x_3_5_1[3]; } x_1_4_3; } x_1_3_1; } x_1_2_1; } x_8_1_1; } x8; id x9; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x10; id x11; void*x12; id x13; id x14; void*x15; id x16; void*x17; } *fConnection;
    NSObject<OS_dispatch_queue> *fConnectionQueue;
    struct Dispatcher { int (**x1)(); id x2; } *fDeviceMotionDispatcher;
    id fDeviceMotionHandler;
    NSOperationQueue *fDeviceMotionQueue;
    double fDeviceMotionStartTimestamp;
    double fDeviceMotionUpdateInterval;
    struct { 
        double x; 
        double y; 
        double z; 
        double magnitude; 
        double horizontal; 
        double declination; 
        double inclination; 
        double timestamp; 
    } fGeomagneticModel;
    struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > { 
        struct __compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > { 
            struct Client {} *__first_; 
        } __ptr_; 
    } fGeomagneticModelProviderClient;
    struct Dispatcher { int (**x1)(); id x2; } *fGyroDispatcher;
    id fGyroHandler;
    NSOperationQueue *fGyroQueue;
    double fGyroUpdateInterval;
    bool fHaveSentDeviceRequiresMovementError;
    bool fHaveSentTrueNorthUnavailableError;
    bool fInactive;
    double fLastAccelerometerNotificationTimestamp;
    double fLastAmbientPressureNotificationTimestamp;
    double fLastDeviceMotionNotificationTimestamp;
    double fLastGyroNotificationTimestamp;
    double fLastMagnetometerNotificationTimestamp;
    struct Sample { 
        double timestamp; 
        struct { 
            float x; 
            float y; 
            float z; 
        } acceleration; 
    } fLatestAccelerometerSample;
    struct Sample { 
        double timestamp; 
        struct { 
            float pressure; 
            float temperature; 
        } pressureData; 
    } fLatestAmbientPressureSample;
    struct Sample { 
        double timestamp; 
        struct { 
            struct { 
                double w; 
                double x; 
                double y; 
                double z; 
            } quaternion; 
            struct { 
                float x; 
                float y; 
                float z; 
            } userAcceleration; 
            struct { 
                float x; 
                float y; 
                float z; 
            } rotationRate; 
            struct { 
                float x; 
                float y; 
                float z; 
            } magneticField; 
            int magneticFieldCalibrationLevel; 
            bool doingYawCorrection; 
            bool doingBiasEstimation; 
            bool isInitialized; 
        } deviceMotion; 
        bool fsync; 
    } fLatestDeviceMotionSample;
    struct Sample { 
        double timestamp; 
        struct { 
            float x; 
            float y; 
            float z; 
        } rotationRate; 
        unsigned short sampleNum; 
        bool fsync; 
    } fLatestGyroSample;
    struct Sample { 
        double timestamp; 
        struct { 
            float x; 
            float y; 
            float z; 
        } magneticField; 
    } fLatestMagnetometerSample;
    struct Dispatcher { int (**x1)(); id x2; } *fMagnetometerDispatcher;
    id fMagnetometerHandler;
    NSOperationQueue *fMagnetometerQueue;
    double fMagnetometerUpdateInterval;
    int (*fPrivateAccelerometerDataCallback;
    void *fPrivateAccelerometerDataCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } *fPrivateAccelerometerDataDispatcher;
    struct Dispatcher { int (**x1)(); id x2; } *fPrivateDeviceMotionAlgorithmDidResetDispatcher;
    int (*fPrivateDeviceMotionCallback;
    void *fPrivateDeviceMotionCallbackInfo;
    int (*fPrivateDeviceMotionCompassAlignmentCallback;
    void *fPrivateDeviceMotionCompassAlignmentCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } *fPrivateDeviceMotionCompassAlignmentDispatcher;
    int (*fPrivateDeviceMotionCompassDataCallback;
    void *fPrivateDeviceMotionCompassDataCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } *fPrivateDeviceMotionCompassDataDispatcher;
    struct Dispatcher { int (**x1)(); id x2; } *fPrivateDeviceMotionDispatcher;
    struct Dispatcher { int (**x1)(); id x2; } *fPrivateDeviceMotionSensorStatusDispatcher;
    bool fPrivateDeviceMotionUse9Axis;
    int (*fPrivateGyroBiasAndVarianceCallback;
    void *fPrivateGyroBiasAndVarianceCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } *fPrivateGyroBiasAndVarianceDispatcher;
    int (*fPrivateGyroDataCallback;
    void *fPrivateGyroDataCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } *fPrivateGyroDataDispatcher;
    int (*fPrivateMagnetometerDataCallback;
    void *fPrivateMagnetometerDataCallbackInfo;
    struct Dispatcher { int (**x1)(); id x2; } *fPrivateMagnetometerDataDispatcher;
    int (*fPrivateNotificationCallback;
    void *fPrivateNotificationCallbackInfo;
    bool fPrivateUseAccelerometer;
    bool fPrivateWantsPowerConservativeDeviceMotion;
    int fSampleLock;
    bool fShowCompassCalibrationHudOnResume;
    bool fShowsDeviceMovementDisplay;
    bool fSidebandSensorFusionEnabled;
    bool fSidebandSensorFusionLatency;
    bool fSidebandSensorFusionSnoop;
    struct unique_ptr<CLIspDataVisitor, std::__1::default_delete<CLIspDataVisitor> > { 
        struct __compressed_pair<CLIspDataVisitor *, std::__1::default_delete<CLIspDataVisitor> > { 
            struct CLIspDataVisitor {} *__first_; 
        } __ptr_; 
    } fSidebandVisitor;
    struct __CFRunLoopTimer { } *fWatchdogTimer;
}

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)dealloc;
- (id)init;
- (void)teardownPrivate;

@end
