/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/CoreFoundation.framework/CoreFoundation
 */

@interface NSDate : NSObject <CKRecordValue, NSCopying, NSSecureCoding, PQLValuable, PQLValuable, TSCHChartGridValue>

@property(assign,readonly) int chartGridValueType;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,copy) NSString * description;
@property(assign,copy) NSString * description;
@property(assign,copy) NSString * description;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) Class superclass;
@property(assign,readonly) Class superclass;
@property(assign,readonly) Class superclass;
@property(assign,readonly) Class superclass;
@property(assign,readonly) double timeIntervalSinceReferenceDate;

+ (id)CalDateForBeginningOfToday;
+ (id)CalDateForBeginningOfTomorrow;
+ (id)CalDateForEndOfToday;
+ (id)CalDateForEndOfTomorrow;
+ (id)CalDateForNow;
+ (id)_geo_calendar;
+ (id)_gkDateFromScalarServerTimestamp:(unsigned long long)arg1;
+ (id)_gkDateFromServerTimestamp:(id)arg1;
+ (id)_gkServerTimestamp;
+ (id)_nowComponents;
+ (id)_todayComponents;
+ (id)_tomorrowComponents;
+ (id)allocWithZone:(struct _NSZone { }*)arg1;
+ (id)bod;
+ (id)date;
+ (id)dateForDaysSince1970:(int)arg1;
+ (id)dateForDaysSince1970:(int)arg1;
+ (id)dateForTomorrow;
+ (id)dateForYesterday;
+ (bool)dateIsMidnightLocalTime:(id)arg1;
+ (id)dateWithDate:(id)arg1;
+ (id)dateWithDatePartFromDate:(id)arg1 timePartFromDate:(id)arg2 inCalendar:(id)arg3;
+ (id)dateWithDaysBeforeNow:(unsigned long long)arg1;
+ (id)dateWithDaysFromNow:(unsigned long long)arg1;
+ (id)dateWithNaturalLanguageString:(id)arg1;
+ (id)dateWithNaturalLanguageString:(id)arg1 date:(id)arg2 locale:(id)arg3;
+ (id)dateWithNaturalLanguageString:(id)arg1 locale:(id)arg2;
+ (id)dateWithString:(id)arg1;
+ (id)dateWithTimeInterval:(double)arg1 sinceDate:(id)arg2;
+ (id)dateWithTimeIntervalSince1970:(double)arg1;
+ (id)dateWithTimeIntervalSinceNow:(double)arg1;
+ (id)dateWithTimeIntervalSinceReferenceDate:(double)arg1;
+ (id)dateWithWordDate:(const struct WrdDateTime { int (**x1)(); int x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; }*)arg1;
+ (int)daysSince1970;
+ (int)daysSince1970;
+ (long long)daysSpannedFromStartDate:(id)arg1 toEndDate:(id)arg2 allDay:(bool)arg3 inCalendar:(id)arg4;
+ (id)defaultDateFormatter;
+ (id)distantFuture;
+ (id)distantPast;
+ (id)eod;
+ (id)filenameDateStringWithStartDate:(id)arg1 endDate:(id)arg2;
+ (id)geo_dateWithJulianDay:(double)arg1;
+ (id)mf_copyDateInCommonFormatsWithString:(id)arg1;
+ (id)mf_copyLenientDateInCommonFormatsWithString:(id)arg1;
+ (id)modificationDateForNoteBeingEdited;
+ (id)monotonicDate;
+ (id)monotonicDateWithTimeIntervalSinceNow:(double)arg1;
+ (id)nearestMidnightAfterDate:(id)arg1;
+ (id)nearestMidnightBeforeDate:(id)arg1;
+ (id)newFromSqliteValue:(struct Mem { }*)arg1;
+ (id)newFromSqliteValue:(struct Mem { }*)arg1;
+ (id)nextRoundedHour;
+ (bool)supportsSecureCoding;
+ (double)timeIntervalSinceReferenceDate;
+ (id)tsce_dateWithSerialNumber:(double)arg1 dateMode:(int)arg2;
+ (id)tsce_dateWithYear:(long long)arg1 month:(long long)arg2 day:(long long)arg3 hour:(long long)arg4 minute:(long long)arg5 second:(long long)arg6;

- (bool)CalIsAfterDate:(id)arg1;
- (bool)CalIsAfterOrSameAsDate:(id)arg1;
- (bool)CalIsBeforeDate:(id)arg1;
- (bool)CalIsBeforeOrSameAsDate:(id)arg1;
- (bool)CalIsBetweenStartDate:(id)arg1 endDate:(id)arg2;
- (id)__coreroutine_roundedUpDate;
- (bool)_afui_isSameDayAsDate:(id)arg1;
- (unsigned long long)_cfTypeID;
- (id)_gkFormatedWhenStringWithOptions:(unsigned long long)arg1;
- (id)_gkFormattedDateForStyle:(unsigned long long)arg1 relative:(bool)arg2;
- (id)_gkServerTimestamp;
- (id)_stringWithUseAbbreviatedFormats:(bool)arg1 lowerCase:(bool)arg2;
- (id)_web_RFC1123DateString;
- (long long)_web_compareDay:(id)arg1;
- (bool)_web_isToday;
- (id)addTimeInterval:(double)arg1;
- (bool)afui_isToday;
- (bool)afui_isTomorrow;
- (id)allComponentsInCalendar:(id)arg1;
- (int)chartGridValueType;
- (Class)classForCoder;
- (long long)compare:(id)arg1;
- (long long)compare:(id)arg1 toUnitGranularity:(unsigned long long)arg2;
- (long long)compareDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2;
- (id)convertFromBasebandToMonotonic;
- (id)convertFromMonotonicToBaseband;
- (id)convertFromMonotonicToSystem;
- (id)convertFromSystemToMonotonic;
- (void)copyToWordDate:(struct WrdDateTime { int (**x1)(); int x2; unsigned short x3; unsigned short x4; unsigned short x5; unsigned short x6; unsigned short x7; }*)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)copyXPCEncoding;
- (id)dateByAddingDays:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingHours:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingMinutes:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingMonths:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingTimeInterval:(double)arg1;
- (id)dateByAddingWeeks:(long long)arg1 inCalendar:(id)arg2;
- (id)dateByAddingYears:(long long)arg1 inCalendar:(id)arg2;
- (id)dateForDayInTimeZone:(id)arg1;
- (id)dateForDayInTimeZone:(id)arg1 fromTimeZone:(id)arg2;
- (id)dateForEndOfDayInTimeZone:(id)arg1;
- (id)dateForEndOfDayInTimeZone:(id)arg1 fromTimeZone:(id)arg2;
- (id)dateInTimeZone:(id)arg1 fromTimeZone:(id)arg2;
- (id)dateOnlyByTranslatingFrom:(id)arg1 toCalendar:(id)arg2;
- (id)dateOnlyComponentsInCalendar:(id)arg1;
- (id)dateRemovingTimeComponentsInCalendar:(id)arg1;
- (id)dateRoundedToHourOnSameDayInCalendar:(id)arg1;
- (id)dateRoundedToNearestFifteenMinutesInCalendar:(id)arg1;
- (id)dateRoundedToStartOfNextDayInCalendar:(id)arg1;
- (id)dateWithCalendarFormat:(id)arg1 timeZone:(id)arg2;
- (id)dateWithCeilingForAlignment:(double)arg1;
- (id)dateWithFloorForAlignment:(double)arg1;
- (long long)dayInCalendar:(id)arg1;
- (int)daysSince1970;
- (id)description;
- (id)descriptionWithCalendarFormat:(id)arg1 timeZone:(id)arg2 locale:(id)arg3;
- (id)descriptionWithLocale:(id)arg1;
- (double)doubleValue;
- (id)earlierDate:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (double)geo_hoursAndMinutes;
- (double)geo_julianDay;
- (double)geo_julianEphemerisDay;
- (unsigned long long)hash;
- (long long)hourInCalendar:(id)arg1;
- (id)initWithCPLArchiver:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithDate:(id)arg1;
- (id)initWithString:(id)arg1;
- (id)initWithTimeInterval:(double)arg1 sinceDate:(id)arg2;
- (id)initWithTimeIntervalSince1970:(double)arg1;
- (id)initWithTimeIntervalSinceNow:(double)arg1;
- (id)initWithTimeIntervalSinceReferenceDate:(double)arg1;
- (id)initWithXPCEncoding:(id)arg1;
- (bool)isAfterDate:(id)arg1;
- (bool)isAfterDate:(id)arg1;
- (bool)isAfterDate:(id)arg1;
- (bool)isAfterOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isBeforeDate:(id)arg1;
- (bool)isBeforeDate:(id)arg1;
- (bool)isBeforeDate:(id)arg1;
- (bool)isBeforeDayForDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isBeforeOrSameDayAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isDateEqualToDateIgnoringTime:(id)arg1;
- (bool)isEqual:(id)arg1;
- (bool)isEqual:(id)arg1 toUnitGranularity:(unsigned long long)arg2;
- (bool)isEqualToDate:(id)arg1;
- (bool)isEqualToDateIgnoringTimeComponents:(id)arg1 inCalendar:(id)arg2;
- (bool)isInMonotonicFuture;
- (bool)isInMonotonicFutureWithDistance:(double)arg1;
- (bool)isInMonotonicPastWithDistance:(double)arg1;
- (bool)isInSameDayAsDate:(id)arg1;
- (bool)isInToday;
- (bool)isInTomorrow;
- (bool)isInYesterday;
- (bool)isNSDate__;
- (bool)isSameDayAsDate:(id)arg1;
- (bool)isSameDayAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isSameMonthAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isSameYearAsDate:(id)arg1 inCalendar:(id)arg2;
- (bool)isToday;
- (bool)isTodayInCalendar:(id)arg1;
- (bool)isTomorrow;
- (bool)isWholeHour;
- (bool)isYesterday;
- (id)laterDate:(id)arg1;
- (id)localTimeDescription;
- (id)localizedDateStringWithTemplate:(id)arg1;
- (id)localizedMonthAndDayStringShortened:(bool)arg1;
- (id)localizedMonthAndYearStringShortened:(bool)arg1;
- (id)localizedMonthShortened:(bool)arg1;
- (id)localizedRelativeDateStringShortened:(bool)arg1;
- (id)localizedWeekNumber;
- (id)localizedWeekdayMonthDayStringShortened:(bool)arg1;
- (id)localizedWeekdayMonthDayYearStringShortened:(bool)arg1;
- (id)localizedWeekdayMonthYearStringShortened:(bool)arg1;
- (id)localizedYearMonthAndDayStringShortened:(bool)arg1;
- (id)mf_descriptionForMimeHeaders;
- (id)mf_replyPrefixForSender:(id)arg1;
- (long long)minuteInCalendar:(id)arg1;
- (void)ml_bindToSQLiteStatement:(struct sqlite3_stmt { }*)arg1 atPosition:(int)arg2;
- (id)ml_stringValueForSQL;
- (long long)monthInCalendar:(id)arg1;
- (id)plistArchiveWithCPLArchiver:(id)arg1;
- (void)printComparisonToDate:(id)arg1;
- (id)replacementObjectForPortCoder:(id)arg1;
- (id)roundSecondsDownInCalendar:(id)arg1;
- (id)roundToCurrentDayInCalendar:(id)arg1;
- (id)roundToCurrentMondayInCalendar:(id)arg1;
- (id)roundToCurrentMonthInCalendar:(id)arg1;
- (id)roundToCurrentWeekInCalendar:(id)arg1 withFirstWeekdayIndex:(long long)arg2;
- (id)roundToCurrentYearInCalendar:(id)arg1;
- (bool)safari_isInSameDayAsDate:(id)arg1;
- (bool)safari_isInToday;
- (bool)safari_isInclusivelyBetweenDate:(id)arg1 andDate:(id)arg2;
- (long long)safari_numberOfWeeksUntilDate:(id)arg1;
- (id)safari_startOfDay;
- (long long)secondInCalendar:(id)arg1;
- (void)sqliteBind:(struct sqlite3_stmt { }*)arg1 index:(int)arg2;
- (void)sqliteBind:(struct sqlite3_stmt { }*)arg1 index:(int)arg2;
- (double)timeIntervalSince1970;
- (double)timeIntervalSinceDate:(id)arg1;
- (double)timeIntervalSinceMonitonicNow;
- (double)timeIntervalSinceNow;
- (double)timeIntervalSinceReferenceDate;
- (id)timeOnlyComponentsInCalendar:(id)arg1;
- (id)timeStringAlwaysIncludeMinutes:(bool)arg1;
- (long long)tsce_day;
- (long long)tsce_hour;
- (double)tsce_mapToDouble;
- (long long)tsce_minute;
- (long long)tsce_month;
- (long long)tsce_second;
- (long long)tsce_weekday;
- (long long)tsce_year;
- (id)tsp_initWithMessage:(const struct Date { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; double x5; }*)arg1;
- (void)tsp_saveToMessage:(struct Date { int (**x1)(); struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_2_1_1; } x2; unsigned int x3[1]; int x4; double x5; }*)arg1;
- (long long)weekInCalendar:(id)arg1;
- (long long)weekdayInCalendar:(id)arg1;
- (long long)yearInCalendar:(id)arg1;

@end
