/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/GLKit.framework/GLKit
 */

@interface GLKViewController : UIViewController <GLKViewDelegate, NSCoding> {
    <GLKViewControllerDelegate> *_delegate;
    CADisplayLink *_displayLink;
    GLKDisplayLinkMessenger *_displayLinkMessenger;
    bool _displayLinkPaused;
    bool _firstResumeOccurred;
    long long _frameInterval;
    long long _framesDisplayed;
    long long _framesPerSecond;
    bool _lastDrawOccurred;
    bool _lastResumeOccurred;
    bool _lastUpdateOccurred;
    bool _pauseOnWillResignActive;
    long long _preferredFramesPerSecond;
    bool _resumeOnDidBecomeActive;
    UIScreen *_screen;
    long long _screenFramesPerSecond;
    double _timeSinceFirstResume;
    double _timeSinceFirstResumeStartTime;
    double _timeSinceLastDraw;
    double _timeSinceLastDrawPreviousTime;
    double _timeSinceLastResume;
    double _timeSinceLastResumeStartTime;
    double _timeSinceLastUpdate;
    double _timeSinceLastUpdatePreviousTime;
    int (*_updateIMP;
    bool _viewIsVisible;
}

@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <GLKViewControllerDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,retain) CADisplayLink * displayLink;
@property(assign,retain) GLKDisplayLinkMessenger * displayLinkMessenger;
@property(assign,readwrite) bool displayLinkPaused;
@property(assign,readwrite) bool firstResumeOccurred;
@property(assign,readwrite) long long frameInterval;
@property(assign,readonly) long long framesDisplayed;
@property(assign,readonly) long long framesPerSecond;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) bool lastDrawOccurred;
@property(assign,readwrite) bool lastResumeOccurred;
@property(assign,readwrite) bool lastUpdateOccurred;
@property(assign,readwrite) bool pauseOnWillResignActive;
@property(getter=isPaused,assign,readwrite) bool paused;
@property(assign,readwrite) long long preferredFramesPerSecond;
@property(assign,readwrite) bool resumeOnDidBecomeActive;
@property(assign,retain) UIScreen * screen;
@property(assign,readwrite) long long screenFramesPerSecond;
@property(assign,readonly) Class superclass;
@property(assign,readonly) double timeSinceFirstResume;
@property(assign,readwrite) double timeSinceFirstResumeStartTime;
@property(assign,readonly) double timeSinceLastDraw;
@property(assign,readwrite) double timeSinceLastDrawPreviousTime;
@property(assign,readonly) double timeSinceLastResume;
@property(assign,readwrite) double timeSinceLastResumeStartTime;
@property(assign,readonly) double timeSinceLastUpdate;
@property(assign,readwrite) double timeSinceLastUpdatePreviousTime;
@property(assign,readwrite) int (* updateIMP;
@property(assign,readwrite) bool viewIsVisible;

- (long long)_calculateScreenFramesPerSecond:(id)arg1;
- (void)_configureNotifications;
- (void)_createDisplayLinkForScreen:(id)arg1;
- (void)_initCommon;
- (void)_pauseByNotification;
- (void)_resumeByNotification;
- (void)_updateAndDraw;
- (void)_updateScreenIfChanged;
- (void)dealloc;
- (id)delegate;
- (id)displayLink;
- (id)displayLinkMessenger;
- (bool)displayLinkPaused;
- (void)encodeWithCoder:(id)arg1;
- (bool)firstResumeOccurred;
- (long long)frameInterval;
- (long long)framesDisplayed;
- (long long)framesPerSecond;
- (void)glkView:(id)arg1 drawInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (bool)isPaused;
- (bool)lastDrawOccurred;
- (bool)lastResumeOccurred;
- (bool)lastUpdateOccurred;
- (void)loadView;
- (bool)pauseOnWillResignActive;
- (long long)preferredFramesPerSecond;
- (bool)resumeOnDidBecomeActive;
- (id)screen;
- (long long)screenFramesPerSecond;
- (void)setDelegate:(id)arg1;
- (void)setDisplayLink:(id)arg1;
- (void)setDisplayLinkMessenger:(id)arg1;
- (void)setDisplayLinkPaused:(bool)arg1;
- (void)setFirstResumeOccurred:(bool)arg1;
- (void)setFrameInterval:(long long)arg1;
- (void)setLastDrawOccurred:(bool)arg1;
- (void)setLastResumeOccurred:(bool)arg1;
- (void)setLastUpdateOccurred:(bool)arg1;
- (void)setPauseOnWillResignActive:(bool)arg1;
- (void)setPaused:(bool)arg1;
- (void)setPreferredFramesPerSecond:(long long)arg1;
- (void)setResumeOnDidBecomeActive:(bool)arg1;
- (void)setScreen:(id)arg1;
- (void)setScreenFramesPerSecond:(long long)arg1;
- (void)setTimeSinceFirstResumeStartTime:(double)arg1;
- (void)setTimeSinceLastDrawPreviousTime:(double)arg1;
- (void)setTimeSinceLastResumeStartTime:(double)arg1;
- (void)setTimeSinceLastUpdatePreviousTime:(double)arg1;
- (void)setUpdateIMP:(int (*)arg1;
- (void)setView:(id)arg1;
- (void)setViewIsVisible:(bool)arg1;
- (double)timeSinceFirstResume;
- (double)timeSinceFirstResumeStartTime;
- (double)timeSinceLastDraw;
- (double)timeSinceLastDrawPreviousTime;
- (double)timeSinceLastResume;
- (double)timeSinceLastResumeStartTime;
- (double)timeSinceLastUpdate;
- (double)timeSinceLastUpdatePreviousTime;
- (int (*)updateIMP;
- (void)viewDidLoad;
- (void)viewDidMoveToWindow:(id)arg1 shouldAppearOrDisappear:(bool)arg2;
- (void)viewDidUnload;
- (bool)viewIsVisible;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;

@end
