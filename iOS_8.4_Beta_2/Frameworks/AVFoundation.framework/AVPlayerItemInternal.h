/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

@interface AVPlayerItemInternal : NSObject {
    unsigned int RTCReportingFlags;
    NSURL *URL;
    bool allowProgressiveSwitchUp;
    bool allowsExtendedReadAhead;
    AVAsset *asset;
    AVAsset *assetWithFigPlaybackItem;
    NSDictionary *audibleDRMInfo;
    AVAudioMix *audioMix;
    NSArray *automaticallyLoadedAssetKeys;
    NSArray *cachedTracks;
    AVWeakReference *clientsOriginalVideoComposition;
    AVCustomVideoCompositorSession *customVideoCompositorSession;
    NSString *dataYouTubeID;
    <AVPlayerItemDelegate> *delegate;
    bool didBecomeReadyForBasicInspection;
    bool didBecomeReadyForInspectionOfDuration;
    bool didBecomeReadyForInspectionOfMediaSelectionOptions;
    bool didBecomeReadyForInspectionOfPresentationSize;
    bool didBecomeReadyForInspectionOfTracks;
    bool didFireKVOForAssetForNonStreamingItem;
    bool didInformObserversAboutAvailabilityOfTracks;
    bool didSetAssetToAssetWithFigPlaybackItem;
    int eqPreset;
    NSError *error;
    bool externalProtectionRequested;
    bool externalSubtitlesEnabled;
    struct OpaqueFigCPEProtector { } *figCPEProtector;
    NSObject<OS_dispatch_queue> *figConfigurationQueue;
    struct OpaqueFigPlaybackItem { } *figPlaybackItem;
    struct OpaqueCMTimebase { } *figTimebase;
    void *figVideoCompositor;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } forwardPlaybackEndTime;
    NSDictionary *gaplessInfo;
    NSMutableArray *handlersToCallWhenReadyForEnqueueing;
    bool haveCPEProtector;
    bool haveInitialSamples;
    bool initialAlwaysMonitorsPlayability;
    bool initialContinuesPlayingDuringPrerollForRateChange;
    bool initialContinuesPlayingDuringPrerollForSeek;
    NSDate *initialDate;
    NSDate *initialEstimatedDate;
    struct __CFString { } *initialFigTimePitchAlgorithm;
    bool initialLimitReadAhead;
    long long initialPlaybackLikelyToKeepUpTrigger;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } initialTime;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } initialToleranceAfter;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } initialToleranceBefore;
    long long initialVariantIndex;
    bool initialWillNeverSeekBackwardsHint;
    bool isCurrentPlayerItem;
    NSMutableDictionary *itemLegibleOutputsForKeys;
    NSMutableDictionary *itemMetadataOutputsForKeys;
    NSArray *itemOutputs;
    NSMutableArray *itemVideoOutputs;
    NSObject<OS_dispatch_queue> *ivarAccessQueue;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } maximumTrailingBufferDuration;
    NSString *mediaKind;
    NSMutableDictionary *mediaOptionsSelectedByClient;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } minimumIntervalForIFrameOnlyPlayback;
    bool minimumIntervalForIFrameOnlyPlaybackWasSet;
    bool needTimedMetadataNotification;
    bool networkUsuallyExceedsMaxBitRate;
    AVPlayerItem *nextItem;
    unsigned int nextSeekIDToGenerate;
    bool nonForcedSubtitlesEnabled;
    int pendingSeekID;
    struct OpaqueVTPixelBufferAttributesMediator { } *pixelBufferAttributeMediator;
    AVPlayerConnection *playerConnection;
    AVWeakReference *playerReference;
    double preferredPeakBitRate;
    AVPlayerItem *previousItem;
    AVPropertyStorage *propertyStorage;
    struct OpaqueCMTimebase { } *proxyTimebase;
    NSDictionary *rampInOutInfo;
    bool requiresAccessLog;
    unsigned long long restrictions;
    struct { 
        long long value; 
        int timescale; 
        unsigned int flags; 
        long long epoch; 
    } reversePlaybackEndTime;
    bool savesDownloadedDataToDiskWhenDone;
    id seekCompletionHandler;
    struct OpaqueFigSimpleMutex { } *seekIDMutex;
    bool seekingWaitsForVideoCompositionRendering;
    NSString *serviceIdentifier;
    float soundCheckVolumeNormalization;
    float speedThresholdForIFrameOnlyPlayback;
    bool speedThresholdForIFrameOnlyPlaybackWasSet;
    NSObject<OS_dispatch_queue> *stateDispatchQueue;
    long long status;
    bool suppressesVideoLayers;
    NSMutableArray *syncLayers;
    NSArray *textStyleRules;
    NSArray *timedMetadata;
    NSArray *trackIDsForAssetWithFigPlaybackItem;
    bool usesIFrameOnlyPlaybackForHighRateScaledEdits;
    bool usesIFrameOnlyPlaybackForHighRateScaledEditsWasSet;
    AVVideoComposition *videoComposition;
    float volumeAdjustment;
    bool wasInitializedWithURL;
    AVWeakReference *weakReference;
}

@end
