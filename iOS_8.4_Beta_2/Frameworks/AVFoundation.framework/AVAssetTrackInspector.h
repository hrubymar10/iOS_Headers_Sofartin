/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFoundation.framework/AVFoundation
 */

@interface AVAssetTrackInspector : AVFigObjectInspector <AVAsynchronousKeyValueLoading> {
    NSArray *_cachedMediaCharacteristics;
    long long _synthesizeMediaCharacteristicsOnce;
    AVWeakReference *_weakReference;
}

@property(assign,readonly) long long alternateGroupID;
@property(assign,readonly) NSArray * availableMetadataFormats;
@property(assign,readonly) NSArray * commonMetadata;
@property(assign,readonly) struct CGSize { double x1; double x2; } dimensions;
@property(getter=isEnabled,assign,readonly) bool enabled;
@property(assign,readonly) float estimatedDataRate;
@property(getter=isExcludedFromAutoselectionInTrackGroup,assign,readonly) bool excludedFromAutoselectionInTrackGroup;
@property(assign,readonly) NSString * extendedLanguageTag;
@property(getter=_figAssetTrack,assign,readonly) struct OpaqueFigAssetTrack { }* figAssetTrack;
@property(getter=_figMediaType,assign,readonly) unsigned int figMediaType;
@property(getter=_figTrackReader,assign,readonly) struct OpaqueFigTrackReader { }* figTrackReader;
@property(assign,readonly) NSArray * formatDescriptions;
@property(assign,readonly) bool hasProtectedContent;
@property(assign,readonly) NSString * languageCode;
@property(assign,readonly) long long layer;
@property(assign,readonly) NSLocale * locale;
@property(assign,readonly) NSDictionary * loudnessInfo;
@property(assign,readonly) NSArray * mediaCharacteristics;
@property(assign,readonly) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } mediaDecodeTimeRange;
@property(assign,readonly) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } mediaPresentationTimeRange;
@property(assign,readonly) NSString * mediaType;
@property(assign,readonly) struct { long long x1; int x2; unsigned int x3; long long x4; } minSampleDuration;
@property(assign,readonly) struct CGSize { double x1; double x2; } naturalSize;
@property(assign,readonly) int naturalTimeScale;
@property(assign,readonly) float nominalFrameRate;
@property(assign,readonly) int playabilityValidationResult;
@property(getter=isPlayable,assign,readonly) bool playable;
@property(assign,readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } preferredTransform;
@property(assign,readonly) float preferredVolume;
@property(assign,readonly) bool requiresFrameReordering;
@property(assign,copy) NSArray * segments;
@property(getter=isSelfContained,assign,readonly) bool selfContained;
@property(assign,readonly) struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; } timeRange;
@property(assign,readonly) long long totalSampleDataLength;
@property(assign,readonly) int trackID;
@property(getter=_trackReferences,assign,readonly) NSDictionary * trackReferences;

+ (id)assetTrackInspectorWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;

- (struct OpaqueFigAssetTrack { }*)_figAssetTrack;
- (unsigned int)_figMediaType;
- (struct OpaqueFigTrackReader { }*)_figTrackReader;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2;
- (id)_initWithAsset:(id)arg1 trackID:(int)arg2 trackIndex:(long long)arg3;
- (id)_initWithAsset:(id)arg1 trackIndex:(long long)arg2;
- (id)_trackReferences;
- (id)_weakReference;
- (long long)alternateGroupID;
- (id)availableMetadataFormats;
- (id)commonMetadata;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (struct CGSize { double x1; double x2; })dimensions;
- (float)estimatedDataRate;
- (id)extendedLanguageTag;
- (id)formatDescriptions;
- (bool)hasProtectedContent;
- (id)init;
- (bool)isEnabled;
- (bool)isExcludedFromAutoselectionInTrackGroup;
- (bool)isPlayable;
- (bool)isSelfContained;
- (id)languageCode;
- (long long)layer;
- (void)loadValuesAsynchronouslyForKeys:(id)arg1 completionHandler:(id)arg2;
- (id)locale;
- (id)loudnessInfo;
- (id)mediaCharacteristics;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })mediaDecodeTimeRange;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })mediaPresentationTimeRange;
- (id)mediaType;
- (id)metadataForFormat:(id)arg1;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })minSampleDuration;
- (struct CGSize { double x1; double x2; })naturalSize;
- (int)naturalTimeScale;
- (float)nominalFrameRate;
- (int)playabilityValidationResult;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })preferredTransform;
- (float)preferredVolume;
- (bool)requiresFrameReordering;
- (struct { long long x1; int x2; unsigned int x3; long long x4; })samplePresentationTimeForTrackTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)segmentForTrackTime:(struct { long long x1; int x2; unsigned int x3; long long x4; })arg1;
- (id)segments;
- (long long)statusOfValueForKey:(id)arg1 error:(id*)arg2;
- (struct { struct { long long x_1_1_1; int x_1_1_2; unsigned int x_1_1_3; long long x_1_1_4; } x1; struct { long long x_2_1_1; int x_2_1_2; unsigned int x_2_1_3; long long x_2_1_4; } x2; })timeRange;
- (long long)totalSampleDataLength;
- (int)trackID;

@end
