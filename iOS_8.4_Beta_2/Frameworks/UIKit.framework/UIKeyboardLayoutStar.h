/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UIKeyboardLayoutStar : UIKeyboardLayout <UIKBEmojiHitTestResponder> {
    NSMutableSet *_accentInfo;
    UIKBTree *_activeKey;
    NSMutableSet *_allKeyplaneKeycaps;
    NSMutableDictionary *_allKeyplaneViews;
    long long _appearance;
    double _autoSplitElapsedTime;
    double _autoSplitLastUpdate;
    bool _autoshift;
    UIKBBackgroundView *_backgroundView;
    NSMutableDictionary *_compositeImages;
    UIDelayedAction *_delayedCentroidUpdate;
    SEL _deleteAction;
    SEL _deleteLongAction;
    id _deleteTarget;
    bool _didLongPress;
    UIView *_dimKeyboardImageView;
    CADisplayLink *_displayLink;
    bool _edgeSwipeDetected;
    double _edgeSwipeProgress;
    double _edgeSwipeVelocity;
    struct __CFDictionary { } *_extendedTouchInfoMap;
    double _finalSplitProgress;
    UIView *_flickPopupView;
    NSTimer *_flickPopuptimer;
    bool _ghostKeysEnabled;
    NSMutableSet *_hasAccents;
    UIKBTree *_inactiveLanguageIndicator;
    long long _initialBias;
    double _initialEdgeTranslation;
    double _initialPinchSeparation;
    double _initialSplitProgress;
    bool _isOutOfBounds;
    bool _isRebuilding;
    UIKBTree *_keyboard;
    bool _keyboardImageViewIsDim;
    NSString *_keyboardName;
    NSMutableDictionary *_keyboards;
    UIKBTree *_keyplane;
    NSString *_keyplaneName;
    UIKeyboardKeyplaneTransition *_keyplaneTransition;
    UIKBKeyplaneView *_keyplaneView;
    NSMutableSet *_keysUnderIndicator;
    NSString *_layoutTag;
    UISwipeGestureRecognizer *_leftSwipeRecognizer;
    NSString *_localizedInputKey;
    UIView *_modalDisplayView;
    UIDelayedAction *_multitapAction;
    int _multitapCount;
    UIKBTree *_multitapKey;
    bool _pinchDetected;
    double _pinchSeparationValues;
    NSString *_preRotateKeyplaneName;
    bool _preRotateShift;
    NSString *_preTouchKeyplaneName;
    int _preferredTrackingChangeCount;
    double _prevTouchDownTime;
    double _prevTouchUpTime;
    unsigned long long _prevUpActions;
    UIKBRenderConfig *_renderConfig;
    SEL _returnAction;
    SEL _returnLongAction;
    id _returnTarget;
    bool _revertKeyplaneAfterTouch;
    UISwipeGestureRecognizer *_rightSwipeRecognizer;
    bool _settingShift;
    bool _shift;
    double _shiftLockFirstTapTime;
    bool _shiftLockReady;
    int _shiftTrackingChangeCount;
    bool _showDictationKey;
    bool _showIntlKey;
    SEL _spaceAction;
    SEL _spaceLongAction;
    id _spaceTarget;
    bool _suppressDeactivateKeys;
    bool _swipeDetected;
    id _touchInfo;
    long long _transitionTargetBias;
    UIKeyboardSplitTransitionView *_transitionView;
    _UIKeyboardTypingSpeedLogger *_typingSpeedLogger;
    bool _unshiftAfterMultitap;
    UISwipeGestureRecognizer *_upSwipeRecognizer;
    NSMutableSet *_validInputStrings;
    bool _wasShifted;
    int playKeyClickSoundOn;
}

@property(assign,retain) UIKBTree * activeKey;
@property(assign,readwrite) bool autoShift;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,readwrite) bool didLongPress;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) UIKBTree * keyboard;
@property(assign,copy) NSString * keyboardName;
@property(assign,readonly) UIKBTree * keyplane;
@property(assign,copy) NSString * keyplaneName;
@property(assign,retain) NSString * layoutTag;
@property(assign,copy) NSString * localizedInputKey;
@property(assign,readonly) NSString * localizedInputMode;
@property(assign,retain) UIView * modalDisplayView;
@property(assign,readwrite) int playKeyClickSoundOn;
@property(assign,copy) NSString * preTouchKeyplaneName;
@property(assign,retain) UIKBRenderConfig * renderConfig;
@property(getter=isRotating,assign,readonly) bool rotating;
@property(assign,readwrite) bool shift;
@property(assign,readonly) bool showsDictationKey;
@property(assign,readonly) bool showsInternationalKey;
@property(assign,readonly) Class superclass;

+ (Class)_subclassForScreenTraits:(id)arg1;
+ (void)accessibilitySensitivityChanged;
+ (id)keyboardFromFactoryWithName:(id)arg1 screen:(id)arg2;
+ (struct CGSize { double x1; double x2; })keyboardSizeForInputMode:(id)arg1 screenTraits:(id)arg2;
+ (id)keyboardWithName:(id)arg1 screenTraits:(id)arg2;
+ (id)sharedRivenKeyplaneGenerator;

- (void)_autoSplit:(id)arg1;
- (id)_keyplaneVariantsKeyForString:(id)arg1;
- (void)_resizeForKeyplaneSize:(struct CGSize { double x1; double x2; })arg1 splitWidthsChanged:(bool)arg2;
- (void)accessibilitySensitivityChanged;
- (id)activationIndicatorView;
- (id)activeKey;
- (id)activeMultitapCompleteKey;
- (id)activeTouchForInteraction:(int)arg1;
- (struct CGPoint { double x1; double x2; })applyError:(struct CGPoint { double x1; double x2; })arg1 toKey:(id)arg2;
- (bool)autoShift;
- (id)baseKeyForString:(id)arg1;
- (long long)biasForKeyboard:(id)arg1;
- (id)cacheIdentifierForKeyplaneNamed:(id)arg1;
- (id)cacheTokenForKeyplane:(id)arg1;
- (struct CGImage { }*)cachedCompositeImageWithCacheKey:(id)arg1;
- (bool)canForceTouchCommit:(id)arg1;
- (bool)canMultitap;
- (bool)canProduceString:(id)arg1;
- (bool)canReuseKeyplaneView;
- (void)cancelDelayedCentroidUpdate;
- (void)cancelMultitapTimer;
- (void)cancelTouchIfNecessaryForInfo:(id)arg1;
- (id)candidateList;
- (void)changeToKeyplane:(id)arg1;
- (void)clearAllTouchInfo;
- (void)clearHandwritingStrokesIfNeededAndNotify:(bool)arg1;
- (void)clearInfoForTouch:(id)arg1;
- (void)clearTransientState;
- (void)clearUnusedObjects:(bool)arg1;
- (void)completeCommitTouchesPrecedingTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;
- (void)completeDeleteActionForTouchDownWithActions:(unsigned long long)arg1 executionContext:(id)arg2;
- (void)completeHitTestForTouchDown:(id)arg1 executionContext:(id)arg2;
- (void)completeHitTestForTouchDragged:(id)arg1 hitKey:(id)arg2;
- (void)completeRetestForTouchUp:(id)arg1 timestamp:(double)arg2 interval:(double)arg3 executionContext:(id)arg4;
- (void)completeSendStringActionForTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;
- (void)completeSendStringActionForTouchUp:(id)arg1 withActions:(long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(bool)arg5 prevActions:(long long)arg6 executionContext:(id)arg7;
- (void)continueFromInternationalActionForTouchUp:(id)arg1 withActions:(long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(bool)arg5 prevActions:(long long)arg6 executionContext:(id)arg7;
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 isPopupVariant:(bool)arg3 isMultitap:(bool)arg4 isFlick:(bool)arg5;
- (long long)currentKeyboardBias;
- (id)currentKeyplane;
- (id)currentKeyplaneView;
- (void)deactivateActiveKey;
- (void)deactivateActiveKeys;
- (void)deactivateActiveKeysClearingTouchInfo:(bool)arg1 clearingDimming:(bool)arg2;
- (void)dealloc;
- (id)defaultKeyplaneForKeyplane:(id)arg1;
- (id)defaultNameForKeyplaneName:(id)arg1;
- (long long)defaultSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2;
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;
- (void)didClearInput;
- (void)didFinishScreenGestureRecognition;
- (bool)didLongPress;
- (void)didRecognizeGestureOnEdge:(unsigned long long)arg1 withDistance:(double)arg2;
- (void)didRotate;
- (int)displayTypeHintForMoreKey;
- (int)displayTypeHintForShiftKey;
- (unsigned long long)downActionFlagsForKey:(id)arg1;
- (void)downActionShiftWithKey:(id)arg1;
- (struct CGSize { double x1; double x2; })dragGestureSize;
- (bool)edgeSwipeGestureEnabled;
- (void)fadeMenu:(id)arg1 forKey:(id)arg2;
- (void)fadeMenu:(id)arg1 forKey:(id)arg2 withDelay:(double)arg3;
- (void)fadeWithInvocation:(id)arg1;
- (void)finishHandBiasTransition;
- (void)finishSplit;
- (void)finishSplitTransition;
- (void)finishSplitTransitionWithProgress:(double)arg1;
- (id)flickPopupStringForKey:(id)arg1 withString:(id)arg2;
- (id)flickStringForInputKey:(id)arg1 direction:(int)arg2;
- (void)flushKeyCache:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForKeyWithRepresentedString:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForKeylayoutName:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForKeylayoutName:(id)arg1 onKeyplaneName:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForLastKeyWithRepresentedString:(id)arg1;
- (id)generateInfoForTouch:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)handleDelayedCentroidUpdate;
- (void)handleDismissFlickView;
- (void)handleDismissFlickView:(id)arg1;
- (void)handleFlick:(id)arg1;
- (void)handleKeyboardMenusForTouch:(id)arg1;
- (void)handleMultitapTimerFired;
- (void)handlePopupView;
- (void)handlePopupView:(id)arg1;
- (SEL)handlerForNotification:(id)arg1;
- (bool)handwritingPlane;
- (bool)hasAccentKey;
- (bool)hasCandidateKeys;
- (void)hideMenu:(id)arg1 forKey:(id)arg2;
- (id)highlightedVariantListForStylingKey:(id)arg1;
- (double)hitBuffer;
- (bool)ignoresShiftState;
- (void)incrementPunctuationIfNeeded:(id)arg1;
- (id)infoForTouch:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initialKeyplaneNameWithKBStarName:(id)arg1;
- (void)installGestureRecognizers;
- (double)interpretPinchSeparationValues;
- (void)interpretTouchesForSplit;
- (bool)isAlphabeticPlane;
- (bool)isLongPressedKey:(id)arg1;
- (bool)isRotating;
- (bool)isShiftKeyBeingHeld;
- (bool)isShiftKeyPlaneChooser;
- (bool)keyHasAccentedVariants:(id)arg1;
- (id)keyHitTest:(struct CGPoint { double x1; double x2; })arg1;
- (id)keyHitTestClosestToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)keyHitTestContainingPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)keyHitTestWithoutCharging:(struct CGPoint { double x1; double x2; })arg1;
- (id)keyViewHitTestForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)keyWithRepresentedString:(id)arg1;
- (id)keyboard;
- (id)keyboardLayoutWithBias:(long long)arg1;
- (id)keyboardName;
- (int)keycodeForKey:(id)arg1;
- (id)keyplane;
- (bool)keyplaneContainsEmojiKey;
- (id)keyplaneForKey:(id)arg1;
- (id)keyplaneName;
- (id)keyplaneNameForRevertAfterTouch;
- (id)keyplaneNamed:(id)arg1;
- (double)lastTouchUpTimestamp;
- (id)layoutTag;
- (id)localizedInputKey;
- (id)localizedInputMode;
- (void)logHandwritingData;
- (void)longPressAction;
- (id)modalDisplayView;
- (id)multitapCompleteKeys;
- (void)multitapExpired;
- (void)multitapInterrupted;
- (void)nextToUseInputModeDidChange:(id)arg1;
- (void)performHitTestForTouchInfo:(id)arg1 touchStage:(int)arg2 executionContextPassingUIKBTree:(id)arg3;
- (bool)performReturnAction;
- (bool)performSpaceAction;
- (bool)pinchDetected;
- (bool)pinchSplitGestureEnabled;
- (void)playKeyClickSound;
- (int)playKeyClickSoundOn;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 forEvent:(struct __GSEvent { }*)arg2;
- (bool)pointInside:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (void)populateFlickPopupsForKey:(id)arg1;
- (id)popupKeyViews;
- (id)preTouchKeyplaneName;
- (bool)predictionGestureDetectedForTouchInfo:(id)arg1;
- (void)prepareForSplitTransition;
- (void)rebuildKeyplaneTransitionWithTargetBias:(long long)arg1;
- (void)rebuildSplitTransitionView;
- (void)refreshForDictationAvailablityDidChange;
- (void)refreshForRivenPreferences;
- (void)refreshGhostKeyState;
- (void)removeFromSuperview;
- (id)renderConfig;
- (struct CGImage { }*)renderedImageWithStateFallbacksForToken:(id)arg1;
- (struct CGImage { }*)renderedImageWithToken:(id)arg1;
- (struct CGImage { }*)renderedKeyplaneWithToken:(id)arg1 split:(bool)arg2;
- (void)restoreDefaultsForAllKeys;
- (void)restoreDefaultsForKey:(id)arg1;
- (id)scriptingInfoWithChildren;
- (void)setAction:(SEL)arg1 forKey:(id)arg2;
- (void)setActiveKey:(id)arg1;
- (void)setAutoShift:(bool)arg1;
- (void)setAutoshift:(bool)arg1;
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)arg1;
- (void)setDidLongPress:(bool)arg1;
- (void)setDisableInteraction:(bool)arg1;
- (void)setHideKeysUnderIndicator:(bool)arg1;
- (void)setKeyForTouchInfo:(id)arg1 key:(id)arg2;
- (void)setKeyboardAppearance:(long long)arg1;
- (void)setKeyboardDim:(bool)arg1;
- (void)setKeyboardDim:(bool)arg1 amount:(double)arg2 withDuration:(double)arg3;
- (void)setKeyboardName:(id)arg1;
- (void)setKeyboardName:(id)arg1 appearance:(long long)arg2;
- (void)setKeyplaneName:(id)arg1;
- (void)setLabel:(id)arg1 forKey:(id)arg2;
- (void)setLayoutTag:(id)arg1;
- (void)setLocalizedInputKey:(id)arg1;
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;
- (void)setModalDisplayView:(id)arg1;
- (void)setPasscodeOutlineAlpha:(double)arg1;
- (void)setPlayKeyClickSoundOn:(int)arg1;
- (void)setPreTouchKeyplaneName:(id)arg1;
- (void)setRenderConfig:(id)arg1;
- (void)setReturnKeyEnabled:(bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3;
- (void)setShift:(bool)arg1;
- (void)setSplit:(bool)arg1 animated:(bool)arg2;
- (void)setSplitProgress:(double)arg1;
- (void)setState:(int)arg1 forKey:(id)arg2;
- (void)setTarget:(id)arg1 forKey:(id)arg2;
- (void)setTextEditingTraits:(id)arg1;
- (bool)shift;
- (bool)shouldCommitPrecedingTouchesForTouchDownWithActions:(unsigned long long)arg1;
- (bool)shouldHitTestKey:(id)arg1;
- (bool)shouldMergeKey:(id)arg1;
- (bool)shouldPreventInputManagerHitTestingForKey:(id)arg1;
- (bool)shouldRetestKey:(id)arg1 withKeyplane:(id)arg2;
- (bool)shouldSendStringForFlick:(id)arg1;
- (bool)shouldSendTouchUpToInputManager:(id)arg1;
- (bool)shouldSendTouchUpToRecorder:(id)arg1;
- (bool)shouldShowDictationKey;
- (bool)shouldShowIndicator;
- (bool)shouldSkipResponseToGlobeKey:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2;
- (bool)shouldYieldToControlCenterForFlickWithInitialPoint:(struct CGPoint { double x1; double x2; })arg1 finalPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)showFlickView:(int)arg1 withKey:(id)arg2 flickString:(id)arg3;
- (void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;
- (void)showMenu:(id)arg1 forKey:(id)arg2;
- (void)showPopupVariantsForKey:(id)arg1;
- (void)showPopupView:(int)arg1 withKey:(id)arg2 popupInfo:(id)arg3 force:(bool)arg4;
- (void)showSplitTransitionView:(bool)arg1;
- (bool)showsDictationKey;
- (bool)showsInternationalKey;
- (id)simulateTouch:(struct CGPoint { double x1; double x2; })arg1;
- (id)simulateTouchForCharacter:(id)arg1 errorVector:(struct CGPoint { double x1; double x2; })arg2 shouldTypeVariants:(bool)arg3 baseKeyForVariants:(bool)arg4;
- (id)splitNameForKeyplane:(id)arg1;
- (id)splitNameForKeyplaneName:(id)arg1;
- (int)stateForDictationKey:(id)arg1;
- (int)stateForKey:(id)arg1;
- (int)stateForKeyplaneSwitchKey:(id)arg1;
- (int)stateForManipulationKey:(id)arg1;
- (int)stateForMultitapReverseKey:(id)arg1;
- (int)stateForShiftKey:(id)arg1;
- (int)stateForStylingKey:(id)arg1;
- (bool)supportStylingWithKey:(id)arg1;
- (void)swipeDetected:(id)arg1;
- (unsigned long long)targetEdgesForScreenGestureRecognition;
- (unsigned long long)textEditingKeyMask;
- (void)touchCancelled:(id)arg1 executionContext:(id)arg2;
- (void)touchDown:(id)arg1 executionContext:(id)arg2;
- (void)touchDownWithKey:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 executionContext:(id)arg3;
- (void)touchDragged:(id)arg1 executionContext:(id)arg2;
- (id)touchForKey:(id)arg1;
- (void)touchMultitapTimer;
- (bool)touchPassesDragThreshold:(id)arg1;
- (void)touchUp:(id)arg1 executionContext:(id)arg2;
- (void)triggerSpaceKeyplaneSwitchIfNecessary;
- (void)uninstallGestureRecognizers;
- (unsigned long long)upActionFlagsForKey:(id)arg1;
- (void)upActionShift;
- (void)updateBackgroundCorners;
- (void)updateBackgroundIfNeeded;
- (void)updateCachedKeyplaneKeycaps;
- (void)updateGlobeKeyDisplayString;
- (void)updateKeyCentroids;
- (void)updateKeyboardForKeyplane:(id)arg1;
- (void)updateLayoutTags;
- (void)updateLocalizedDisplayStringOnEmojiInternationalWithKeyplane:(id)arg1 withInputMode:(id)arg2;
- (void)updateLocalizedKeys:(bool)arg1;
- (void)updateLocalizedKeysOnKeyplane:(id)arg1;
- (void)updateMoreAndInternationalKeys;
- (void)updateSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2 withPoint:(struct CGPoint { double x1; double x2; })arg3;
- (void)updateShiftKeyState;
- (void)updateTransitionWithFlags:(unsigned long long)arg1;
- (bool)useScaledGeometrySet;
- (bool)usesAutoShift;
- (int)visualStyleForKeyboardIfSplit:(bool)arg1;
- (void)willMoveToWindow:(id)arg1;
- (void)willRotate;

@end
