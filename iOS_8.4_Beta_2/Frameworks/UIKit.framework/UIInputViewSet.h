/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UIInputViewSet : NSObject {
    UIInputViewController *_accessoryViewController;
    UIView *_inputAccessoryView;
    UIView *_inputView;
    UIInputViewController *_inputViewController;
    bool _isSplit;
    UIResponder *_restorableResponder;
    bool _restoreUsingBecomeFirstResponder;
    double _splitHeightDelta;
}

@property(assign,readonly) bool _inputViewIsSplit;
@property(assign,retain) UIInputViewController * accessoryViewController;
@property(getter=isEmpty,assign,readonly) bool empty;
@property(assign,retain) UIView * inputAccessoryView;
@property(assign,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputAccessoryViewBounds;
@property(assign,retain) UIView * inputView;
@property(assign,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } inputViewBounds;
@property(assign,retain) UIInputViewController * inputViewController;
@property(assign,readonly) bool inputViewKeyboardCanSplit;
@property(assign,readonly) bool isInputAccessoryViewPlaceholder;
@property(assign,readonly) bool isInputViewPlaceholder;
@property(assign,readonly) bool isSplit;
@property(assign,readonly) UIKeyboard * keyboard;
@property(assign,readonly) UIView * layeringView;
@property(assign,readwrite) UIResponder * restorableResponder;
@property(assign,readwrite) bool restoreUsingBecomeFirstResponder;
@property(assign,readonly) UIView * splitExemptSubview;
@property(assign,readwrite) double splitHeightDelta;
@property(assign,readonly) bool supportsSplit;

+ (id)emptyInputSet;
+ (id)inputSetWithInputView:(id)arg1 accessoryView:(id)arg2;
+ (id)inputSetWithKeyboardAndAccessoryView:(id)arg1;
+ (id)inputSetWithPlaceholderAndAccessoryView:(id)arg1;

- (bool)__isCKAccessoryView;
- (bool)_accessorySuppressesShadow;
- (void)_beginSplitTransitionIfNeeded;
- (void)_endSplitTransitionIfNeeded;
- (bool)_inputAccessoryViewSupportsSplit;
- (bool)_inputViewIsSplit;
- (bool)_inputViewIsVisible;
- (bool)_inputViewSetSupportsSplit;
- (bool)_inputViewSupportsSplit;
- (bool)_isKeyboard;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_leftInputViewSetFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_rightInputViewSetFrame;
- (void)_setRenderConfig:(id)arg1;
- (void)_setSplitProgress:(double)arg1;
- (id)_splittableInputAccessoryView;
- (id)_themableInputAccessoryView;
- (id)accessoryViewController;
- (bool)canAnimateToInputViewSet:(id)arg1;
- (bool)containsResponder:(id)arg1;
- (bool)containsView:(id)arg1;
- (void)dealloc;
- (id)description;
- (bool)inSyncWithOrientation:(long long)arg1 forKeyboard:(id)arg2;
- (id)initWithInputView:(id)arg1 accessoryView:(id)arg2 isKeyboard:(bool)arg3;
- (id)inputAccessoryView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputAccessoryViewBounds;
- (id)inputSetWithInputAccessoryViewOnly;
- (id)inputView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })inputViewBounds;
- (id)inputViewController;
- (bool)inputViewKeyboardCanSplit;
- (bool)isEmpty;
- (bool)isEqual:(id)arg1;
- (bool)isInputAccessoryViewPlaceholder;
- (bool)isInputViewPlaceholder;
- (bool)isSplit;
- (bool)isStrictSupersetOfViewSet:(id)arg1;
- (id)keyboard;
- (long long)keyboardOrientation:(id)arg1;
- (id)layeringView;
- (void)refreshPresentation;
- (id)restorableResponder;
- (bool)restoreUsingBecomeFirstResponder;
- (void)setAccessoryViewController:(id)arg1;
- (bool)setAccessoryViewVisible:(bool)arg1 delay:(double)arg2;
- (void)setInputAccessoryView:(id)arg1;
- (void)setInputView:(id)arg1;
- (void)setInputViewController:(id)arg1;
- (void)setRestorableResponder:(id)arg1;
- (void)setRestoreUsingBecomeFirstResponder:(bool)arg1;
- (void)setSplitHeightDelta:(double)arg1;
- (id)splitExemptSubview;
- (double)splitHeightDelta;
- (bool)supportsSplit;
- (bool)usesKeyClicks;
- (bool)visible;

@end
