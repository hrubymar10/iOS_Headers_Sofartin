/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UIKeyboardPredictionCell : UIView {
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _activeFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _baseFrame;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _collapsedFrame;
    bool _isAutocorrection;
    bool _isCenter;
    bool _isLongCandidate;
    bool _isTypedString;
    TIKeyboardCandidate *_prediction;
    int _state;
    UIKBKeyView *m_activeKeyView;
    UIKBKeyView *m_enabledKeyView;
    struct CGSize { 
        double width; 
        double height; 
    } m_keyViewSize;
    UIMorphingLabel *m_label;
    bool m_lightKeyboard;
    UIView *m_maskView;
}

@property(assign,readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } activeFrame;
@property(assign,readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } baseFrame;
@property(assign,readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } collapsedFrame;
@property(assign,readwrite) bool isAutocorrection;
@property(assign,readwrite) bool isCenter;
@property(assign,readwrite) bool isLongCandidate;
@property(assign,readwrite) bool isTypedString;
@property(assign,retain) TIKeyboardCandidate * prediction;
@property(assign,readwrite) int state;

+ (id)initKeyViewWithSize:(struct CGSize { double x1; double x2; })arg1 state:(int)arg2 needsBackground:(bool)arg3;

- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })activeFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })baseFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })collapsedFrame;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isAutocorrection;
- (bool)isCenter;
- (bool)isLongCandidate;
- (bool)isTypedString;
- (id)label;
- (id)prediction;
- (void)scrollLabelWithText:(id)arg1 force:(bool)arg2;
- (void)setActiveFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setBaseFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCellAttributes;
- (void)setCollapsedFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setIsAutocorrection:(bool)arg1;
- (void)setIsCenter:(bool)arg1;
- (void)setIsLongCandidate:(bool)arg1;
- (void)setIsTypedString:(bool)arg1;
- (void)setState:(int)arg1;
- (void)setState:(int)arg1 withText:(id)arg2;
- (void)setText:(id)arg1 prediction:(id)arg2 active:(bool)arg3;
- (void)setVisibleRect;
- (int)state;
- (id)textColor;
- (void)touchMoved:(double)arg1;
- (void)updateBackgroundWithRenderConfig:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleRect;

@end
