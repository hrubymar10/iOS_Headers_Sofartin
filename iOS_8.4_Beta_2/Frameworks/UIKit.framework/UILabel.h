/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UILabel : UIView <ABText, MPUAutoupdatingTextContainer, NSCoding, _UIMultilineTextContentSizing> {
    bool __textColorFollowsTintColor;
    id _content;
    NSMutableDictionary *_defaultAttributes;
    double _firstLineBaseline;
    UIColor *_highlightedColor;
    double _lastLineBaseline;
    id _layout;
    long long _lineSpacing;
    long long _measuredNumberOfLines;
    double _minimumFontSize;
    double _minimumScaleFactor;
    long long _numberOfLines;
    double _preferredMaxLayoutWidth;
    double _previousBaselineOffsetFromBottom;
    double _previousFirstLineBaseline;
    _UILabelScaledMetrics *_scaledMetrics;
    struct CGSize { 
        double width; 
        double height; 
    } _size;
    NSAttributedString *_synthesizedAttributedText;
    struct { 
        unsigned int unused1 : 3; 
        unsigned int highlighted : 1; 
        unsigned int autosizeTextToFit : 1; 
        unsigned int autotrackTextToFit : 1; 
        unsigned int baselineAdjustment : 2; 
        unsigned int unused2 : 2; 
        unsigned int enabled : 1; 
        unsigned int wordRoundingEnabled : 1; 
        unsigned int explicitAlignment : 1; 
        unsigned int marqueeEnabled : 1; 
        unsigned int marqueeRunable : 1; 
        unsigned int marqueeRequired : 1; 
        unsigned int drawsLetterpress : 1; 
        unsigned int unused3 : 1; 
        unsigned int usesExplicitPreferredMaxLayoutWidth : 1; 
        unsigned int determiningPreferredMaxLayoutWidth : 1; 
        unsigned int inSecondConstraintsPass : 1; 
        unsigned int drawsDebugBaselines : 1; 
        unsigned int explicitBaselineOffset : 1; 
        unsigned int usesSimpleTextEffects : 1; 
        unsigned int isComplexString : 1; 
        unsigned int wantsUnderlineForAccessibilityButtonShapesEnabled : 1; 
    } _textLabelFlags;
}

@property(setter=MPU_setAutomaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts:,assign,readwrite) bool MPU_automaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts;
@property(assign,readonly) MPUTextContainerContentSizeUpdater * MPU_contentSizeUpdater;
@property(assign,readonly) double _capOffsetFromBoundsTop;
@property(setter=_setDrawsDebugBaselines:,assign,readwrite) bool _drawsDebugBaselines;
@property(setter=_setFirstLineBaselineFrameOriginY:,assign,readwrite) double _firstLineBaselineFrameOriginY;
@property(assign,readonly) double _firstLineBaselineOffsetFromBoundsTop;
@property(setter=_setFirstLineCapFrameOriginY:,assign,readwrite) double _firstLineCapFrameOriginY;
@property(assign,readonly) double _lastLineBaseline;
@property(setter=_setLastLineBaselineFrameOriginY:,assign,readwrite) double _lastLineBaselineFrameOriginY;
@property(getter=_synthesizedAttributedText,setter=_setSynthesizedAttributedText:,assign,retain) NSAttributedString * _synthesizedAttributedText;
@property(setter=_setTextColorFollowsTintColor:,assign,readwrite) bool _textColorFollowsTintColor;
@property(setter=_setWantsUnderlineForAccessibilityButtonShapesEnabled:,assign,readwrite) bool _wantsUnderlineForAccessibilityButtonShapesEnabled;
@property(setter=_setWantsUnderlineForAccessibilityButtonShapesEnabled:,assign,readwrite) bool _wantsUnderlineForAccessibilityButtonShapesEnabled;
@property(assign,copy) NSString * ab_text;
@property(assign,copy) NSDictionary * ab_textAttributes;
@property(assign,readwrite) bool adjustsFontSizeToFitWidth;
@property(assign,readwrite) bool adjustsLetterSpacingToFitWidth;
@property(assign,copy) NSAttributedString * attributedText;
@property(assign,copy) NSAttributedString * attributedText;
@property(assign,readwrite) long long baselineAdjustment;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,copy) NSString * description;
@property(assign,copy) NSString * description;
@property(getter=isEnabled,assign,readwrite) bool enabled;
@property(assign,retain) UIFont * font;
@property(assign,retain) UIFont * font;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) unsigned long long hash;
@property(getter=isHighlighted,assign,readwrite) bool highlighted;
@property(assign,retain) UIColor * highlightedTextColor;
@property(assign,readwrite) long long lineBreakMode;
@property(assign,readwrite) long long lineSpacing;
@property(assign,readwrite) double minimumFontSize;
@property(assign,readwrite) double minimumScaleFactor;
@property(assign,readwrite) long long numberOfLines;
@property(assign,readwrite) double preferredMaxLayoutWidth;
@property(assign,readonly) double rc_baselineOffsetFromBottom;
@property(assign,readonly) double rc_capOffsetFromTop;
@property(assign,retain) UIColor * shadowColor;
@property(assign,readwrite) struct CGSize { double x1; double x2; } shadowOffset;
@property(assign,readonly) Class superclass;
@property(assign,readonly) Class superclass;
@property(assign,readonly) Class superclass;
@property(assign,copy) NSString * text;
@property(assign,readwrite) long long textAlignment;
@property(assign,retain) UIColor * textColor;
@property(getter=isUserInteractionEnabled,assign,readwrite) bool userInteractionEnabled;

+ (id)_defaultAttributes;
+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_insetRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 forAttributedString:(id)arg2 inView:(id)arg3;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_insetsForAttributedString:(id)arg1 inView:(id)arg2;
+ (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_insetsForString:(id)arg1 withFont:(id)arg2 inView:(id)arg3;
+ (struct CGSize { double x1; double x2; })_legacy_adjustSizeForWebKitConstraining:(struct CGSize { double x1; double x2; })arg1 withFont:(id)arg2;
+ (struct __CFCharacterSet { }*)_tooBigChars;
+ (id)defaultFont;
+ (Class)layerClass;
+ (void)rc_transitionFromLabel:(id)arg1 toLabelWithText:(id)arg2 sizeNewLabelToFit:(bool)arg3 duration:(double)arg4 newLabelTransitionCompleteHandler:(id)arg5;

- (bool)MPU_automaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts;
- (void)MPU_configureWithTextAttributes:(id)arg1;
- (id)MPU_contentSizeUpdater;
- (void)MPU_setAutomaticallyUpdatesTextStyleFontsToPreferredTextStyleFonts:(bool)arg1;
- (void)_accessibilityButtonShapesChangedNotification:(id)arg1;
- (void)_accessibilityButtonShapesParametersDidChange;
- (double)_actualScaleFactor;
- (id)_associatedScalingLabel;
- (bool)_attributedStringHasAttributesNotCoveredByPrimitives;
- (double)_baselineOffsetFromBottom;
- (void)_baselineOffsetParametersDidChange;
- (double)_capOffsetFromBoundsTop;
- (void)_commonInit;
- (id)_compatibilityAttributedString;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_contentInsetsFromFonts;
- (void)_coordinateBeginTimeForMarqueeAnimations:(double)arg1;
- (id)_defaultAttributes;
- (void)_didChangeFromIdiom:(long long)arg1 onScreen:(id)arg2 traverseHierarchy:(bool)arg3;
- (id)_disabledFontColor;
- (void)_drawFullMarqueeTextInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_drawTextInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 baselineCalculationOnly:(bool)arg2;
- (bool)_drawsDebugBaselines;
- (bool)_drawsUnderline;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_ensureBaselineMetricsReturningBounds;
- (double)_firstBaselineOffsetFromTop;
- (double)_firstLineBaselineFrameOriginY;
- (double)_firstLineBaselineOffsetFromBoundsTop;
- (double)_firstLineCapFrameOriginY;
- (id)_image;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_invalidateAsNeededForNewSize:(struct CGSize { double x1; double x2; })arg1 oldSize:(struct CGSize { double x1; double x2; })arg2;
- (void)_invalidateDefaultAttributes;
- (void)_invalidateLayout;
- (void)_invalidateSynthesizedAttributedTextAndLayout;
- (void)_invalidateTextSize;
- (bool)_isTextFieldCenteredLabel;
- (double)_lastLineBaseline;
- (double)_lastLineBaselineFrameOriginY;
- (id)_layoutDebuggingTitle;
- (double)_maximumMarqueeTextWidth;
- (long long)_measuredNumberOfLines;
- (double)_minimumFontSize;
- (bool)_needsDoubleUpdateConstraintsPass;
- (double)_preferredMaxLayoutWidth;
- (void)_prepareForFirstIntrinsicContentSizeCalculation;
- (void)_prepareForSecondIntrinsicContentSizeCalculationWithLayoutEngineBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_resetUsesExplicitPreferredMaxLayoutWidth;
- (id)_scriptingInfo;
- (void)_setAttributedText:(id)arg1 andTakeOwnership:(bool)arg2;
- (void)_setColor:(id)arg1;
- (void)_setDefaultAttributes:(id)arg1;
- (void)_setDrawsDebugBaselines:(bool)arg1;
- (void)_setFirstLineBaselineFrameOriginY:(double)arg1;
- (void)_setFirstLineCapFrameOriginY:(double)arg1;
- (void)_setFont:(id)arg1;
- (void)_setInSecondConstraintsPass:(bool)arg1;
- (void)_setLastLineBaselineFrameOriginY:(double)arg1;
- (void)_setLineBreakMode:(long long)arg1;
- (void)_setMinimumFontSize:(double)arg1;
- (void)_setShadow:(id)arg1;
- (void)_setShadowUIOffset:(struct UIOffset { double x1; double x2; })arg1;
- (void)_setSynthesizedAttributedText:(id)arg1;
- (void)_setText:(id)arg1;
- (void)_setTextAlignment:(long long)arg1;
- (void)_setTextColor:(id)arg1;
- (void)_setTextColorFollowsTintColor:(bool)arg1;
- (void)_setUsesSimpleTextEffects:(bool)arg1;
- (void)_setWantsUnderlineForAccessibilityButtonShapesEnabled:(bool)arg1;
- (void)_setWordRoundingEnabled:(bool)arg1;
- (id)_shadow;
- (bool)_shouldCeilSizeToViewScale;
- (bool)_shouldDrawUnderlinesLikeWebKit;
- (bool)_shouldShowAccessibilityButtonShapesUnderline;
- (id)_siblingMarqueeLabels;
- (void)_startMarquee;
- (void)_startMarqueeIfNecessary;
- (void)_stopMarqueeWithRedisplay:(bool)arg1;
- (id)_stringDrawingContext;
- (id)_synthesizedAttributedText;
- (id)_synthesizedTextAttributes;
- (long long)_textAlignmentFromElementAlignment:(unsigned long long)arg1;
- (bool)_textColorFollowsTintColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_textRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 limitedToNumberOfLines:(long long)arg2 includingShadow:(bool)arg3;
- (bool)_updateScaledMetricsForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)_usesSimpleTextEffects;
- (bool)_wantsUnderlineForAccessibilityButtonShapesEnabled;
- (id)ab_text;
- (id)ab_textAttributes;
- (bool)adjustsFontSizeToFitWidth;
- (bool)adjustsLetterSpacingToFitWidth;
- (id)attributedText;
- (bool)autotrackTextToFit;
- (long long)baselineAdjustment;
- (bool)centersHorizontally;
- (id)color;
- (void)configureForIKTextElement:(id)arg1 fontDescriptor:(id)arg2 textStyle:(id)arg3;
- (void)configureForIKTextElement:(id)arg1 fontDescriptor:(id)arg2 textStyle:(id)arg3 capitalize:(bool)arg4;
- (id)currentTextColor;
- (void)dealloc;
- (unsigned long long)defaultAccessibilityTraits;
- (void)drawContentsInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)drawTextInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)drawsLetterpress;
- (bool)drawsUnderline;
- (void)encodeWithCoder:(id)arg1;
- (id)font;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForBaseline:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)highlightedTextColor;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGSize { double x1; double x2; })intrinsicContentSize;
- (void)invalidateIntrinsicContentSize;
- (bool)isAccessibilityElementByDefault;
- (bool)isElementAccessibilityExposedToInterfaceBuilder;
- (bool)isEnabled;
- (bool)isHighlighted;
- (bool)labelTextIsTruncated;
- (id)letterpressStyle;
- (long long)lineBreakMode;
- (long long)lineSpacing;
- (bool)marqueeRunning;
- (double)minimumFontSize;
- (double)minimumScaleFactor;
- (long long)numberOfLines;
- (struct CGSize { double x1; double x2; })pkui_sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })pkui_sizeThatFits:(struct CGSize { double x1; double x2; })arg1 forceWordWrap:(bool)arg2;
- (double)preferredMaxLayoutWidth;
- (struct CGSize { double x1; double x2; })rawSize;
- (double)rc_baselineOffsetFromBottom;
- (double)rc_capOffsetFromTop;
- (double)rc_distanceFromBaselineToCoordinate:(double)arg1 inView:(id)arg2;
- (void)setAb_text:(id)arg1;
- (void)setAb_textAttributes:(id)arg1;
- (void)setAdjustsFontSizeToFitWidth:(bool)arg1;
- (void)setAdjustsLetterSpacingToFitWidth:(bool)arg1;
- (void)setAttributedText:(id)arg1;
- (void)setAutotrackTextToFit:(bool)arg1;
- (void)setBaselineAdjustment:(long long)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCentersHorizontally:(bool)arg1;
- (void)setColor:(id)arg1;
- (void)setDrawsLetterpress:(bool)arg1;
- (void)setDrawsUnderline:(bool)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setFont:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrameOnBaseline:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setHighlightedTextColor:(id)arg1;
- (void)setLetterpressStyle:(id)arg1;
- (void)setLineBreakMode:(long long)arg1;
- (void)setLineSpacing:(long long)arg1;
- (void)setMarqueeEnabled:(bool)arg1;
- (void)setMarqueeRunning:(bool)arg1;
- (void)setMinimumFontSize:(double)arg1;
- (void)setMinimumScaleFactor:(double)arg1;
- (void)setNumberOfLines:(long long)arg1;
- (void)setPreferredMaxLayoutWidth:(double)arg1;
- (void)setRawSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setShadowBlur:(double)arg1;
- (void)setShadowColor:(id)arg1;
- (void)setShadowOffset:(struct CGSize { double x1; double x2; })arg1;
- (void)setText:(id)arg1;
- (void)setTextAlignment:(long long)arg1;
- (void)setTextColor:(id)arg1;
- (void)setUserInteractionEnabled:(bool)arg1;
- (double)shadowBlur;
- (id)shadowColor;
- (struct CGSize { double x1; double x2; })shadowOffset;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (id)text;
- (long long)textAlignment;
- (id)textColor;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textRectForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 limitedToNumberOfLines:(long long)arg2;
- (struct CGSize { double x1; double x2; })textSize;
- (struct CGSize { double x1; double x2; })textSizeForWidth:(double)arg1;
- (void)tintColorDidChange;
- (void)updateConstraints;

@end
