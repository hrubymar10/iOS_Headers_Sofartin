/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKit.framework/EventKit
 */

@interface EKEvent : EKCalendarItem {
    EKCalendarDate *_occurrenceEndDate;
    bool _occurrenceIsAllDay;
    EKCalendarDate *_occurrenceStartDate;
    EKCalendarDate *_originalOccurrenceEndDate;
    NSNumber *_originalOccurrenceIsAllDay;
    EKCalendarDate *_originalOccurrenceStartDate;
    bool _requiresDetachDueToSnoozedAlarm;
}

@property(assign,readonly) NSString * UUID;
@property(getter=isAllDay,assign,readwrite) bool allDay;
@property(assign,readonly) bool allowsPrivacyLevelModifications;
@property(assign,readonly) NSArray * attachments;
@property(assign,readonly) bool attendeeReplyChanged;
@property(assign,readwrite) int availability;
@property(assign,readonly) long long birthdayPersonID;
@property(assign,readonly) bool canBeRespondedTo;
@property(assign,readonly) bool canDetachSingleOccurrence;
@property(assign,readonly) bool canSetAvailability;
@property(assign,readonly) bool dateChanged;
@property(assign,readonly) double duration;
@property(assign,readonly) double durationIncludingTravel;
@property(assign,readonly) bool eligibleForTravelAdvisories;
@property(assign,readonly) EKCalendarDate * endCalendarDate;
@property(assign,copy) NSDate * endDate;
@property(assign,readonly) struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; } endDateGr;
@property(assign,readonly) NSString * eventIdentifier;
@property(assign,readonly) EKEventStore * eventStore;
@property(assign,readonly) NSURL * externalURL;
@property(assign,copy) NSDate * initialEndDate;
@property(assign,copy) NSDate * initialStartDate;
@property(assign,readwrite) unsigned long long invitationStatus;
@property(assign,readonly) bool isAllDayDirty;
@property(assign,readonly) bool isDetached;
@property(assign,readonly) bool isEditable;
@property(assign,readonly) bool isEndDateDirty;
@property(assign,readonly) bool isStartDateDirty;
@property(assign,readonly) bool isStatusDirty;
@property(assign,readonly) bool isTravelTimeEditable;
@property(assign,readonly) bool locationChanged;
@property(assign,readonly) unsigned int modifiedProperties;
@property(assign,readonly) NSDate * occurrenceDate;
@property(assign,copy) EKCalendarDate * occurrenceEndDate;
@property(assign,readwrite) bool occurrenceIsAllDay;
@property(assign,copy) EKCalendarDate * occurrenceStartDate;
@property(assign,readonly) EKParticipant * organizer;
@property(assign,copy) EKCalendarDate * originalOccurrenceEndDate;
@property(assign,copy) NSNumber * originalOccurrenceIsAllDay;
@property(assign,copy) EKCalendarDate * originalOccurrenceStartDate;
@property(assign,readwrite) int participationStatus;
@property(assign,readonly) NSDate * participationStatusModifiedDate;
@property(assign,readonly) int pendingParticipationStatus;
@property(assign,readwrite) long long privacyLevel;
@property(assign,readwrite) bool requiresDetachDueToSnoozedAlarm;
@property(assign,copy) NSString * responseComment;
@property(assign,readonly) bool responseMustApplyToAll;
@property(assign,readonly) EKCalendarDate * startCalendarDate;
@property(assign,readonly) EKCalendarDate * startCalendarDateIncludingTravelTime;
@property(assign,copy) NSDate * startDate;
@property(assign,readonly) struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; } startDateGr;
@property(assign,readonly) NSDate * startDateIncludingTravel;
@property(assign,readonly) int status;
@property(assign,readonly) bool timeChanged;
@property(assign,readonly) bool titleChanged;
@property(assign,readwrite) long long travelAdvisoryBehavior;
@property(assign,readonly) bool travelAdvisoryBehaviorIsEffectivelyEnabled;
@property(assign,readonly) long long travelRoutingMode;
@property(assign,readwrite) double travelTime;
@property(assign,copy) NSString * uniqueId;

+ (id)eventWithEventStore:(id)arg1;
+ (id)privacyLevelAsString:(long long)arg1;

- (bool)_cancelWithSpan:(int)arg1 error:(id*)arg2;
- (bool)_checkStartDateConstraintAgainstDate:(struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })arg1 timeZone:(id)arg2 error:(id*)arg3;
- (id)_commentIconString;
- (id)_dateForNextOccurrence;
- (void)_deleteThisOccurrence;
- (bool)_deleteWithSpan:(int)arg1 error:(id*)arg2;
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(bool)arg3;
- (id)_effectiveTimeZone;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })_gregorianDateCorrectedForTimeZoneFromCalendarDate:(id)arg1 orNSDate:(id)arg2;
- (bool)_isAllDay;
- (bool)_isInitialOccurrenceDate:(id)arg1;
- (bool)_occurrenceExistsOnDate:(double)arg1 timeZone:(id)arg2;
- (int)_parentParticipationStatus;
- (id)_persistentEvent;
- (void)_sendModifiedNote;
- (bool)_shouldCancelInsteadOfDeleteWithSpan:(int)arg1;
- (bool)_shouldDeclineInsteadOfDelete;
- (id)_sortedEKParticipantsForSortingIgnoringNonHumans:(id)arg1;
- (id)_travelTimeInternalDescription;
- (bool)_validateAlarmIntervalConstrainedToRecurrenceInterval:(int)arg1;
- (bool)_validateDatesAndRecurrencesGivenSpan:(int)arg1 error:(id*)arg2;
- (bool)_validateDurationConstrainedToRecurrenceInterval;
- (bool)allowsAlarmModifications;
- (bool)allowsCalendarModifications;
- (bool)allowsPrivacyLevelModifications;
- (bool)allowsRecurrenceModifications;
- (bool)attendeeReplyChanged;
- (int)availability;
- (long long)birthdayPersonID;
- (bool)canBeRespondedTo;
- (bool)canDetachSingleOccurrence;
- (bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id*)arg3;
- (bool)canSetAvailability;
- (bool)changingAllDayPropertyIsAllowed;
- (void)clearInvitationStatus;
- (bool)commitWithSpan:(int)arg1 error:(id*)arg2;
- (id)committedValueForKey:(id)arg1;
- (long long)compareStartDateWithEvent:(id)arg1;
- (bool)dateChanged;
- (long long)daySpan;
- (void)dealloc;
- (id)description;
- (void)didCommit;
- (id)dirtyPropertiesToSkip;
- (double)duration;
- (double)durationIncludingTravel;
- (bool)eligibleForTravelAdvisories;
- (id)endCalendarDate;
- (id)endDate;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDateGr;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })endDatePinnedForAllDay;
- (id)eventIdentifier;
- (id)eventStore;
- (id)exportToICS;
- (id)externalURI;
- (id)externalURL;
- (bool)hasHumanInviteesToDisplay;
- (bool)hasSelfAttendee;
- (unsigned long long)hash;
- (id)init;
- (id)initWithEventStore:(id)arg1;
- (id)initWithPersistentObject:(id)arg1;
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;
- (id)initialEndDate;
- (id)initialStartDate;
- (unsigned long long)invitationStatus;
- (bool)isAllDay;
- (bool)isAllDayDirty;
- (bool)isDetached;
- (bool)isEditable;
- (bool)isEndDateDirty;
- (bool)isEqual:(id)arg1;
- (bool)isStartDateDirty;
- (bool)isStatusDirty;
- (bool)isTentative;
- (bool)isTravelTimeEditable;
- (bool)locationChanged;
- (unsigned int)modifiedProperties;
- (bool)needsOccurrenceCacheUpdate;
- (id)occurrenceDate;
- (id)occurrenceEndDate;
- (bool)occurrenceIsAllDay;
- (id)occurrenceStartDate;
- (id)originalOccurrenceEndDate;
- (id)originalOccurrenceIsAllDay;
- (id)originalOccurrenceStartDate;
- (int)participationStatus;
- (id)participationStatusModifiedDate;
- (int)pendingParticipationStatus;
- (long long)privacyLevel;
- (id)recurrenceRule;
- (bool)refresh;
- (bool)removeWithSpan:(int)arg1 error:(id*)arg2;
- (bool)requiresDetach;
- (bool)requiresDetachDueToSnoozedAlarm;
- (id)responseComment;
- (bool)responseMustApplyToAll;
- (void)revert;
- (void)rollback;
- (void)setAllDay:(bool)arg1;
- (void)setAvailability:(int)arg1;
- (void)setEndDate:(id)arg1;
- (void)setInvitationStatus:(unsigned long long)arg1;
- (void)setModifiedProperties:(unsigned int)arg1;
- (void)setNeedsOccurrenceCacheUpdate:(bool)arg1;
- (void)setOccurrenceEndDate:(id)arg1;
- (void)setOccurrenceIsAllDay:(bool)arg1;
- (void)setOccurrenceStartDate:(id)arg1;
- (void)setOriginalOccurrenceEndDate:(id)arg1;
- (void)setOriginalOccurrenceIsAllDay:(id)arg1;
- (void)setOriginalOccurrenceStartDate:(id)arg1;
- (void)setParticipationStatus:(int)arg1;
- (void)setPrivacyLevel:(long long)arg1;
- (void)setRecurrenceRule:(id)arg1;
- (void)setRequiresDetachDueToSnoozedAlarm:(bool)arg1;
- (void)setResponseComment:(id)arg1;
- (void)setStartDate:(id)arg1;
- (void)setTimeZone:(id)arg1;
- (void)setTravelAdvisoryBehavior:(long long)arg1;
- (void)setTravelTime:(double)arg1;
- (bool)sg_isCuratedEventFromSuggestionNewerThan:(double)arg1;
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;
- (id)sortEKParticipantsIgnoringNonHumans:(id)arg1;
- (id)sortedEKAttachmentsDisplayStrings;
- (id)sortedEKParticipantsDisplayStringsIgnoringNonHumans:(id)arg1;
- (id)startCalendarDate;
- (id)startCalendarDateIncludingTravelTime;
- (id)startDate;
- (id)startDateForRecurrence;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDateGr;
- (id)startDateIncludingTravel;
- (struct { int x1; BOOL x2; BOOL x3; BOOL x4; BOOL x5; double x6; })startDatePinnedForAllDay;
- (int)status;
- (bool)timeChanged;
- (id)title;
- (bool)titleChanged;
- (long long)travelAdvisoryBehavior;
- (bool)travelAdvisoryBehaviorIsEffectivelyEnabled;
- (long long)travelRoutingMode;
- (double)travelTime;
- (id)uniqueId;
- (bool)validateRecurrenceRule:(id)arg1 error:(id*)arg2;
- (bool)validateWithSpan:(int)arg1 error:(id*)arg2;

@end
