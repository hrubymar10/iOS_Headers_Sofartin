/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/NetworkExtension.framework/NetworkExtension
 */

@interface NEConfigurationManager : NSObject {
    NSData *_SCPreferencesSignature;
    id _changedHandler;
    int _changedNotifyToken;
    NSObject<OS_dispatch_queue> *_changedQueue;
    NSDictionary *_currentIndex;
    NSKeyedUnarchiver *_decoder;
    <NEConfigurationManagerDelegate> *_delegate;
    NSString *_description;
    long long _generation;
    bool _hasReadPermission;
    bool _hasVPNAPIEntitlement;
    NEHelper *_helper;
    bool _isNEHelper;
    bool _isVPNPublicAPI;
    NSMutableDictionary *_loadedConfigurations;
    NSMutableDictionary *_loadedIndex;
    NSString *_pluginType;
    NSObject<OS_dispatch_queue> *_queue;
    NSUUID *_userUUID;
}

@property(assign,retain) NSData * SCPreferencesSignature;
@property(assign,copy) id changedHandler;
@property(assign,readwrite) int changedNotifyToken;
@property(assign,retain) NSObject<OS_dispatch_queue> * changedQueue;
@property(assign,retain) NSDictionary * currentIndex;
@property(assign,retain) NSKeyedUnarchiver * decoder;
@property(assign,retain) <NEConfigurationManagerDelegate> * delegate;
@property(assign,readwrite) long long generation;
@property(assign,readwrite) bool hasReadPermission;
@property(assign,readwrite) bool hasVPNAPIEntitlement;
@property(assign,readonly) NEHelper * helper;
@property(assign,readwrite) bool isNEHelper;
@property(assign,readwrite) bool isVPNPublicAPI;
@property(assign,retain) NSMutableDictionary * loadedConfigurations;
@property(assign,retain) NSMutableDictionary * loadedIndex;
@property(assign,readonly) NSString * pluginType;
@property(assign,readonly) NSObject<OS_dispatch_queue> * queue;
@property(assign,readonly) NSUUID * userUUID;

+ (long long)configuration:(id)arg1 overlapsWithOtherConfiguration:(id)arg2;
+ (bool)configurationIsEnabled:(id)arg1;
+ (void)disableConfiguration:(id)arg1 onDemandOnly:(bool)arg2;
+ (id)sharedManager;
+ (id)sharedManagerForAllUsers;
+ (void)updateFlags:(unsigned long long*)arg1 withConfiguration:(id)arg2;

- (void).cxx_destruct;
- (id)SCPreferencesSignature;
- (id)changedHandler;
- (int)changedNotifyToken;
- (id)changedQueue;
- (void)clearLoadedConfigurationsWithIDs:(id)arg1;
- (bool)configurationHasChanged:(id)arg1;
- (id)copyChangedConfigurationIDs:(id)arg1;
- (void)copyIdentities:(id)arg1 fromDomain:(long long)arg2 withCompletionQueue:(id)arg3 handler:(id)arg4;
- (id)currentIndex;
- (void)dealloc;
- (id)decodeConfigurationWithIdentifier:(id)arg1;
- (id)decoder;
- (id)delegate;
- (id)description;
- (void)didLoadConfiguration:(id)arg1;
- (void)didLoadConfiguration:(id)arg1 withSignature:(id)arg2;
- (id)errorWithCode:(long long)arg1 specifics:(id)arg2;
- (id)filterIndexWithFilter:(id)arg1;
- (long long)generation;
- (void)getCurrentIndexWithCompletionHandler:(id)arg1;
- (void)handleApplicationsRemoved:(id)arg1 pluginTypesRemoved:(id)arg2 withCompletionHandler:(id)arg3;
- (void)handleFileRemovedWithCompletionHandler:(id)arg1;
- (void)handlePluginTypesRemoved:(id)arg1 configuration:(id)arg2 vpn:(id)arg3 updateSCPreferences:(struct __SCPreferences { }*)arg4;
- (bool)hasReadPermission;
- (bool)hasVPNAPIEntitlement;
- (id)helper;
- (id)init;
- (id)initWithPluginType:(id)arg1;
- (id)initWithUserUUID:(id)arg1;
- (bool)isNEHelper;
- (bool)isVPNPublicAPI;
- (void)loadConfigurationWithID:(id)arg1 withCompletionQueue:(id)arg2 handler:(id)arg3;
- (void)loadConfigurations:(id)arg1 withFilter:(id)arg2 completionQueue:(id)arg3 completionHandler:(id)arg4;
- (void)loadConfigurationsInternal:(id)arg1 withCompletionHandler:(id)arg2;
- (void)loadConfigurationsWithCompletionQueue:(id)arg1 handler:(id)arg2;
- (void)loadIndexWithFilter:(id)arg1 completionQueue:(id)arg2 handler:(id)arg3;
- (id)loadedConfigurations;
- (id)loadedIndex;
- (id)makeMutableCopyOfIndex:(id)arg1;
- (void)notifyChanges;
- (id)pluginType;
- (void)postChangeNotificationWithGeneration:(long long)arg1 andFlags:(unsigned long long)arg2;
- (void)postGeneration;
- (id)queue;
- (id)readIndexFromDiskWithError:(id*)arg1;
- (void)registerForChangeNotifications;
- (bool)reloadFromDisk;
- (void)removeConfiguration:(id)arg1 withCompletionQueue:(id)arg2 handler:(id)arg3;
- (void)removeConfigurationFromDisk:(id)arg1 completionQueue:(id)arg2 completionHandler:(id)arg3;
- (id)removeConfigurationFromDisk:(id)arg1 updateSCPreferences:(struct __SCPreferences { }*)arg2;
- (bool)resetKeychainItemsAfterProtocolChange:(id)arg1 newConfiguration:(id)arg2;
- (void)saveConfiguration:(id)arg1 withCompletionQueue:(id)arg2 handler:(id)arg3;
- (void)saveConfigurationToDisk:(id)arg1 currentSignature:(id)arg2 userUUID:(id)arg3 completionQueue:(id)arg4 completionHandler:(id)arg5;
- (id)saveConfigurationToDisk:(id)arg1 updateSCPreferences:(struct __SCPreferences { }*)arg2 currentSignature:(id)arg3 userUUID:(id)arg4;
- (void)sendRequest:(id)arg1 responseHandler:(id)arg2;
- (void)setChangedHandler:(id)arg1;
- (void)setChangedNotifyToken:(int)arg1;
- (void)setChangedQueue:(id)arg1;
- (void)setChangedQueue:(id)arg1 andHandler:(id)arg2;
- (void)setCurrentIndex:(id)arg1;
- (void)setDecoder:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setGeneration:(long long)arg1;
- (void)setHasReadPermission:(bool)arg1;
- (void)setHasVPNAPIEntitlement:(bool)arg1;
- (void)setIsNEHelper:(bool)arg1;
- (void)setIsVPNPublicAPI:(bool)arg1;
- (void)setLoadedConfigurations:(id)arg1;
- (void)setLoadedIndex:(id)arg1;
- (void)setSCPreferencesSignature:(id)arg1;
- (void)syncWithSystemConfigurationWithAppNameCallback:(id)arg1 completionHandler:(id)arg2;
- (void)updateSCPreferencesSignatureOnDisk;
- (id)userUUID;

@end
