/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKContentView : UIView <UIGestureRecognizerDelegate, UITextInputPrivate, UIWKInteractionViewProtocol, UIWebFormAccessoryDelegate, UIWebTouchEventsGestureRecognizerDelegate, WKActionSheetAssistantDelegate, WKFileUploadPanelDelegate> {
    struct RetainPtr<WKActionSheetAssistant> { 
        void *m_ptr; 
    } _actionSheetAssistant;
    struct RetainPtr<WKAirPlayRoutePicker> { 
        void *m_ptr; 
    } _airPlayRoutePicker;
    struct AssistedNodeInformation { 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } elementRect; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } selectionRect; 
        double minimumScaleFactor; 
        double maximumScaleFactor; 
        double nodeFontSize; 
        bool hasNextNode; 
        bool hasPreviousNode; 
        bool isAutocorrect; 
        bool isMultiSelect; 
        bool isReadOnly; 
        bool allowsUserScaling; 
        bool insideFixedPosition; 
        int autocapitalizeType; 
        int elementType; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } formAction; 
        struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow> { 
            struct OptionItem {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } selectOptions; 
        int selectedIndex; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } value; 
        double valueAsNumber; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
    } _assistedNodeInformation;
    /* Warning: unhandled struct encoding: '{WKAutoCorrectionData="fontName"{String="m_impl"{RefPtr<WTF::StringImpl>="m_ptr"^{StringImpl}}}"fontSize"d"fontTraits"Q"textFirstRect"{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}"textLastRect"{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}"autocorrectionHandler"@?"autocorrectionContextHandler"@?}' */ struct WKAutoCorrectionData { 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } fontName; 
        double fontSize; 
        unsigned long long fontTraits; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } textFirstRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } textLastRect; 
        id autocorrectionHandler; 
    } _autocorrectionData;
    struct RetainPtr<WKBrowsingContextController> { 
        void *m_ptr; 
    } _browsingContextController;
    bool _canSendTouchEventsAsynchronously;
    bool _didAccessoryTabInitiateFocus;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    } _doubleTapGestureRecognizer;
    struct RetainPtr<WKFileUploadPanel> { 
        void *m_ptr; 
    } _fileUploadPanel;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _fixedClippingView;
    struct RetainPtr<UIWebFormAccessory> { 
        void *m_ptr; 
    } _formAccessoryView;
    struct RetainPtr<WKFormInputSession> { 
        void *m_ptr; 
    } _formInputSession;
    bool _hasTapHighlightForPotentialTap;
    bool _hasValidPositionInformation;
    bool _highlightLongPressCanClick;
    struct RetainPtr<_UIWebHighlightLongPressGestureRecognizer> { 
        void *m_ptr; 
    } _highlightLongPressGestureRecognizer;
    struct RetainPtr<_UIHighlightView> { 
        void *m_ptr; 
    } _highlightView;
    struct HistoricalVelocityData { 
        unsigned int m_historySize; 
        unsigned int m_latestDataIndex; 
        double m_lastAppendTimestamp; 
        struct Data { 
            double timestamp; 
            struct CGPoint { 
                double x; 
                double y; 
            } position; 
            double scale; 
        } m_history[3]; 
    } _historicalKinematicData;
    <UITextInputDelegate> *_inputDelegate;
    struct RetainPtr<NSObject<WKFormPeripheral> > { 
        void *m_ptr; 
    } _inputPeripheral;
    struct RetainPtr<WKInspectorHighlightView> { 
        void *m_ptr; 
    } _inspectorHighlightView;
    struct RetainPtr<WKInspectorIndicationView> { 
        void *m_ptr; 
    } _inspectorIndicationView;
    bool _inspectorNodeSearchEnabled;
    struct RetainPtr<WKInspectorNodeSearchGestureRecognizer> { 
        void *m_ptr; 
    } _inspectorNodeSearchGestureRecognizer;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _interactionViewsContainerView;
    bool _isBackground;
    bool _isEditable;
    bool _isTapHighlightIDValid;
    struct CGPoint { 
        double x; 
        double y; 
    } _lastInteractionLocation;
    struct WKSelectionDrawingInfo { 
        int type; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } caretRect; 
        struct Vector<WebCore::SelectionRect, 0, WTF::CrashOnOverflow> { 
            struct SelectionRect {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } selectionRects; 
    } _lastSelectionDrawingInfo;
    unsigned long long _latestTapHighlightID;
    struct RetainPtr<UILongPressGestureRecognizer> { 
        void *m_ptr; 
    } _longPressGestureRecognizer;
    struct RetainPtr<NSString> { 
        void *m_ptr; 
    } _markedText;
    struct RefPtr<WebKit::WebPageProxy> { 
        struct WebPageProxy {} *m_ptr; 
    } _page;
    struct unique_ptr<WebKit::PageClientImpl, std::__1::default_delete<WebKit::PageClientImpl> > { 
        struct __compressed_pair<WebKit::PageClientImpl *, std::__1::default_delete<WebKit::PageClientImpl> > { 
            struct PageClientImpl {} *__first_; 
        } __ptr_; 
    } _pageClient;
    struct InteractionInformationAtPosition { 
        struct IntPoint { 
            int m_x; 
            int m_y; 
        } point; 
        bool nodeAtPositionIsAssistedNode; 
        bool isSelectable; 
        bool isNearMarkedText; 
        bool touchCalloutEnabled; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } clickableElementName; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } url; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } bounds; 
        struct RefPtr<WebKit::ShareableBitmap> { 
            struct ShareableBitmap {} *m_ptr; 
        } image; 
    } _positionInformation;
    bool _potentialTapInProgress;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _rootContentView;
    bool _selectionNeedsUpdate;
    bool _shouldRestoreSelection;
    bool _showingTextStyleOptions;
    struct RetainPtr<WKSyntheticClickTapGestureRecognizer> { 
        void *m_ptr; 
    } _singleTapGestureRecognizer;
    struct unique_ptr<WebKit::SmartMagnificationController, std::__1::default_delete<WebKit::SmartMagnificationController> > { 
        struct __compressed_pair<WebKit::SmartMagnificationController *, std::__1::default_delete<WebKit::SmartMagnificationController> > { 
            struct SmartMagnificationController {} *__first_; 
        } __ptr_; 
    } _smartMagnificationController;
    struct TapHighlightInformation { 
        struct Color { 
            unsigned int m_color; 
            bool m_valid; 
        } color; 
        struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow> { 
            struct FloatQuad {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } quads; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } topLeftRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } topRightRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } bottomLeftRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } bottomRightRadius; 
    } _tapHighlightInformation;
    struct RetainPtr<UIWKTextInteractionAssistant> { 
        void *m_ptr; 
    } _textSelectionAssistant;
    struct RetainPtr<UIWebTouchEventsGestureRecognizer> { 
        void *m_ptr; 
    } _touchEventGestureRecognizer;
    struct RetainPtr<UITextInputTraits> { 
        void *m_ptr; 
    } _traits;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    } _twoFingerDoubleTapGestureRecognizer;
    struct RetainPtr<NSUndoManager> { 
        void *m_ptr; 
    } _undoManager;
    bool _usingGestureForSelection;
    struct RetainPtr<UIWKSelectionAssistant> { 
        void *m_ptr; 
    } _webSelectionAssistant;
    WKWebView *_webView;
}

@property(assign,readwrite) bool acceptsEmoji;
@property(assign,readwrite) bool acceptsFloatingKeyboard;
@property(assign,readwrite) bool acceptsSplitKeyboard;
@property(assign,readonly) const struct AssistedNodeInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_2_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_2_1_2; } x2; double x3; double x4; double x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; int x13; int x14; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_15_1_1; } x15; /* Warning: unhandled struct encoding: '{Vector<WebKit::OptionItem' */ struct x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; char *x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; in void*x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; id x120; void*x121; void*x122; void*x123; void*x124; void*x125; void*x126; void*x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; bycopy void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; void*x214; void*x215; void*x216; void*x217; void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; void*x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; inout void*x304; void*x305; void*x306; void*x307; void*x308; void*x309; void*x310; void*x311; void*x312; void*x313; void*x314; void*x315; void*x316; void*x317; void*x318; void*x319; void*x320; void x321; void*x322; void*x323; void*x324; void*x325; void*x326; char **x327; void x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; char *x335; void x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void x352; void*x353; void*x354; void*x355; void*x356; void*x357; out void*x358; void x359; void*x360; void*x361; void*x362; void*x363; void*x364; void*x365; void*x366; void x367; void*x368; void*x369; void*x370; void*x371; void*x372; void*x373; void*x374; short x375; void*x376; void*x377; void*x378; void*x379; id x380; void*x381; void*x382; short x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; void*x401; void*x402; void*x403; void*x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; void*x454; void*x455; void*x456; void*x457; void*x458; void*x459; void*x460; void*x461; void*x462; void*x463; void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; void*x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; void*x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; void*x523; void*x524; void*x525; void*x526; void*x527; void*x528; void*x529; void*x530; void*x531; void*x532; void*x533; void*x534; void*x535; void*x536; void*x537; void*x538; void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; void*x545; void*x546; void*x547; void*x548; void*x549; void*x550; void*x551; void*x552; void*x553; void*x554; void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; void*x561; void*x562; void*x563; void*x564; void*x565; void*x566; void*x567; void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; void*x597; void*x598; void*x599; void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; void*x611; void*x612; void*x613; void*x614; void*x615; void*x616; void*x617; void*x618; void*x619; void*x620; void*x621; void*x622; void*x623; void*x624; void*x625; void*x626; void*x627; void*x628; void*x629; void*x630; void*x631; void*x632; void*x633; void*x634; void*x635; void*x636; void*x637; void*x638; void*x639; void*x640; void*x641; void*x642; void*x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; void*x652; void*x653; void*x654; void*x655; void*x656; void*x657; void*x658; void*x659; void*x660; void*x661; void*x662; void*x663; out void*x664; int x665; void*x666; in void*x667; void*x668; void*x669; void*x670; void*x671; struct x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; void*x684; void*x685; void*x686; void*x687; void*x688; void*x689; void*x690; void*x691; void*x692; void*x693; void*x694; void*x695; void*x696; void*x697; void*x698; void*x699; void*x700; void*x701; void*x702; void*x703; void*x704; void*x705; void*x706; void*x707; void*x708; void*x709; void*x710; void*x711; void*x712; void*x713; void*x714; void*x715; void*x716; void*x717; double x718; void*x719; out void*x720; void*x721; void*x722; unsigned int x723/* : ? */; void*x724; long x725; void*x726; void*x727; void*x728; void*x729; void*x730; void*x731; void*x732; void*x733; void*x734; void*x735; void*x736; void*x737; void*x738; void*x739; void*x740; void*x741; void*x742; void*x743; void*x744; void*x745; void*x746; void*x747; void*x748; void*x749; void*x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; void*x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void*x767; void*x768; void*x769; void*x770; void*x771; void*x772; void*x773; void*x774; void*x775; void*x776; void*x777; void*x778; double x779; void*x780; out void*x781; void*x782; void*x783; unsigned int x784/* : ? */; void*x785; long x786; void*x787; void*x788; void*x789; void*x790; void*x791; void*x792; void*x793; void*x794; void*x795; void*x796; void*x797; void*x798; void*x799; void*x800; void*x801; void*x802; void*x803; void*x804; void*x805; void*x806; void*x807; void*x808; void*x809; void*x810; void*x811; void*x812; void*x813; void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; void*x824; void*x825; void*x826; void*x827; void*x828; void*x829; void*x830; void*x831; }* assistedNodeInformation; /* unknown property attribute:  WTF::CrashOnOverflow>=^{OptionItem}II}i{String={RefPtr<WTF::StringImpl>=^{StringImpl}}}d{String={RefPtr<WTF::StringImpl>=^{StringImpl}}}} */
@property(assign,readwrite) long long autocapitalizationType;
@property(assign,copy) NSString * autocorrectionContext;
@property(assign,readonly) const struct WKAutoCorrectionData { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_1_1_1; } x1; double x2; unsigned long long x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_5_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_5_1_2; } x5; id x6; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x7; id x8; void*x9; }* autocorrectionData;
@property(assign,readwrite) long long autocorrectionType;
@property(assign,readonly) UITextPosition * beginningOfDocument;
@property(assign,readonly) WKBrowsingContextController * browsingContextController;
@property(assign,readwrite) bool contentsIsSingleValue;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) bool deferBecomingResponder;
@property(assign,copy) NSString * description;
@property(assign,readwrite) bool disablePrediction;
@property(assign,readwrite) bool displaySecureTextUsingPlainText;
@property(assign,readwrite) int emptyContentReturnKeyType;
@property(assign,readwrite) bool enablesReturnKeyAutomatically;
@property(assign,readwrite) bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(assign,readonly) UITextPosition * endOfDocument;
@property(assign,readwrite) bool forceEnableDictation;
@property(assign,readonly) UIWebFormAccessory * formAccessoryView;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) <UITextInputDelegate> * inputDelegate;
@property(assign,retain) UIColor * insertionPointColor;
@property(assign,readwrite) unsigned long long insertionPointWidth;
@property(assign,readonly) UITextInteractionAssistant * interactionAssistant;
@property(assign,readonly) bool isAssistingNode;
@property(assign,readonly) bool isBackground;
@property(assign,readonly) bool isEditable;
@property(assign,readwrite) bool isSingleLineDocument;
@property(assign,readwrite) long long keyboardAppearance;
@property(assign,readwrite) long long keyboardType;
@property(assign,readonly) struct CGPoint { double x1; double x2; } lastInteractionLocation;
@property(assign,readwrite) bool learnsCorrections;
@property(assign,readonly) UITextRange * markedTextRange;
@property(assign,copy) NSDictionary * markedTextStyle;
@property(assign,readonly) struct WebPageProxy { int (**x1)(); id x2; int (**x3)(); int (**x4)(); int (**x5)(); struct PageClient {} *x6; /* Warning: unhandled struct encoding: '{unique_ptr<API::LoaderClient' */ struct x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; SEL x38; SEL x39; void*x40; void*x41; short x42; void*x43; void*x44; const void*x45; int x46; void*x47; short x48; void*x49; void*x50; void*x51; unsigned int x52/* : ? */; void*x53; int x54; void*x55; SEL x56; SEL x57; void*x58; void*x59; unsigned int x60/* : ? */; void*x61; const void*x62; float x63; void*x64; const void*x65; in BOOL x66; void*x67; short x68; unsigned short x69; void*x70; out const void*x71; SEL x72; SEL x73; oneway void*x74; long x75; void*x76; void*x77; void*x78; void*x79; void*x80; SEL x81; SEL x82; void*x83; void*x84; void*x85; oneway void*x86; long x87; void*x88; void*x89; void*x90; void*x91; int x92; const void*x93; const void*x94; int x95; void*x96; short x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; unsigned short x121; void*x122; short x123; void*x124; void*x125; void*x126; void*x127; unsigned long x128; int x129; unsigned int x130/* : ? */; const void*x131; const void*x132; void*x133; void*x134; const int x135; void x136; void*x137; void*x138; void*x139; void*x140; const void*x141; void*x142; void*x143; void*x144; out const void*x145; short x146; void*x147; unsigned char x148; void*x149; long x150; void*x151; short x152; void*x153; int x154; void*x155; long x156; void*x157; float x158; const void*x159; void*x160; void*x161; void*x162; out const void*x163; void*x164; unsigned char x165; void*x166; long x167; void*x168; short x169; void*x170; int x171; void*x172; long x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; unsigned short x208; void*x209; short x210; void*x211; void*x212; void*x213; void*x214; unsigned long x215; int x216; unsigned int x217/* : ? */; const void*x218; const void*x219; void*x220; void*x221; const int x222; void x223; void*x224; void*x225; void*x226; void*x227; const void*x228; void*x229; void*x230; void*x231; out const void*x232; short x233; void*x234; bool x235; void*x236; short x237; void*x238; bool x239; out void*x240; const double x241; void*x242; float x243; const void*x244; void*x245; void*x246; void*x247; out const void*x248; void*x249; bool x250; void*x251; short x252; void*x253; bool x254; out void*x255; const double x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; void*x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; void*x276; void*x277; void*x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; void*x289; unsigned short x290; void*x291; short x292; void*x293; void*x294; void*x295; void*x296; unsigned long x297; int x298; unsigned int x299/* : ? */; const void*x300; const void*x301; void*x302; void*x303; const int x304; void x305; void*x306; void*x307; void*x308; void*x309; const void*x310; void*x311; void*x312; void*x313; out const void*x314; short x315; void*x316; unsigned short x317; void*x318; out const void*x319; void*x320; int x321; void*x322; void*x323; unsigned int x324; void*x325; float x326; const void*x327; void*x328; void*x329; void*x330; out const void*x331; void*x332; unsigned short x333; void*x334; out const void*x335; void*x336; int x337; void*x338; void*x339; unsigned int x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; void*x354; void*x355; void*x356; void*x357; void*x358; void*x359; void*x360; void*x361; void*x362; void*x363; Class x364; void*x365; void*x366; void*x367; void*x368; void*x369; void*x370; unsigned char x371; void*x372; unsigned short x373; void*x374; short x375; void*x376; void*x377; void*x378; void*x379; unsigned long x380; int x381; unsigned int x382/* : ? */; const void*x383; const void*x384; void*x385; void*x386; const int x387; void x388; void*x389; void*x390; void*x391; void*x392; const void*x393; void*x394; void*x395; void*x396; out const void*x397; short x398; void*x399; oneway int x400; double x401; void*x402; out void*x403; void*x404; long x405; out void*x406; double x407; void*x408; float x409; const void*x410; void*x411; void*x412; void*x413; out const void*x414; void*x415; oneway int x416; double x417; void*x418; out void*x419; void*x420; long x421; out void*x422; double x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; void*x435; void*x436; void*x437; void*x438; void*x439; void*x440; void*x441; void*x442; void*x443; void*x444; void*x445; void*x446; void*x447; void*x448; void*x449; void*x450; void*x451; void*x452; void*x453; unsigned short x454; void*x455; short x456; void*x457; void*x458; void*x459; void*x460; unsigned long x461; int x462; unsigned int x463/* : ? */; const void*x464; const void*x465; void*x466; void*x467; const int x468; void x469; void*x470; void*x471; void*x472; void*x473; const void*x474; void*x475; void*x476; void*x477; out const void*x478; short x479; void*x480; unsigned char x481; long x482; out void*x483; double x484; long doublex485; out BOOL x486; short x487; long doublex488; void*x489; void*x490; void*x491; out in void*x492; float x493; const void*x494; void*x495; void*x496; void*x497; out const void*x498; void*x499; unsigned char x500; long x501; out void*x502; double x503; long doublex504; out BOOL x505; short x506; long doublex507; void*x508; void*x509; void*x510; out in void*x511; void*x512; void*x513; void*x514; void*x515; void*x516; void*x517; void*x518; void*x519; void*x520; void*x521; void*x522; void*x523; void*x524; void*x525; void*x526; void*x527; void*x528; void*x529; void*x530; unsigned char x531; void*x532; unsigned short x533; void*x534; short x535; void*x536; void*x537; void*x538; void*x539; unsigned long x540; int x541; unsigned int x542/* : ? */; const void*x543; const void*x544; void*x545; void*x546; const int x547; void x548; void*x549; void*x550; void*x551; void*x552; const void*x553; void*x554; void*x555; void*x556; out const void*x557; short x558; void*x559; int x560; void*x561; out const void*x562; unsigned int x563; void*x564; void*x565; out const void*x566; void*x567; float x568; const void*x569; void*x570; void*x571; void*x572; out const void*x573; void*x574; int x575; void*x576; out const void*x577; unsigned int x578; void*x579; void*x580; out const void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; void*x593; void*x594; void*x595; void*x596; void*x597; void*x598; void*x599; void*x600; void*x601; void*x602; void*x603; void*x604; void*x605; void*x606; void*x607; void*x608; void*x609; void*x610; unsigned short x611; void*x612; short x613; void*x614; void*x615; void*x616; void*x617; unsigned long x618; int x619; unsigned int x620/* : ? */; const void*x621; const void*x622; void*x623; void*x624; const int x625; void x626; void*x627; void*x628; void*x629; void*x630; const void*x631; void*x632; void*x633; void*x634; out const void*x635; short x636; void*x637; bycopy float x638; float x639; int x640; BOOL x641; void*x642; unsigned int x643; void*x644; void*x645; out const void*x646; void*x647; float x648; const void*x649; void*x650; void*x651; void*x652; out const void*x653; void*x654; bycopy float x655; float x656; int x657; BOOL x658; void*x659; unsigned int x660; void*x661; void*x662; out const void*x663; void*x664; void*x665; void*x666; void*x667; void*x668; void*x669; void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; void*x676; void*x677; void*x678; void*x679; void*x680; void*x681; void*x682; void*x683; void*x684; void*x685; void*x686; void*x687; void*x688; void*x689; void*x690; void*x691; unsigned short x692; void*x693; short x694; void*x695; void*x696; void*x697; void*x698; unsigned long x699; int x700; unsigned int x701/* : ? */; const void*x702; const void*x703; void*x704; void*x705; const int x706; void x707; void*x708; void*x709; void*x710; void*x711; const void*x712; void*x713; void*x714; void*x715; out const void*x716; short x717; void*x718; void*x719; void*x720; unsigned int x721/* : ? */; void*x722; int x723; void*x724; unsigned long x725; void*x726; void*x727; void*x728; BOOL x729; void*x730; void*x731; float x732; const void*x733; void*x734; void*x735; void*x736; out const void*x737; void*x738; void*x739; void*x740; unsigned int x741/* : ? */; void*x742; int x743; void*x744; unsigned long x745; void*x746; void*x747; void*x748; BOOL x749; void*x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; void*x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void*x767; void*x768; void*x769; void*x770; void*x771; void*x772; void*x773; void*x774; void*x775; void*x776; unsigned char x777; void*x778; unsigned short x779; void*x780; short x781; void*x782; void*x783; void*x784; void*x785; unsigned long x786; int x787; unsigned int x788/* : ? */; const void*x789; const void*x790; void*x791; void*x792; const int x793; void x794; void*x795; void*x796; void*x797; void*x798; const void*x799; void*x800; void*x801; void*x802; out const void*x803; short x804; void*x805; int x806; void*x807; out const void*x808; unsigned int x809; void*x810; void*x811; out const void*x812; void*x813; float x814; const void*x815; void*x816; void*x817; void*x818; out const void*x819; void*x820; int x821; void*x822; out const void*x823; unsigned int x824; void*x825; void*x826; out const void*x827; void*x828; void*x829; void*x830; void*x831; void*x832; void*x833; void*x834; void*x835; void*x836; void*x837; void*x838; void*x839; void*x840; void*x841; void*x842; void*x843; void*x844; void*x845; void*x846; void*x847; void*x848; void*x849; void*x850; void*x851; void*x852; void*x853; void*x854; void*x855; void*x856; void*x857; unsigned short x858; void*x859; short x860; void*x861; void*x862; void*x863; void*x864; unsigned long x865; int x866; unsigned int x867/* : ? */; const void*x868; const void*x869; void*x870; void*x871; const int x872; void x873; void*x874; void*x875; void*x876; void*x877; const void*x878; void*x879; void*x880; void*x881; out const void*x882; short x883; void*x884; unsigned short x885; void*x886; unsigned int x887/* : ? */; void*x888; void*x889; BOOL x890; void*x891; short x892; void*x893; float x894; const void*x895; void*x896; void*x897; void*x898; out const void*x899; void*x900; unsigned short x901; void*x902; unsigned int x903/* : ? */; void*x904; void*x905; BOOL x906; void*x907; short x908; void*x909; void*x910; void*x911; void*x912; void*x913; void*x914; void*x915; void*x916; void*x917; void*x918; void*x919; void*x920; void*x921; void*x922; void*x923; void*x924; void*x925; void*x926; void*x927; void*x928; void*x929; void*x930; void*x931; void*x932; void*x933; void*x934; void*x935; void*x936; void*x937; void*x938; void*x939; void*x940; unsigned char x941; void*x942; unsigned short x943; void*x944; short x945; void*x946; void*x947; void*x948; void*x949; unsigned long x950; int x951; unsigned int x952/* : ? */; const void*x953; const void*x954; void*x955; void*x956; const void*x957; void*x958; void*x959; void*x960; out const void*x961; short x962; void*x963; void*x964; void*x965; out void*x966; in double x967; void*x968; void*x969; int x970; out in void*x971; float x972; const void*x973; void*x974; void*x975; void*x976; out const void*x977; void*x978; long x979; int x980; unsigned int x981/* : ? */; void*x982; void*x983; void*x984; double x985; int x986; out void*x987; double x988; void*x989; long x990; int x991; unsigned int x992/* : ? */; void*x993; void*x994; void*x995; void*x996; void*x997; void*x998; void*x999; void*x1000; void*x1001; void*x1002; void*x1003; void*x1004; void*x1005; void*x1006; void*x1007; void*x1008; void*x1009; void*x1010; void*x1011; void*x1012; void*x1013; void*x1014; void*x1015; void*x1016; void*x1017; void*x1018; void*x1019; void*x1020; void*x1021; unsigned short x1022; void*x1023; short x1024; void*x1025; void*x1026; void*x1027; void*x1028; unsigned long x1029; int x1030; unsigned int x1031/* : ? */; const void*x1032; const void*x1033; void*x1034; void*x1035; const int x1036; void x1037; void*x1038; void*x1039; void*x1040; void*x1041; const void*x1042; void*x1043; void*x1044; void*x1045; out const void*x1046; short x1047; void*x1048; oneway void*x1049; BOOL x1050; void*x1051; out const void*x1052; int x1053; void*x1054; void*x1055; float x1056; const void*x1057; void*x1058; void*x1059; void*x1060; out const void*x1061; void*x1062; oneway void*x1063; BOOL x1064; void*x1065; out const void*x1066; int x1067; void*x1068; void*x1069; void*x1070; void*x1071; void*x1072; void*x1073; void*x1074; void*x1075; void*x1076; void*x1077; void*x1078; void*x1079; void*x1080; void*x1081; void*x1082; void*x1083; void*x1084; void*x1085; void*x1086; void*x1087; void*x1088; void*x1089; void*x1090; void*x1091; void*x1092; void*x1093; union x1094; void*x1095; void*x1096; void*x1097; void*x1098; void*x1099; unsigned short x1100; void*x1101; short x1102; void*x1103; void*x1104; void*x1105; void*x1106; unsigned long x1107; int x1108; unsigned int x1109/* : ? */; const void*x1110; const void*x1111; void*x1112; void*x1113; const int x1114; void x1115; void*x1116; void*x1117; void*x1118; void*x1119; const void*x1120; void*x1121; void*x1122; void*x1123; out const void*x1124; short x1125; void*x1126; bycopy float x1127; float x1128; int x1129; BOOL x1130; void*x1131; unsigned int x1132; void*x1133; void*x1134; out const void*x1135; void*x1136; float x1137; const void*x1138; void*x1139; void*x1140; void*x1141; out const void*x1142; void*x1143; bycopy float x1144; float x1145; int x1146; BOOL x1147; void*x1148; unsigned int x1149; void*x1150; void*x1151; out const void*x1152; void*x1153; void*x1154; void*x1155; void*x1156; void*x1157; void*x1158; void*x1159; void*x1160; void*x1161; void*x1162; void*x1163; void*x1164; void*x1165; void*x1166; void*x1167; void*x1168; void*x1169; void*x1170; void*x1171; void*x1172; void*x1173; void*x1174; void*x1175; void*x1176; void*x1177; void*x1178; void*x1179; void*x1180; unsigned short x1181; void*x1182; short x1183; void*x1184; void*x1185; void*x1186; void*x1187; unsigned long x1188; int x1189; unsigned int x1190/* : ? */; const void*x1191; const void*x1192; void*x1193; void*x1194; const int x1195; void x1196; void*x1197; void*x1198; void*x1199; void*x1200; const void*x1201; void*x1202; void*x1203; void*x1204; out const void*x1205; short x1206; void*x1207; void*x1208; unsigned int x1209; void*x1210; out void*x1211; in double x1212; void*x1213; void*x1214; int x1215; out in void*x1216; float x1217; const void*x1218; void*x1219; void*x1220; void*x1221; out const void*x1222; void*x1223; void*x1224; unsigned int x1225; void*x1226; out void*x1227; in double x1228; void*x1229; void*x1230; int x1231; out in void*x1232; void*x1233; void*x1234; void*x1235; void*x1236; void*x1237; void*x1238; void*x1239; void*x1240; void*x1241; void*x1242; void*x1243; void*x1244; void*x1245; void*x1246; void*x1247; void*x1248; void*x1249; void*x1250; void*x1251; void*x1252; void*x1253; void*x1254; void*x1255; void*x1256; void*x1257; void*x1258; unsigned short x1259; void*x1260; short x1261; void*x1262; void*x1263; void*x1264; void*x1265; unsigned long x1266; int x1267; unsigned int x1268/* : ? */; const void*x1269; const void*x1270; void*x1271; void*x1272; const int x1273; void x1274; void*x1275; void*x1276; void*x1277; void*x1278; const void*x1279; void*x1280; void*x1281; void*x1282; out const void*x1283; short x1284; void*x1285; unsigned short x1286; void*x1287; out const void*x1288; void*x1289; int x1290; void*x1291; void*x1292; unsigned int x1293; void*x1294; float x1295; const void*x1296; void*x1297; void*x1298; void*x1299; out const void*x1300; void*x1301; unsigned short x1302; void*x1303; out const void*x1304; void*x1305; int x1306; void*x1307; void*x1308; unsigned int x1309; void*x1310; void*x1311; void*x1312; void*x1313; void*x1314; void*x1315; void*x1316; void*x1317; void*x1318; void*x1319; void*x1320; void*x1321; void*x1322; void*x1323; void*x1324; void*x1325; void*x1326; void*x1327; void*x1328; void*x1329; void*x1330; void*x1331; void*x1332; void*x1333; void*x1334; void*x1335; void*x1336; void*x1337; void*x1338; void*x1339; long doublex1340; void*x1341; BOOL x1342; out in short x1343; void*x1344; const void*x1345; int x1346; in void*x1347; short x1348; void*x1349; void*x1350; int x1351; long x1352; long x1353; unsigned char x1354; void*x1355; void*x1356; in void*x1357; void*x1358; void*x1359; void*x1360; out const void*x1361; short x1362; int x1363; void*x1364; int x1365; in void*x1366; unsigned char x1367; out in short x1368; void*x1369; const void*x1370; int x1371; in void*x1372; short x1373; void*x1374; const void*x1375; void*x1376; void*x1377; out const unsigned char x1378; out in void*x1379; void*x1380; int x1381; in void*x1382; double x1383; oneway int x1384; void*x1385; void*x1386; SEL x1387; void*x1388; void*x1389; void*x1390; void*x1391; void*x1392; void*x1393; void*x1394; void*x1395; void*x1396; void*x1397; void*x1398; void*x1399; void*x1400; void*x1401; void*x1402; void*x1403; void*x1404; void*x1405; void*x1406; void*x1407; union x1408; void*x1409; void*x1410; void*x1411; unsigned char x1412; void*x1413; unsigned short x1414; void*x1415; short x1416; void*x1417; void*x1418; void*x1419; void*x1420; unsigned long x1421; int x1422; unsigned int x1423/* : ? */; const void*x1424; const void*x1425; void*x1426; void*x1427; const int x1428; void x1429; void*x1430; void*x1431; void*x1432; void*x1433; const void*x1434; void*x1435; void*x1436; void*x1437; out const void*x1438; short x1439; void*x1440; int x1441; void*x1442; out const void*x1443; unsigned int x1444; void*x1445; void*x1446; out const void*x1447; void*x1448; float x1449; const void*x1450; void*x1451; void*x1452; void*x1453; out const void*x1454; void*x1455; int x1456; void*x1457; out const void*x1458; unsigned int x1459; void*x1460; void*x1461; out const void*x1462; void*x1463; void*x1464; void*x1465; void*x1466; void*x1467; void*x1468; void*x1469; void*x1470; void*x1471; void*x1472; void*x1473; void*x1474; void*x1475; void*x1476; void*x1477; void*x1478; void*x1479; void*x1480; void*x1481; void*x1482; void*x1483; char *x1484; void*x1485; void*x1486; void*x1487; void*x1488; void*x1489; void*x1490; void*x1491; void*x1492; unsigned short x1493; void*x1494; short x1495; void*x1496; void*x1497; void*x1498; void*x1499; unsigned long x1500; int x1501; unsigned int x1502/* : ? */; const void*x1503; const void*x1504; void*x1505; void*x1506; const int x1507; void x1508; void*x1509; void*x1510; void*x1511; void*x1512; const void*x1513; void*x1514; void*x1515; void*x1516; out const void*x1517; short x1518; void*x1519; bycopy float x1520; float x1521; int x1522; BOOL x1523; void*x1524; unsigned int x1525; void*x1526; void*x1527; out const void*x1528; void*x1529; float x1530; const void*x1531; void*x1532; void*x1533; void*x1534; out const void*x1535; void*x1536; bycopy float x1537; float x1538; int x1539; BOOL x1540; void*x1541; unsigned int x1542; void*x1543; void*x1544; out const void*x1545; void*x1546; void*x1547; void*x1548; void*x1549; void*x1550; void*x1551; void*x1552; void*x1553; void*x1554; void*x1555; void*x1556; void*x1557; void*x1558; void*x1559; void*x1560; void*x1561; void*x1562; void*x1563; void*x1564; void*x1565; void*x1566; void*x1567; void*x1568; void*x1569; void*x1570; void*x1571; id x1572; void*x1573; unsigned short x1574; void*x1575; short x1576; void*x1577; void*x1578; void*x1579; void*x1580; unsigned long x1581; int x1582; unsigned int x1583/* : ? */; const void*x1584; const void*x1585; void*x1586; void*x1587; const void*x1588; void*x1589; void*x1590; void*x1591; out const void*x1592; short x1593; void*x1594; double x1595; double x1596; const void*x1597; short x1598; short x1599; bool x1600; out out void*x1601; void*x1602; unsigned int x1603; void*x1604; float x1605; const void*x1606; void*x1607; void*x1608; void*x1609; out const void*x1610; void*x1611; double x1612; double x1613; const void*x1614; short x1615; short x1616; bool x1617; out out void*x1618; void*x1619; unsigned int x1620; void*x1621; void*x1622; void*x1623; void*x1624; void*x1625; void*x1626; void*x1627; void*x1628; void*x1629; void*x1630; void*x1631; void*x1632; void*x1633; void*x1634; void*x1635; void*x1636; void*x1637; void*x1638; void*x1639; void*x1640; void*x1641; void*x1642; void*x1643; void*x1644; void*x1645; void*x1646; void*x1647; void*x1648; void*x1649; void*x1650; void*x1651; unsigned char x1652; void*x1653; unsigned short x1654; void*x1655; short x1656; void*x1657; void*x1658; void*x1659; void*x1660; unsigned long x1661; int x1662; unsigned int x1663/* : ? */; const void*x1664; const void*x1665; void*x1666; void*x1667; const int x1668; void x1669; void*x1670; void*x1671; void*x1672; void*x1673; const void*x1674; void*x1675; void*x1676; void*x1677; out const void*x1678; short x1679; void*x1680; int x1681; void*x1682; out const void*x1683; unsigned int x1684; void*x1685; void*x1686; out const void*x1687; void*x1688; float x1689; const void*x1690; void*x1691; void*x1692; void*x1693; out const void*x1694; void*x1695; int x1696; void*x1697; out const void*x1698; unsigned int x1699; void*x1700; void*x1701; out const void*x1702; void*x1703; void*x1704; void*x1705; void*x1706; void*x1707; void*x1708; void*x1709; void*x1710; void*x1711; void*x1712; void*x1713; void*x1714; void*x1715; void*x1716; void*x1717; void*x1718; void*x1719; void*x1720; void*x1721; void*x1722; void*x1723; void*x1724; void*x1725; void*x1726; void*x1727; void*x1728; void*x1729; void*x1730; void*x1731; void*x1732; unsigned short x1733; void*x1734; short x1735; void*x1736; void*x1737; void*x1738; void*x1739; unsigned long x1740; int x1741; unsigned int x1742/* : ? */; const void*x1743; const void*x1744; void*x1745; void*x1746; const int x1747; void x1748; void*x1749; void*x1750; void*x1751; void*x1752; const void*x1753; void*x1754; void*x1755; void*x1756; out const void*x1757; short x1758; void*x1759; int x1760; const void*x1761; out const void*x1762; short x1763; short x1764; int x1765; short x1766; void*x1767; void*x1768; in void*x1769; void*x1770; float x1771; const void*x1772; void*x1773; void*x1774; void*x1775; out const void*x1776; void*x1777; int x1778; const void*x1779; out const void*x1780; short x1781; short x1782; int x1783; short x1784; void*x1785; void*x1786; in void*x1787; void*x1788; void*x1789; void*x1790; void*x1791; void*x1792; void*x1793; void*x1794; void*x1795; void*x1796; void*x1797; id x1798; void*x1799; void*x1800; void*x1801; void*x1802; void*x1803; void*x1804; void*x1805; void*x1806; void*x1807; unsigned short x1808; void*x1809; short x1810; void*x1811; void*x1812; void*x1813; void*x1814; unsigned long x1815; int x1816; unsigned int x1817/* : ? */; const void*x1818; const void*x1819; void*x1820; void*x1821; const int x1822; void x1823; void*x1824; void*x1825; void*x1826; void*x1827; const void*x1828; void*x1829; void*x1830; void*x1831; out const void*x1832; short x1833; void*x1834; unsigned short x1835; void*x1836; unsigned int x1837/* : ? */; void*x1838; void*x1839; BOOL x1840; void*x1841; short x1842; void*x1843; float x1844; const void*x1845; void*x1846; void*x1847; void*x1848; out const void*x1849; void*x1850; unsigned short x1851; void*x1852; unsigned int x1853/* : ? */; void*x1854; void*x1855; BOOL x1856; void*x1857; short x1858; void*x1859; void*x1860; void*x1861; void*x1862; void*x1863; void*x1864; void*x1865; void*x1866; void*x1867; void*x1868; void*x1869; void*x1870; void*x1871; void*x1872; void*x1873; void*x1874; void*x1875; void*x1876; void*x1877; void*x1878; void*x1879; void*x1880; void*x1881; void*x1882; void*x1883; void*x1884; void*x1885; void*x1886; void*x1887; void*x1888; void*x1889; void*x1890; void*x1891; void*x1892; double x1893; void*x1894; out void*x1895; void*x1896; void*x1897; unsigned int x1898/* : ? */; void*x1899; long x1900; void*x1901; void*x1902; void*x1903; void*x1904; void*x1905; void*x1906; void*x1907; void*x1908; void*x1909; void*x1910; void*x1911; void*x1912; void*x1913; void*x1914; void*x1915; void*x1916; void*x1917; void*x1918; void*x1919; void*x1920; void*x1921; void*x1922; void*x1923; double x1924; void*x1925; out void*x1926; void*x1927; void*x1928; unsigned int x1929/* : ? */; void*x1930; long x1931; void*x1932; void*x1933; void*x1934; void*x1935; void*x1936; void*x1937; void*x1938; void*x1939; void*x1940; void*x1941; void*x1942; void*x1943; void*x1944; void*x1945; void*x1946; void*x1947; void*x1948; void*x1949; void*x1950; void*x1951; void*x1952; void*x1953; void*x1954; }* page; /* unknown property attribute:  WebKit::WebPreferencesStore::Value>}iiii}}IB} */
@property(assign,readonly) const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_10_1_1; } x10; }* positionInformation;
@property(assign,copy) NSString * responseContext;
@property(assign,readwrite) bool returnKeyGoesToNextResponder;
@property(assign,readwrite) long long returnKeyType;
@property(getter=isSecureTextEntry,assign,readwrite) bool secureTextEntry;
@property(assign,copy) UITextRange * selectedTextRange;
@property(assign,readwrite) long long selectionAffinity;
@property(assign,retain) UIColor * selectionBarColor;
@property(assign,retain) UIImage * selectionDragDotImage;
@property(assign,readwrite) long long selectionGranularity;
@property(assign,retain) UIColor * selectionHighlightColor;
@property(assign,readwrite) int shortcutConversionType;
@property(getter=isShowingInspectorIndication,assign,readwrite) bool showingInspectorIndication;
@property(assign,readwrite) long long spellCheckingType;
@property(assign,readonly) Class superclass;
@property(assign,readwrite) bool suppressReturnKeyStyling;
@property(assign,readonly) UIView * textInputView;
@property(assign,readwrite) int textLoupeVisibility;
@property(assign,readwrite) int textSelectionBehavior;
@property(assign,readwrite) id textSuggestionDelegate;
@property(assign,readwrite) struct __CFCharacterSet { }* textTrimmingSet;
@property(assign,readonly) <UITextInputTokenizer> * tokenizer;
@property(assign,readwrite) bool useInterfaceLanguageForLocalization;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_accessibilityRegisterUIProcessTokens;
- (SEL)_actionForLongPress;
- (void)_addDefaultGestureRecognizers;
- (void)_addShortcut:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_attemptClickAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_cancelInteraction;
- (void)_cancelLongPressGestureRecognizer;
- (unsigned int)_characterBeforeCaretSelection;
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;
- (void)_commitPotentialTapFailed;
- (struct unique_ptr<WebKit::DrawingAreaProxy, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct __compressed_pair<WebKit::DrawingAreaProxy *, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct DrawingAreaProxy {} *x_1_1_1; } x1; })_createDrawingAreaProxy;
- (void)_decidePolicyForGeolocationRequestFromOrigin:(struct WebSecurityOrigin { int (**x1)(); id x2; struct RefPtr<WebCore::SecurityOrigin> { struct SecurityOrigin {} *x_3_1_1; } x3; }*)arg1 frame:(struct WebFrameProxy { int (**x1)(); id x2; struct WebPageProxy {} *x3; struct FrameLoadState { int x_4_1_1; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_2_2_1; } x_4_1_2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_3_2_1; } x_4_1_3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_4_2_1; } x_4_1_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_5_2_1; } x_4_1_5; } x4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_5_1_1; } x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; bool x7; struct RefPtr<WebKit::WebCertificateInfo> { struct WebCertificateInfo {} *x_8_1_1; } x8; struct RefPtr<WebKit::WebFrameListenerProxy> { struct WebFrameListenerProxy {} *x_9_1_1; } x9; unsigned long long x10; struct unique_ptr<WebCore::ContentFilter, std::__1::default_delete<WebCore::ContentFilter> > { struct __compressed_pair<WebCore::ContentFilter *, std::__1::default_delete<WebCore::ContentFilter> > { struct ContentFilter {} *x_1_2_1; } x_11_1_1; } x11; }*)arg2 request:(struct GeolocationPermissionRequestProxy { int (**x1)(); id x2; struct GeolocationPermissionRequestManagerProxy {} *x3; unsigned long long x4; }*)arg3;
- (void)_define:(id)arg1;
- (void)_didCommitLayerTree:(const struct RemoteLayerTreeTransaction { unsigned long long x1; struct Vector<WTF::RefPtr<WebKit::PlatformCALayerRemote>, 0, WTF::CrashOnOverflow> { struct RefPtr<WebKit::PlatformCALayerRemote> {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_3_1_1; } x3; struct Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties, 0, WTF::CrashOnOverflow> { struct LayerCreationProperties {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_5_1_1; unsigned int x_5_1_2; unsigned int x_5_1_3; } x5; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_8_1_1; unsigned int x_8_1_2; unsigned int x_8_1_3; } x8; struct IntSize { int x_9_1_1; int x_9_1_2; } x9; struct Color { unsigned int x_10_1_1; bool x_10_1_2; } x10; double x11; double x12; double x13; unsigned long long x14; unsigned long long x15; bool x16; bool x17; }*)arg1;
- (void)_didCommitLoadForMainFrame;
- (void)_didEndScrollingOrZooming;
- (void)_didGetTapHighlightForRequest:(unsigned long long)arg1 color:(const struct Color { unsigned int x1; bool x2; }*)arg2 quads:(const struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow> { struct FloatQuad {} *x1; unsigned int x2; unsigned int x3; }*)arg3 topLeftRadius:(const struct IntSize { int x1; int x2; }*)arg4 topRightRadius:(const struct IntSize { int x1; int x2; }*)arg5 bottomLeftRadius:(const struct IntSize { int x1; int x2; }*)arg6 bottomRightRadius:(const struct IntSize { int x1; int x2; }*)arg7;
- (void)_didHandleKeyEvent:(id)arg1;
- (void)_didRelaunchProcess;
- (void)_didScroll;
- (void)_didUpdateBlockSelectionWithTouch:(int)arg1 withFlags:(int)arg2 growThreshold:(double)arg3 shrinkThreshold:(double)arg4;
- (void)_disableInspectorNodeSearch;
- (void)_displayFormNodeInputView;
- (void)_doubleTapRecognized:(id)arg1;
- (void)_enableInspectorNodeSearch;
- (void)_finishInteraction;
- (void)_hideInspectorHighlight;
- (void)_highlightLongPressRecognized:(id)arg1;
- (void)_inspectorNodeSearchRecognized:(id)arg1;
- (bool)_interpretKeyEvent:(id)arg1 isCharEvent:(bool)arg2;
- (void)_longPressRecognized:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_markedTextNSRange;
- (id)_moveDown:(bool)arg1 withHistory:(id)arg2;
- (id)_moveLeft:(bool)arg1 withHistory:(id)arg2;
- (id)_moveRight:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveUp:(bool)arg1 withHistory:(id)arg2;
- (void)_nextAccessoryTab:(id)arg1;
- (void)_overflowScrollingDidEnd;
- (void)_overflowScrollingWillBegin;
- (struct OpaqueWKPage { }*)_pageRef;
- (void)_positionInformationDidChange:(const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_10_1_1; } x10; }*)arg1;
- (void)_prevAccessoryTab:(id)arg1;
- (void)_processDidExit;
- (void)_promptForReplace:(id)arg1;
- (void)_reanalyze:(id)arg1;
- (void)_removeDefaultGestureRecognizers;
- (bool)_requiresKeyboardResetOnReload;
- (bool)_requiresKeyboardWhenFirstResponder;
- (void)_resetShowingTextStyle:(id)arg1;
- (bool)_scrollToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withOrigin:(struct CGPoint { double x1; double x2; })arg2 minimumScrollDistance:(double)arg3;
- (id)_scroller;
- (bool)_selectionAtDocumentStart;
- (void)_selectionChanged;
- (void)_setAcceleratedCompositingRootView:(id)arg1;
- (void)_setAccessibilityWebProcessToken:(id)arg1;
- (void)_showDataDetectorsSheet;
- (void)_showDictionary:(id)arg1;
- (void)_showImageSheet;
- (void)_showInspectorHighlight:(const struct Highlight { struct Color { unsigned int x_1_1_1; bool x_1_1_2; } x1; struct Color { unsigned int x_2_1_1; bool x_2_1_2; } x2; struct Color { unsigned int x_3_1_1; bool x_3_1_2; } x3; struct Color { unsigned int x_4_1_1; bool x_4_1_2; } x4; struct Color { unsigned int x_5_1_1; bool x_5_1_2; } x5; int x6; struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow> { struct FloatQuad {} *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; bool x8; }*)arg1;
- (void)_showLinkSheet;
- (void)_showPlaybackTargetPicker:(bool)arg1 fromRect:(const struct IntRect { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; struct IntSize { int x_2_1_1; int x_2_1_2; } x2; }*)arg2;
- (void)_showRunOpenPanel:(struct WebOpenPanelParameters { }*)arg1 resultListener:(struct WebOpenPanelResultListenerProxy { }*)arg2;
- (void)_showTapHighlight;
- (void)_showTextStyleOptions:(id)arg1;
- (void)_singleTapCommited:(id)arg1;
- (void)_singleTapDidReset:(id)arg1;
- (void)_singleTapRecognized:(id)arg1;
- (void)_startAssistingKeyboard;
- (void)_startAssistingNode:(const struct AssistedNodeInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_2_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_2_1_2; } x2; double x3; double x4; double x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; int x13; int x14; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_15_1_1; } x15; struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow> { struct OptionItem {} *x_16_1_1; unsigned int x_16_1_2; unsigned int x_16_1_3; } x16; int x17; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_18_1_1; } x18; double x19; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_20_1_1; } x20; }*)arg1 userIsInteracting:(bool)arg2 blurPreviousNode:(bool)arg3 userObject:(id)arg4;
- (void)_stopAssistingKeyboard;
- (void)_stopAssistingNode;
- (void)_transliterateChinese:(id)arg1;
- (void)_twoFingerDoubleTapRecognized:(id)arg1;
- (void)_updateAccessory;
- (void)_updateChangedSelection;
- (void)_updateChangedSelection:(bool)arg1;
- (void)_updateForScreen:(id)arg1;
- (void)_updateTapHighlight;
- (void)_webTouchEvent:(const struct NativeWebTouchEvent { unsigned int x1; unsigned int x2; double x3; struct Vector<WebKit::WebPlatformTouchPoint, 0, WTF::CrashOnOverflow> { struct WebPlatformTouchPoint {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct IntPoint { int x_5_1_1; int x_5_1_2; } x5; bool x6; bool x7; float x8; float x9; }*)arg1 preventsNativeGestures:(bool)arg2;
- (void)_webTouchEventsRecognized:(id)arg1;
- (void)_willStartScrollingOrZooming;
- (void)_windowDidMoveToScreenNotification:(id)arg1;
- (void)_zoomOutWithOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)_zoomToFocusRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 selectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 fontSize:(float)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 allowScaling:(bool)arg6 forceScroll:(bool)arg7;
- (bool)_zoomToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withOrigin:(struct CGPoint { double x1; double x2; })arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(double)arg6;
- (void)accessibilityRetrieveSpeakSelectionContent;
- (void)accessoryAutoFill;
- (void)accessoryClear;
- (void)accessoryDone;
- (void)accessoryTab:(bool)arg1;
- (struct RetainPtr<NSArray> { void *x1; })actionSheetAssistant:(id)arg1 decideActionsForElement:(id)arg2 defaultActions:(struct RetainPtr<NSArray> { void *x1; })arg3;
- (void)actionSheetAssistant:(id)arg1 openElementAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)actionSheetAssistant:(id)arg1 performAction:(int)arg2;
- (void)actionSheetAssistant:(id)arg1 willStartInteractionWithElement:(id)arg2;
- (void)actionSheetAssistantDidStopInteraction:(id)arg1;
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 withCompletionHandler:(id)arg3;
- (const struct AssistedNodeInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_2_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_2_1_2; } x2; double x3; double x4; double x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; int x13; int x14; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_15_1_1; } x15; struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow> { struct OptionItem {} *x_16_1_1; unsigned int x_16_1_2; unsigned int x_16_1_3; } x16; int x17; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_18_1_1; } x18; double x19; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_20_1_1; } x20; }*)assistedNodeInformation;
- (struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow> { struct OptionItem {} *x1; unsigned int x2; unsigned int x3; }*)assistedNodeSelectOptions;
- (const struct WKAutoCorrectionData { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_1_1_1; } x1; double x2; unsigned long long x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_5_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_5_1_2; } x5; id x6; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x7; id x8; void*x9; }*)autocorrectionData;
- (id)automaticallySelectedOverlay;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (bool)becomeFirstResponder;
- (void)beginSelectionChange;
- (id)beginningOfDocument;
- (id)browsingContextController;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)changeBlockSelectionWithTouchAt:(struct CGPoint { double x1; double x2; })arg1 withSelectionTouch:(long long)arg2 forHandle:(long long)arg3;
- (void)changeSelectionWithGestureAt:(struct CGPoint { double x1; double x2; })arg1 withGesture:(long long)arg2 withState:(long long)arg3;
- (void)changeSelectionWithTouchAt:(struct CGPoint { double x1; double x2; })arg1 withSelectionTouch:(long long)arg2 baseIsStart:(bool)arg3;
- (void)changeSelectionWithTouchesFrom:(struct CGPoint { double x1; double x2; })arg1 to:(struct CGPoint { double x1; double x2; })arg2 withGesture:(long long)arg3 withState:(long long)arg4;
- (unsigned short)characterBeforeCaretSelection;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (void)cleanupInteraction;
- (void)clearSelection;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)deleteBackward;
- (void)didFinishScrolling;
- (void)didInterruptScrolling;
- (void)didMoveToWindow;
- (void)didUpdateVisibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 unobscuredRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 unobscuredRectInScrollViewCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 scale:(double)arg4 minimumScale:(double)arg5 inStableState:(bool)arg6 isChangingObscuredInsetsInteractively:(bool)arg7;
- (void)didZoomToScale:(double)arg1;
- (id)endOfDocument;
- (void)endSelectionChange;
- (void)ensurePositionInformationIsUpToDate:(struct CGPoint { double x1; double x2; })arg1;
- (void)executeEditCommandWithCallback:(id)arg1;
- (void)fileUploadPanelDidDismiss:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (id)fontForCaretSelection;
- (id)formAccessoryView;
- (bool)gestureRecognizer:(id)arg1 canBePreventedByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 canPreventGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)handleKeyWebEvent:(id)arg1;
- (bool)hasContent;
- (bool)hasMarkedText;
- (bool)hasSelectablePositionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)hasSelection;
- (bool)hasText;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(struct WebContext { int (**x1)(); id x2; int (**x3)(); struct MessageReceiverMap { struct HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<IPC::StringReference, WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> >, IPC::StringReference::Hash, WTF::HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<IPC::StringReference> > { struct KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_1_2_1; } x_4_1_1; struct HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<std::__1::pair<IPC::StringReference, unsigned long long>, WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> >, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> > > { struct KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_2_2_1; } x_4_1_2; } x4; int x5; unsigned int x6; struct Vector<WTF::RefPtr<WebKit::WebProcessProxy>, 0, WTF::CrashOnOverflow> { struct RefPtr<WebKit::WebProcessProxy> {} *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; bool x8; struct WebProcessProxy {} *x9; struct Ref<WebKit::WebPageGroup> { struct WebPageGroup {} *x_10_1_1; } x10; struct RefPtr<API::Object> { struct Object {} *x_11_1_1; } x11; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_12_1_1; } x12; struct WebContextInjectedBundleClient { struct WKContextInjectedBundleClientV1 { struct WKContextInjectedBundleClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); } x_13_1_1; } x13; struct WebContextClient { struct WKContextClientV1 { struct WKContextClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); int (*x_1_2_5)(); } x_14_1_1; } x14; struct WebContextConnectionClient { struct WKContextConnectionClientV0 { struct WKContextConnectionClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); } x_15_1_1; } x15; struct unique_ptr<API::DownloadClient, std::__1::default_delete<API::DownloadClient> > { struct __compressed_pair<API::DownloadClient *, std::__1::default_delete<API::DownloadClient> > { struct DownloadClient {} *x_1_2_1; } x_16_1_1; } x16; struct unique_ptr<API::HistoryClient, std::__1::default_delete<API::HistoryClient> > { struct __compressed_pair<API::HistoryClient *, std::__1::default_delete<API::HistoryClient> > { struct HistoryClient {} *x_1_2_1; } x_17_1_1; } x17; struct RefPtr<WebKit::VisitedLinkProvider> { struct VisitedLinkProvider {} *x_18_1_1; } x18; bool x19; struct PlugInAutoStartProvider { struct WebContext {} *x_20_1_1; struct HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_2_2_1; } x_20_1_2; struct HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_3_2_1; } x_20_1_3; struct Vector<WTF::String, 0, WTF::CrashOnOverflow> { struct String {} *x_4_2_1; unsigned int x_4_2_2; unsigned int x_4_2_3; } x_20_1_4; } x20; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_21_1_1; } x21; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_22_1_1; } x22; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_23_1_1; } x23; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_24_1_1; } x24; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_25_1_1; } x25; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_26_1_1; } x26; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_27_1_1; } x27; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_28_1_1; } x28; bool x29; bool x30; struct Vector<std::__1::pair<WTF::String, WTF::RefPtr<API::Object> >, 0, WTF::CrashOnOverflow> { struct pair<WTF::String, WTF::RefPtr<API::Object> > {} *x_31_1_1; unsigned int x_31_1_2; unsigned int x_31_1_3; } x31; int x32; bool x33; double x34; struct RefPtr<WebKit::WebIconDatabase> { struct WebIconDatabase {} *x_35_1_1; } x35; struct RefPtr<WebKit::StorageManager> { struct StorageManager {} *x_36_1_1; } x36; struct HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > > { struct HashTable<const char *, WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > >, WTF::PtrHash<const char *>, WTF::HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > >::KeyValuePairTraits, WTF::HashTraits<const char *> > { struct KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_37_1_1; } x37; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_38_1_1; } x38; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_39_1_1; } x39; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_40_1_1; } x40; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_41_1_1; } x41; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_42_1_1; } x42; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_43_1_1; } x43; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_44_1_1; } x44; bool x45; bool x46; bool x47; struct RefPtr<WebKit::NetworkProcessProxy> { struct NetworkProcessProxy {} *x_48_1_1; } x48; struct RefPtr<WebKit::DatabaseProcessProxy> { struct DatabaseProcessProxy {} *x_49_1_1; } x49; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_50_1_1; } x50; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_51_1_1; } x51; bool x52; struct RetainPtr<NSMutableDictionary> { void *x_53_1_1; } x53; }*)arg2 configuration:(struct WebPageConfiguration { struct WebPageGroup {} *x1; struct WebPreferences {} *x2; struct WebUserContentControllerProxy {} *x3; struct VisitedLinkProvider {} *x4; struct Session {} *x5; struct WebPageProxy {} *x6; struct HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> >, WTF::StringHash, WTF::HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_7_1_1; } x7; })arg3 webView:(id)arg4;
- (id)inputAccessoryView;
- (id)inputDelegate;
- (id)inputView;
- (void)insertText:(id)arg1;
- (id)interactionAssistant;
- (double)inverseScale;
- (bool)isAnyTouchOverActiveArea:(id)arg1;
- (bool)isAssistingNode;
- (bool)isBackground;
- (bool)isEditable;
- (bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;
- (bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;
- (bool)isReplaceAllowed;
- (bool)isShowingInspectorIndication;
- (id)keyCommands;
- (struct CGPoint { double x1; double x2; })lastInteractionLocation;
- (id)markedText;
- (id)markedTextRange;
- (id)markedTextStyle;
- (id)metadataDictionariesForDictationResults;
- (void)moveBackward:(unsigned int)arg1;
- (void)moveByOffset:(long long)arg1;
- (void)moveForward:(unsigned int)arg1;
- (id)nextUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (struct WebPageProxy { int (**x1)(); id x2; int (**x3)(); int (**x4)(); int (**x5)(); struct PageClient {} *x6; struct unique_ptr<API::LoaderClient, std::__1::default_delete<API::LoaderClient> > { struct __compressed_pair<API::LoaderClient *, std::__1::default_delete<API::LoaderClient> > { struct LoaderClient {} *x_1_2_1; } x_7_1_1; } x7; struct unique_ptr<API::PolicyClient, std::__1::default_delete<API::PolicyClient> > { struct __compressed_pair<API::PolicyClient *, std::__1::default_delete<API::PolicyClient> > { struct PolicyClient {} *x_1_2_1; } x_8_1_1; } x8; struct unique_ptr<API::FormClient, std::__1::default_delete<API::FormClient> > { struct __compressed_pair<API::FormClient *, std::__1::default_delete<API::FormClient> > { struct FormClient {} *x_1_2_1; } x_9_1_1; } x9; struct unique_ptr<API::UIClient, std::__1::default_delete<API::UIClient> > { struct __compressed_pair<API::UIClient *, std::__1::default_delete<API::UIClient> > { struct UIClient {} *x_1_2_1; } x_10_1_1; } x10; struct unique_ptr<API::FindClient, std::__1::default_delete<API::FindClient> > { struct __compressed_pair<API::FindClient *, std::__1::default_delete<API::FindClient> > { struct FindClient {} *x_1_2_1; } x_11_1_1; } x11; struct WebFindMatchesClient { struct WKPageFindMatchesClientV0 { struct WKPageFindMatchesClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); } x_12_1_1; } x12; struct unique_ptr<WebKit::DrawingAreaProxy, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct __compressed_pair<WebKit::DrawingAreaProxy *, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct DrawingAreaProxy {} *x_1_2_1; } x_13_1_1; } x13; struct unique_ptr<WebKit::RemoteScrollingCoordinatorProxy, std::__1::default_delete<WebKit::RemoteScrollingCoordinatorProxy> > { struct __compressed_pair<WebKit::RemoteScrollingCoordinatorProxy *, std::__1::default_delete<WebKit::RemoteScrollingCoordinatorProxy> > { struct RemoteScrollingCoordinatorProxy {} *x_1_2_1; } x_14_1_1; } x14; struct Ref<WebKit::WebProcessProxy> { struct WebProcessProxy {} *x_15_1_1; } x15; struct Ref<WebKit::WebPageGroup> { struct WebPageGroup {} *x_16_1_1; } x16; struct Ref<WebKit::WebPreferences> { struct WebPreferences {} *x_17_1_1; } x17; struct RefPtr<WebKit::WebUserContentControllerProxy> { struct WebUserContentControllerProxy {} *x_18_1_1; } x18; struct Ref<WebKit::VisitedLinkProvider> { struct VisitedLinkProvider {} *x_19_1_1; } x19; struct RefPtr<WebKit::WebFrameProxy> { struct WebFrameProxy {} *x_20_1_1; } x20; struct RefPtr<WebKit::WebFrameProxy> { struct WebFrameProxy {} *x_21_1_1; } x21; struct RefPtr<WebKit::WebFrameProxy> { struct WebFrameProxy {} *x_22_1_1; } x22; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_23_1_1; } x23; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_24_1_1; } x24; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_25_1_1; } x25; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_26_1_1; } x26; struct RefPtr<WebKit::WebInspectorProxy> { struct WebInspectorProxy {} *x_27_1_1; } x27; struct RefPtr<WebKit::WebVideoFullscreenManagerProxy> { struct WebVideoFullscreenManagerProxy {} *x_28_1_1; } x28; struct VisibleContentRectUpdateInfo { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_29_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_29_1_2; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_29_1_3; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_4_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_4_2_2; } x_29_1_4; double x_29_1_5; bool x_29_1_6; bool x_29_1_7; double x_29_1_8; double x_29_1_9; double x_29_1_10; double x_29_1_11; unsigned long long x_29_1_12; } x29; bool x30; unsigned long long x31; int x32; bool x33; bool x34; unsigned long long x35; unsigned long long x36; struct CallbackMap { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::CallbackBase>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::CallbackBase> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::CallbackBase> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::CallbackBase> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::CallbackBase>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::CallbackBase> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::CallbackBase> > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_1_2_1; } x_37_1_1; } x37; struct HashSet<unsigned long long, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long> > { struct HashTable<unsigned long long, unsigned long long, WTF::IdentityExtractor, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<unsigned long long> > { unsigned long long *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_38_1_1; } x38; struct HashSet<WebKit::WebEditCommandProxy *, WTF::PtrHash<WebKit::WebEditCommandProxy *>, WTF::HashTraits<WebKit::WebEditCommandProxy *> > { struct HashTable<WebKit::WebEditCommandProxy *, WebKit::WebEditCommandProxy *, WTF::IdentityExtractor, WTF::PtrHash<WebKit::WebEditCommandProxy *>, WTF::HashTraits<WebKit::WebEditCommandProxy *>, WTF::HashTraits<WebKit::WebEditCommandProxy *> > { struct WebEditCommandProxy {} **x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_39_1_1; } x39; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_40_1_1; } x40; struct RefPtr<WebKit::WebPopupMenuProxy> { struct WebPopupMenuProxy {} *x_41_1_1; } x41; struct RefPtr<WebKit::WebOpenPanelResultListenerProxy> { struct WebOpenPanelResultListenerProxy {} *x_42_1_1; } x42; struct GeolocationPermissionRequestManagerProxy { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_1_2_1; } x_43_1_1; struct WebPageProxy {} *x_43_1_2; } x43; struct NotificationPermissionRequestManagerProxy { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::NotificationPermissionRequest> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::NotificationPermissionRequest> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest> > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_1_2_1; } x_44_1_1; struct WebPageProxy {} *x_44_1_2; } x44; unsigned int x45; bool x46; struct unique_ptr<WebKit::ProcessThrottler::ForegroundActivityToken, std::__1::default_delete<WebKit::ProcessThrottler::ForegroundActivityToken> > { struct __compressed_pair<WebKit::ProcessThrottler::ForegroundActivityToken *, std::__1::default_delete<WebKit::ProcessThrottler::ForegroundActivityToken> > { struct ForegroundActivityToken {} *x_1_2_1; } x_47_1_1; } x47; struct Ref<WebKit::WebBackForwardList> { struct WebBackForwardList {} *x_48_1_1; } x48; bool x49; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_50_1_1; } x50; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_51_1_1; } x51; int x52; struct EditorState { bool x_53_1_1; bool x_53_1_2; bool x_53_1_3; bool x_53_1_4; bool x_53_1_5; bool x_53_1_6; bool x_53_1_7; bool x_53_1_8; bool x_53_1_9; bool x_53_1_10; int x_53_1_11; int x_53_1_12; int x_53_1_13; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_14_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_14_2_2; } x_53_1_14; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_15_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_15_2_2; } x_53_1_15; struct Vector<WebCore::SelectionRect, 0, WTF::CrashOnOverflow> { struct SelectionRect {} *x_16_2_1; unsigned int x_16_2_2; unsigned int x_16_2_3; } x_53_1_16; unsigned long long x_53_1_17; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_18_2_1; } x_53_1_18; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_19_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_19_2_2; } x_53_1_19; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_20_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_20_2_2; } x_53_1_20; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_21_2_1; } x_53_1_21; unsigned int x_53_1_22; } x53; double x54; double x55; double x56; float x57; float x58; float x59; int x60; bool x61; bool x62; struct Color { unsigned int x_63_1_1; bool x_63_1_2; } x63; struct Color { unsigned int x_64_1_1; bool x_64_1_2; } x64; bool x65; struct IntSize { int x_66_1_1; int x_66_1_2; } x66; bool x67; int x68; bool x69; double x70; double x71; bool x72; bool x73; bool x74; bool x75; bool x76; bool x77; struct ResourceRequest {} *x78; bool x79; int x80; unsigned long long x81; bool x82; bool x83; int x84; unsigned long long x85; struct Deque<WebKit::NativeWebKeyboardEvent, 0> { unsigned long long x_86_1_1; unsigned long long x_86_1_2; struct VectorBuffer<WebKit::NativeWebKeyboardEvent, 0> { struct NativeWebKeyboardEvent {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_86_1_3; } x86; struct Deque<WebKit::NativeWebWheelEvent, 0> { unsigned long long x_87_1_1; unsigned long long x_87_1_2; struct VectorBuffer<WebKit::NativeWebWheelEvent, 0> { struct NativeWebWheelEvent {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_87_1_3; } x87; struct Deque<std::__1::unique_ptr<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow>, std::__1::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow> > >, 0> { unsigned long long x_88_1_1; unsigned long long x_88_1_2; struct VectorBuffer<std::__1::unique_ptr<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow>, std::__1::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow> > >, 0> { struct unique_ptr<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow>, std::__1::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow> > > {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_88_1_3; } x88; bool x89; struct unique_ptr<WebKit::NativeWebMouseEvent, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct __compressed_pair<WebKit::NativeWebMouseEvent *, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct NativeWebMouseEvent {} *x_1_2_1; } x_90_1_1; } x90; struct unique_ptr<WebKit::NativeWebMouseEvent, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct __compressed_pair<WebKit::NativeWebMouseEvent *, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct NativeWebMouseEvent {} *x_1_2_1; } x_91_1_1; } x91; bool x92; unsigned long long x93; struct Ref<API::Session> { struct Session {} *x_94_1_1; } x94; bool x95; bool x96; bool x97; bool x98; long long x99; bool x100; unsigned int x101; bool x102; struct PageLoadState { struct Vector<WebKit::PageLoadState::Observer *, 0, WTF::CrashOnOverflow> { struct Observer {} **x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; } x_103_1_1; struct WebPageProxy {} *x_103_1_2; struct Data { int x_3_2_1; bool x_3_2_2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_3_3_1; } x_3_2_3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_4_3_1; } x_3_2_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_5_3_1; } x_3_2_5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_6_3_1; } x_3_2_6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_7_3_1; } x_3_2_7; bool x_3_2_8; bool x_3_2_9; double x_3_2_10; bool x_3_2_11; } x_103_1_3; struct Data { int x_4_2_1; bool x_4_2_2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_3_3_1; } x_4_2_3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_4_3_1; } x_4_2_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_5_3_1; } x_4_2_5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_6_3_1; } x_4_2_6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_7_3_1; } x_4_2_7; bool x_4_2_8; bool x_4_2_9; double x_4_2_10; bool x_4_2_11; } x_103_1_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_5_2_1; } x_103_1_5; bool x_103_1_6; unsigned int x_103_1_7; } x103; bool x104; bool x105; bool x106; bool x107; bool x108; bool x109; bool x110; bool x111; bool x112; bool x113; bool x114; bool x115; bool x116; bool x117; bool x118; bool x119; bool x120; bool x121; unsigned int x122; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_123_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_123_1_2; } x123; unsigned long long x124; bool x125; bool x126; bool x127; struct IntSize { int x_128_1_1; int x_128_1_2; } x128; float x129; bool x130; bool x131; struct HashMap<WTF::String, WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WTF::String>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WTF::String> >, WTF::StringHash, WTF::HashMap<WTF::String, WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WTF::String> {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_132_1_1; } x132; struct unique_ptr<WebCore::RunLoopObserver, std::__1::default_delete<WebCore::RunLoopObserver> > { struct __compressed_pair<WebCore::RunLoopObserver *, std::__1::default_delete<WebCore::RunLoopObserver> > { struct RunLoopObserver {} *x_1_2_1; } x_133_1_1; } x133; int x134; unsigned long long x135; struct HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> >, WTF::StringHash, WTF::HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_136_1_1; } x136; unsigned int x137; bool x138; }*)page;
- (void)paste:(id)arg1;
- (bool)pointIsInAssistedNode:(struct CGPoint { double x1; double x2; })arg1;
- (bool)pointIsNearMarkedText:(struct CGPoint { double x1; double x2; })arg1;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;
- (const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_10_1_1; } x10; }*)positionInformation;
- (const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_10_1_1; } x10; }*)positionInformationForActionSheetAssistant:(id)arg1;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (id)previousUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectContainingCaretSelection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)replace:(id)arg1;
- (void)replaceDictatedText:(id)arg1 withText:(id)arg2;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)replaceText:(id)arg1 withText:(id)arg2;
- (void)requestAutocorrectionContextWithCompletionHandler:(id)arg1;
- (void)requestAutocorrectionRectsForString:(id)arg1 withCompletionHandler:(id)arg2;
- (void)requestDictationContext:(id)arg1;
- (bool)requiresAccessoryView;
- (bool)requiresKeyEvents;
- (bool)resignFirstResponder;
- (void)scrollViewWillStartPanOrPinchGesture;
- (void)select:(id)arg1;
- (void)selectAll;
- (void)selectAll:(id)arg1;
- (void)selectWordBackward;
- (void)selectWordForReplacement;
- (id)selectedDOMRange;
- (id)selectedText;
- (id)selectedTextRange;
- (long long)selectionGranularity;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectionRange;
- (id)selectionRectsForRange:(id)arg1;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setBottomBufferHeight:(double)arg1;
- (void)setInputDelegate:(id)arg1;
- (void)setMarkedText:(id)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(bool)arg2;
- (void)setSelectedTextRange:(id)arg1;
- (void)setShowingInspectorIndication:(bool)arg1;
- (void)setupInteraction;
- (bool)shouldIgnoreWebTouch;
- (id)supportedPasteboardTypesForCurrentSelection;
- (void)takeTraitsFrom:(id)arg1;
- (id)textColorForCaretSelection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textFirstRect;
- (id)textInRange:(id)arg1;
- (id)textInputTraits;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textLastRect;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)tokenizer;
- (id)undoManager;
- (void)unmarkText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unobscuredContentRect;
- (id)unscaledView;
- (void)updateFixedClippingView:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)updatePositionInformationForActionSheetAssistant:(id)arg1;
- (void)useSelectionAssistantWithMode:(int)arg1;
- (id)webSelectionAssistant;
- (id)webSelectionRects;
- (void)willMoveToWindow:(id)arg1;
- (void)willStartZoomOrScroll;
- (id)wordContainingCaretSelection;
- (id)wordRangeContainingCaretSelection;

@end
