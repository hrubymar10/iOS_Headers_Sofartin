/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/PhotosUI.framework/PhotosUI
 */

@interface PUPhotoViewContentHelper : NSObject {
    UIImageView *__crossfadeImageView;
    double _avalancheMaxPixelSize;
    struct CGColor { } *_avalancheStackBackgroundColor;
    PUAvalancheStackView *_avalancheStackView;
    bool _avoidsImageViewIfPossible;
    bool _avoidsPhotoDecoration;
    long long _badgeType;
    PUBadgeView *_badgeView;
    UIView *_contentView;
    long long _fillMode;
    bool _flattensBadgeView;
    bool _hasTransform;
    struct CGAffineTransform { 
        double a; 
        double b; 
        double c; 
        double d; 
        double tx; 
        double ty; 
    } _imageTransform;
    bool _isTextBannerVisible;
    bool _needsAvalancheStack;
    PUPhotoDecoration *_photoDecoration;
    PUBackgroundColorView *_photoDecorationBorderView;
    PUBackgroundColorView *_photoDecorationOverlayView;
    UIImage *_photoImage;
    UIImageView *_photoImageView;
    struct CGSize { 
        double width; 
        double height; 
    } _photoSize;
    PUTextBannerView *_textBannerView;
    double _videoDuration;
}

@property(assign,retain) UIImageView * _crossfadeImageView;
@property(assign,readwrite) double avalancheMaxPixelSize;
@property(assign,readwrite) struct CGColor { }* avalancheStackBackgroundColor;
@property(assign,retain) PUAvalancheStackView * avalancheStackView;
@property(assign,readwrite) bool avoidsImageViewIfPossible;
@property(assign,readwrite) bool avoidsPhotoDecoration;
@property(assign,readonly) UIView * badgeContainerView;
@property(assign,readonly) long long badgeType;
@property(assign,readonly) UIView * contentView;
@property(assign,readwrite) long long fillMode;
@property(assign,readwrite) bool flattensBadgeView;
@property(assign,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } imageContentFrame;
@property(assign,readwrite) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } imageTransform;
@property(assign,readwrite) bool needsAvalancheStack;
@property(assign,copy) PUPhotoDecoration * photoDecoration;
@property(assign,retain) UIImage * photoImage;
@property(assign,retain) UIImageView * photoImageView;
@property(assign,readwrite) struct CGSize { double x1; double x2; } photoSize;
@property(assign,readonly) PUTextBannerView * textBannerView;
@property(getter=isTextBannerVisible,assign,readwrite) bool textBannerVisible;
@property(assign,readonly) double videoDuration;

+ (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_imageContentFrameForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 imageSize:(struct CGSize { double x1; double x2; })arg2 fillMode:(long long)arg3;
+ (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1 imageSize:(struct CGSize { double x1; double x2; })arg2 fillMode:(long long)arg3;

- (void).cxx_destruct;
- (id)_crossfadeImageView;
- (void)_updateBadgeView;
- (void)_updateContentViewClipsToBounds;
- (void)_updateImageView;
- (void)_updatePhotoDecoration;
- (void)_updateSubviewOrdering;
- (void)_updateTextBannerView;
- (void)animateCrossfadeToImage:(id)arg1;
- (double)avalancheMaxPixelSize;
- (struct CGColor { }*)avalancheStackBackgroundColor;
- (id)avalancheStackView;
- (bool)avoidsImageViewIfPossible;
- (bool)avoidsPhotoDecoration;
- (id)badgeContainerView;
- (long long)badgeType;
- (id)contentView;
- (struct CGSize { double x1; double x2; })contentViewSizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (long long)fillMode;
- (bool)flattensBadgeView;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageContentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })imageContentFrameForBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })imageTransform;
- (id)initWithContentView:(id)arg1;
- (bool)isTextBannerVisible;
- (void)layoutSubviewsOfContentView;
- (bool)needsAvalancheStack;
- (id)photoDecoration;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })photoDecorationBorderViewFrameForImageContentFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)photoImage;
- (id)photoImageView;
- (struct CGSize { double x1; double x2; })photoSize;
- (void)setAvalancheMaxPixelSize:(double)arg1;
- (void)setAvalancheStackBackgroundColor:(struct CGColor { }*)arg1;
- (void)setAvalancheStackView:(id)arg1;
- (void)setAvoidsImageViewIfPossible:(bool)arg1;
- (void)setAvoidsPhotoDecoration:(bool)arg1;
- (void)setBadgeType:(long long)arg1 videoDuration:(double)arg2;
- (void)setFillMode:(long long)arg1;
- (void)setFlattensBadgeView:(bool)arg1;
- (void)setImageTransform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setNeedsAvalancheStack:(bool)arg1;
- (void)setPhotoDecoration:(id)arg1;
- (void)setPhotoImage:(id)arg1;
- (void)setPhotoImageView:(id)arg1;
- (void)setPhotoSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setTextBannerVisible:(bool)arg1;
- (void)set_crossfadeImageView:(id)arg1;
- (id)textBannerView;
- (void)updatePhotoImageWithoutReconfiguring:(id)arg1;
- (double)videoDuration;

@end
