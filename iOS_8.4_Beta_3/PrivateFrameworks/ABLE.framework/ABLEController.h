/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ABLE.framework/ABLE
 */

@interface ABLEController : NSObject <ABLEEvents> {
    NSObject<OS_dispatch_queue> *DuetABLEQueue;
    NSObject<OS_dispatch_source> *DuetABLETimer;
    NSUserDefaults *_ableUserDefaults;
    bool _adjustForAbsoluteBatteryLevel;
    bool _adjustForShortDrain;
    bool _admissionLoggingEnabled;
    NSDictionary *_appSettings;
    CDAdmissionControlLogWriter *_cdAdmissionLog;
    ABLEModelController *_chargingModelController;
    id _configurationChangedHandler;
    ABLECoreDuetController *_coreDuetController;
    int _coreDuetSettingsNotifyToken;
    NSUserDefaults *_coreDuetUserDefaults;
    id _dataSourceOverride;
    ABLEModelController *_defaultModelController;
    bool _enabled;
    NSNumber *_lastBON;
    NSDate *_lastBONDate;
    NSNumber *_lastBatteryLevel;
    NSNumber *_lastChargingState;
    NSNumber *_lastRawBON;
    long long _maxBONWithoutCharge;
    NSDictionary *_modelControllers;
    ABLEBONPostAdjust *_postAdjust;
    ABLEBONPostAdjust *_postAdjustChargeDirect;
    ABLEBONPostAdjust *_postAdjustDrainDirect;
    NSString *_selectedModel;
    int _settingsNotifyToken;
    double _shortDrainMultiplier;
    double _shortDrainThreshold;
    bool _suspended;
    double _timeToCalculateBON;
    double _timeToRecalculateModel;
    double _timeToResetAndRecalculateModel;
    float _timerFrequencyPerHour;
    bool _timerSuspended;
    NSArray *_validModelControllers;
    unsigned long long sequenceNumber;
}

@property(assign,retain) NSUserDefaults * ableUserDefaults;
@property(assign,readwrite) bool adjustForAbsoluteBatteryLevel;
@property(assign,readwrite) bool adjustForShortDrain;
@property(assign,readwrite) bool admissionLoggingEnabled;
@property(assign,retain) NSDictionary * appSettings;
@property(assign,retain) CDAdmissionControlLogWriter * cdAdmissionLog;
@property(assign,retain) ABLEModelController * chargingModelController;
@property(assign,copy) id configurationChangedHandler;
@property(assign,retain) ABLECoreDuetController * coreDuetController;
@property(assign,readwrite) int coreDuetSettingsNotifyToken;
@property(assign,retain) NSUserDefaults * coreDuetUserDefaults;
@property(assign,retain) id dataSourceOverride;
@property(assign,retain) ABLEModelController * defaultModelController;
@property(assign,readwrite) bool enabled;
@property(assign,retain) NSNumber * lastBON;
@property(assign,retain) NSDate * lastBONDate;
@property(assign,retain) NSNumber * lastBatteryLevel;
@property(assign,retain) NSNumber * lastChargingState;
@property(assign,retain) NSNumber * lastRawBON;
@property(assign,readwrite) long long maxBONWithoutCharge;
@property(assign,retain) NSDictionary * modelControllers;
@property(assign,retain) ABLEBONPostAdjust * postAdjust;
@property(assign,retain) ABLEBONPostAdjust * postAdjustChargeDirect;
@property(assign,retain) ABLEBONPostAdjust * postAdjustDrainDirect;
@property(assign,retain) NSString * selectedModel;
@property(assign,readwrite) int settingsNotifyToken;
@property(assign,readwrite) double shortDrainMultiplier;
@property(assign,readwrite) double shortDrainThreshold;
@property(assign,readwrite) bool suspended;
@property(assign,readwrite) double timeToCalculateBON;
@property(assign,readwrite) double timeToRecalculateModel;
@property(assign,readwrite) double timeToResetAndRecalculateModel;
@property(assign,readwrite) float timerFrequencyPerHour;
@property(assign,readwrite) bool timerSuspended;
@property(assign,retain) NSArray * validModelControllers;

+ (id)appDefaults;
+ (void)resetConfiguration;
+ (id)staticAppDefaults;

- (void).cxx_destruct;
- (id)ableUserDefaults;
- (bool)adjustForAbsoluteBatteryLevel;
- (bool)adjustForShortDrain;
- (bool)admissionLoggingEnabled;
- (id)appSettings;
- (void)calculateBONForCurrentLevel:(float)arg1 andChargeState:(bool)arg2 atDate:(id)arg3 onQueue:(id)arg4 usingHandler:(id)arg5;
- (id)cdAdmissionLog;
- (id)chargingModelController;
- (id)configurationChangedHandler;
- (id)coreDuetController;
- (int)coreDuetSettingsNotifyToken;
- (id)coreDuetUserDefaults;
- (id)dataSourceOverride;
- (id)defaultModelController;
- (bool)enabled;
- (bool)getChargeModeOverride;
- (id)getModelMode;
- (float)gradientLong;
- (float)gradientShort;
- (id)initWithCDSession:(id)arg1 device:(id)arg2 changeHandler:(id)arg3;
- (id)initWithCoreDuetController:(id)arg1 changeHandler:(id)arg2;
- (id)lastBON;
- (id)lastBONDate;
- (id)lastBatteryLevel;
- (id)lastChargingState;
- (id)lastRawBON;
- (long long)maxBONWithoutCharge;
- (id)modelControllers;
- (id)postAdjust;
- (id)postAdjustChargeDirect;
- (id)postAdjustDrainDirect;
- (id)reportStateWithRequest:(id)arg1;
- (id)reportStateWithRequestInner;
- (void)resetModel;
- (id)selectedModel;
- (void)setAbleUserDefaults:(id)arg1;
- (void)setAdjustForAbsoluteBatteryLevel:(bool)arg1;
- (void)setAdjustForShortDrain:(bool)arg1;
- (void)setAdmissionLoggingEnabled:(bool)arg1;
- (void)setAppSettings:(id)arg1;
- (void)setCdAdmissionLog:(id)arg1;
- (void)setChargingModelController:(id)arg1;
- (void)setConfigurationChangedHandler:(id)arg1;
- (void)setCoreDuetController:(id)arg1;
- (void)setCoreDuetSettingsNotifyToken:(int)arg1;
- (void)setCoreDuetUserDefaults:(id)arg1;
- (void)setDataSourceOverride:(id)arg1;
- (void)setDefaultModelController:(id)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setLastBON:(id)arg1;
- (void)setLastBONDate:(id)arg1;
- (void)setLastBatteryLevel:(id)arg1;
- (void)setLastChargingState:(id)arg1;
- (void)setLastRawBON:(id)arg1;
- (void)setMaxBONWithoutCharge:(long long)arg1;
- (void)setModelControllers:(id)arg1;
- (void)setPostAdjust:(id)arg1;
- (void)setPostAdjustChargeDirect:(id)arg1;
- (void)setPostAdjustDrainDirect:(id)arg1;
- (void)setSelectedModel:(id)arg1;
- (void)setSettingsNotifyToken:(int)arg1;
- (void)setShortDrainMultiplier:(double)arg1;
- (void)setShortDrainThreshold:(double)arg1;
- (void)setSuspended:(bool)arg1;
- (void)setTimeToCalculateBON:(double)arg1;
- (void)setTimeToRecalculateModel:(double)arg1;
- (void)setTimeToResetAndRecalculateModel:(double)arg1;
- (void)setTimerFrequencyPerHour:(float)arg1;
- (void)setTimerSuspended:(bool)arg1;
- (void)setValidModelControllers:(id)arg1;
- (int)settingsNotifyToken;
- (double)shortDrainMultiplier;
- (double)shortDrainThreshold;
- (void)significantEventAtDate:(id)arg1;
- (bool)suspended;
- (double)timeToCalculateBON;
- (double)timeToRecalculateModel;
- (double)timeToResetAndRecalculateModel;
- (float)timerFrequencyPerHour;
- (bool)timerSuspended;
- (void)typeCheckAndFixConfiguration:(id)arg1;
- (void)updateConfiguration;
- (void)updateConfigurationFromCoreDuet;
- (void)updateModelsForDate:(id)arg1;
- (void)updateTimerAndScheduleImmediately:(bool)arg1;
- (id)validModelControllers;

@end
