/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSUNumberFormat : NSObject <NSCopying, NSMutableCopying, TSUNumberFormatting> {
    unsigned char mBase;
    unsigned short mBasePlaces;
    bool mBaseUseMinusSign;
    NSString *mCurrencyCode;
    NSUUID *mCustomFormatKey;
    unsigned short mDecimalPlaces;
    unsigned char mDecimalWidth;
    bool mFormatContainsIntegerToken;
    bool mFormatContainsSpecialTokens;
    NSString *mFormatName;
    NSString *mFormatString;
    bool mFormatStringContainsTabCharacter;
    bool mFormatStringRequiresSuppressionOfMinusSign;
    int mFractionAccuracy;
    bool mIgnoreDecimalPlacesForZeroValue;
    unsigned short mIndexFromRightOfLastDigitPlaceholder;
    NSIndexSet *mInterstitialStringInsertionIndexes;
    NSArray *mInterstitialStrings;
    bool mIsCustom;
    bool mIsTextFormat;
    unsigned char mMinimumIntegerWidth;
    int mNegativeStyle;
    unsigned char mNumberOfHashDecimalPlaceholders;
    unsigned char mNumberOfNonSpaceDecimalPlaceholderDigits;
    unsigned char mNumberOfNonSpaceIntegerPlaceholderDigits;
    NSString *mPrefixString;
    bool mRequiresFractionReplacement;
    double mScaleFactor;
    bool mShowThousandsSeparator;
    NSString *mSuffixString;
    unsigned char mTotalNumberOfDecimalPlaceholdersInFormat;
    bool mUseAccountingStyle;
    bool mUseScientificFormattingAutomatically;
    int mValueType;
}

@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (readonly) Class superclass;

+ (id)instanceWithArchive:(const struct FormatStructArchive { int (**x1)(); struct ExtensionSet { struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_2_1_1; } x2; struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_3_1_1; } x3; unsigned int x4[2]; unsigned int x5; unsigned int x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x7; unsigned int x8; unsigned int x9; unsigned int x10; bool x11; bool x12; bool x13; bool x14; unsigned int x15; unsigned int x16; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x17; unsigned int x18; unsigned int x19; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x20; double x21; unsigned int x22; unsigned int x23; double x24; double x25; double x26; unsigned int x27; unsigned int x28; bool x29; bool x30; bool x31; bool x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; struct RepeatedPtrField<std::__1::basic_string<char> > { void **x_38_1_1; int x_38_1_2; int x_38_1_3; int x_38_1_4; } x38; struct IndexSet {} *x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; struct UUID {} *x44; bool x45; int x46; }*)arg1 unarchiver:(id)arg2;
+ (id)numberFormatFromFormatStruct:(struct { int x1; union { struct { unsigned int x_1_2_1 : 16; unsigned int x_1_2_2 : 8; unsigned int x_1_2_3 : 3; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_2_1_1; struct { unsigned int x_2_2_1 : 8; } x_2_1_2; struct { unsigned int x_3_2_1 : 8; unsigned int x_3_2_2 : 8; unsigned int x_3_2_3 : 1; } x_2_1_3; struct { unsigned int x_4_2_1 : 1; unsigned int x_4_2_2 : 1; id x_4_2_3; } x_2_1_4; struct { unsigned int x_5_2_1 : 1; int x_5_2_2; int x_5_2_3; int x_5_2_4; } x_2_1_5; struct { id x_6_2_1; id x_6_2_2; unsigned int x_6_2_3; unsigned char x_6_2_4; } x_2_1_6; struct { double x_7_2_1; double x_7_2_2; double x_7_2_3; int x_7_2_4; unsigned int x_7_2_5 : 2; unsigned int x_7_2_6 : 2; } x_2_1_7; struct { int x_8_2_1; unsigned int x_8_2_2; id x_8_2_3; } x_2_1_8; } x2; })arg1;
+ (id)numberFormatWithValueType:(int)arg1 formatString:(id)arg2 decimalPlaces:(unsigned short)arg3 currencyCode:(id)arg4 useAccountingStyle:(bool)arg5 negativeStyle:(int)arg6 showThousandsSeparator:(bool)arg7 fractionAccuracy:(int)arg8;
+ (id)numberFormatWithValueType:(int)arg1 formatString:(id)arg2 decimalPlaces:(unsigned short)arg3 currencyCode:(id)arg4 useAccountingStyle:(bool)arg5 negativeStyle:(int)arg6 showThousandsSeparator:(bool)arg7 fractionAccuracy:(int)arg8 prefixString:(id)arg9 suffixString:(id)arg10 scaleFactor:(double)arg11 base:(unsigned char)arg12 basePlaces:(unsigned short)arg13 baseUseMinusSign:(bool)arg14 isCustom:(bool)arg15 formatName:(id)arg16;

- (unsigned short)base;
- (unsigned short)basePlaces;
- (id)baseStringFromDouble:(double)arg1;
- (bool)baseUseMinusSign;
- (bool)canFormatText;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)currencyCode;
- (id)customFormatKey;
- (bool)customFormatShouldAutoInsertPercentSymbol;
- (id)customNumberFormatTokens;
- (void)dealloc;
- (unsigned short)decimalPlaces;
- (id)description;
- (id)formatName;
- (id)formatString;
- (struct { int x1; union { struct { unsigned int x_1_2_1 : 16; unsigned int x_1_2_2 : 8; unsigned int x_1_2_3 : 3; unsigned int x_1_2_4 : 1; unsigned int x_1_2_5 : 1; } x_2_1_1; struct { unsigned int x_2_2_1 : 8; } x_2_1_2; struct { unsigned int x_3_2_1 : 8; unsigned int x_3_2_2 : 8; unsigned int x_3_2_3 : 1; } x_2_1_3; struct { unsigned int x_4_2_1 : 1; unsigned int x_4_2_2 : 1; id x_4_2_3; } x_2_1_4; struct { unsigned int x_5_2_1 : 1; int x_5_2_2; int x_5_2_3; int x_5_2_4; } x_2_1_5; struct { id x_6_2_1; id x_6_2_2; unsigned int x_6_2_3; unsigned char x_6_2_4; } x_2_1_6; struct { double x_7_2_1; double x_7_2_2; double x_7_2_3; int x_7_2_4; unsigned int x_7_2_5 : 2; unsigned int x_7_2_6 : 2; } x_2_1_7; struct { int x_8_2_1; unsigned int x_8_2_2; id x_8_2_3; } x_2_1_8; } x2; })formatStructAndCustomFormatData:(id*)arg1;
- (int)fractionAccuracy;
- (id)fractionStringFromDouble:(double)arg1;
- (bool)hasValidDecimalPlaces;
- (unsigned long long)hash;
- (bool)ignoreDecimalPlacesForZeroValue;
- (id)init;
- (id)initCustomFormatWithFormatString:(id)arg1 currencyCode:(id)arg2 showThousandsSeparator:(bool)arg3 fractionAccuracy:(int)arg4 scaleFactor:(double)arg5 interstitialStrings:(id)arg6 interstitialStringInsertionIndexes:(id)arg7 indexFromRightOfLastDigitPlaceholder:(unsigned short)arg8 minimumIntegerWidth:(unsigned char)arg9 decimalWidth:(unsigned char)arg10 numberOfNonSpaceIntegerPlaceholderDigits:(unsigned char)arg11 numberOfNonSpaceDecimalPlaceholderDigits:(unsigned char)arg12 isTextFormat:(bool)arg13 formatName:(id)arg14;
- (id)initWithArchive:(const struct FormatStructArchive { int (**x1)(); struct ExtensionSet { struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_2_1_1; } x2; struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_3_1_1; } x3; unsigned int x4[2]; unsigned int x5; unsigned int x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x7; unsigned int x8; unsigned int x9; unsigned int x10; bool x11; bool x12; bool x13; bool x14; unsigned int x15; unsigned int x16; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x17; unsigned int x18; unsigned int x19; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x20; double x21; unsigned int x22; unsigned int x23; double x24; double x25; double x26; unsigned int x27; unsigned int x28; bool x29; bool x30; bool x31; bool x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; struct RepeatedPtrField<std::__1::basic_string<char> > { void **x_38_1_1; int x_38_1_2; int x_38_1_3; int x_38_1_4; } x38; struct IndexSet {} *x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; struct UUID {} *x44; bool x45; int x46; }*)arg1 unarchiver:(id)arg2;
- (id)initWithValueType:(int)arg1 formatString:(id)arg2 decimalPlaces:(unsigned short)arg3 currencyCode:(id)arg4 useAccountingStyle:(bool)arg5 negativeStyle:(int)arg6 showThousandsSeparator:(bool)arg7 fractionAccuracy:(int)arg8;
- (id)initWithValueType:(int)arg1 formatString:(id)arg2 decimalPlaces:(unsigned short)arg3 currencyCode:(id)arg4 useAccountingStyle:(bool)arg5 negativeStyle:(int)arg6 showThousandsSeparator:(bool)arg7 fractionAccuracy:(int)arg8 base:(unsigned char)arg9 basePlaces:(unsigned short)arg10 baseUseMinusSign:(bool)arg11;
- (id)initWithValueType:(int)arg1 formatString:(id)arg2 decimalPlaces:(unsigned short)arg3 currencyCode:(id)arg4 useAccountingStyle:(bool)arg5 negativeStyle:(int)arg6 showThousandsSeparator:(bool)arg7 fractionAccuracy:(int)arg8 prefixString:(id)arg9 suffixString:(id)arg10 isCustom:(bool)arg11;
- (id)initWithValueType:(int)arg1 formatString:(id)arg2 decimalPlaces:(unsigned short)arg3 currencyCode:(id)arg4 useAccountingStyle:(bool)arg5 negativeStyle:(int)arg6 showThousandsSeparator:(bool)arg7 fractionAccuracy:(int)arg8 prefixString:(id)arg9 suffixString:(id)arg10 scaleFactor:(double)arg11 base:(unsigned char)arg12 basePlaces:(unsigned short)arg13 baseUseMinusSign:(bool)arg14 isCustom:(bool)arg15 interstitialStrings:(id)arg16 interstitialStringInsertionIndexes:(id)arg17 indexFromRightOfLastDigitPlaceholder:(unsigned short)arg18 minimumIntegerWidth:(unsigned char)arg19 decimalWidth:(unsigned char)arg20 numberOfNonSpaceIntegerPlaceholderDigits:(unsigned char)arg21 numberOfNonSpaceDecimalPlaceholderDigits:(unsigned char)arg22 isTextFormat:(bool)arg23 formatName:(id)arg24 customFormatKey:(id)arg25;
- (id)initWithValueType:(int)arg1 formatString:(id)arg2 decimalPlaces:(unsigned short)arg3 currencyCode:(id)arg4 useAccountingStyle:(bool)arg5 negativeStyle:(int)arg6 showThousandsSeparator:(bool)arg7 fractionAccuracy:(int)arg8 suffixString:(id)arg9;
- (bool)isCustom;
- (bool)isEqual:(id)arg1;
- (bool)isEquivalent:(id)arg1;
- (bool)isTextFormat;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (int)negativeStyle;
- (id)numberFormatBySettingNegativeStyle:(int)arg1;
- (id)numberFormatBySettingUseAccountingStyle:(bool)arg1;
- (id)prefixString;
- (bool)requiresParensToBeReplacedWithSpacesForDouble:(double)arg1;
- (void)saveToArchive:(struct FormatStructArchive { int (**x1)(); struct ExtensionSet { struct map<int, google::protobuf::internal::ExtensionSet::Extension, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension> > > { struct __tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> {} *x_1_3_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, google::protobuf::internal::ExtensionSet::Extension>, std::__1::less<int>, true> > { unsigned long long x_3_4_1; } x_1_3_3; } x_1_2_1; } x_2_1_1; } x2; struct UnknownFieldSet { struct vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > {} *x_3_1_1; } x3; unsigned int x4[2]; unsigned int x5; unsigned int x6; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x7; unsigned int x8; unsigned int x9; unsigned int x10; bool x11; bool x12; bool x13; bool x14; unsigned int x15; unsigned int x16; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x17; unsigned int x18; unsigned int x19; struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {} *x20; double x21; unsigned int x22; unsigned int x23; double x24; double x25; double x26; unsigned int x27; unsigned int x28; bool x29; bool x30; bool x31; bool x32; unsigned int x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; struct RepeatedPtrField<std::__1::basic_string<char> > { void **x_38_1_1; int x_38_1_2; int x_38_1_3; int x_38_1_4; } x38; struct IndexSet {} *x39; unsigned int x40; unsigned int x41; unsigned int x42; unsigned int x43; struct UUID {} *x44; bool x45; int x46; }*)arg1 archiver:(id)arg2;
- (double)scaleFactor;
- (void)setFormatName:(id)arg1;
- (void)setIgnoreDecimalPlacesForZeroValue:(bool)arg1;
- (void)setUseScientificFormattingAutomatically:(bool)arg1;
- (bool)showThousandsSeparator;
- (id)stringFromDouble:(double)arg1 locale:(id)arg2;
- (id)stringFromDouble:(double)arg1 locale:(id)arg2 decimalPlaces:(unsigned short)arg3 minimumDecimalPlaces:(unsigned short)arg4;
- (id)stringFromDouble:(double)arg1 locale:(id)arg2 decimalPlaces:(unsigned short)arg3 minimumDecimalPlaces:(unsigned short)arg4 forceSuppressMinusSign:(bool)arg5;
- (id)stringFromDouble:(double)arg1 locale:(id)arg2 forceSuppressMinusSign:(bool)arg3;
- (id)stringFromDouble:(double)arg1 locale:(id)arg2 minimumDecimalPlaces:(unsigned short)arg3;
- (id)stringFromDouble:(double)arg1 locale:(id)arg2 minimumDecimalPlaces:(unsigned short)arg3 forceSuppressMinusSign:(bool)arg4;
- (id)stringFromString:(id)arg1;
- (id)suffixString;
- (bool)useScientificFormattingAutomatically;
- (bool)usesAccountingStyle;
- (bool)usesTabs;
- (bool)usesTextFormatForValue:(double)arg1;
- (int)valueType;

@end
