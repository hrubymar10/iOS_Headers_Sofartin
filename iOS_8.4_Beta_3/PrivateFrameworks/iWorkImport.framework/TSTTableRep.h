/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSTTableRep : TSWPTextHostRep <UITextFieldDelegate> {
    bool _settingSelection;
    <TSTTableAnimationController> *mAnimationController;
    NSMutableArray *mAnimationStack;
    <TSTCanvasReferenceController> *mCanvasReferenceController;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } mCanvasVisibleRect;
    TSTSelectionDragController *mCellDragController;
    CAShapeLayer *mCellEditingMaskLayer;
    NSMutableDictionary *mChildTextReps;
    TSTTableCellTextEditingRep *mContainedTextEditingRep;
    double mCurrentScreenScale;
    <TSTTableRepDelegate> *mDelegate;
    struct TSUColumnRowRect { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    } mDirtyCellRange;
    bool mDragByHandleOnly;
    struct { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    } mEditingHyperlinkCellID;
    CAShapeLayer *mFindSelectionHighlightLayer;
    CAShapeLayer *mHighlightedHyperlinkLayer;
    TSWPHyperlinkField *mHyperlinkField;
    bool mHyperlinkModified;
    TSWPStorage *mHyperlinkParentStorage;
    bool mInspectingHyperlinkInEditingStorage;
    bool mIsAspectOperationInProgress;
    bool mIsZoomOperationInProgress;
    bool mIsZoomToEditOperationInProgress;
    struct { 
        unsigned short row; 
        unsigned char column; 
        unsigned char reserved; 
    } mRatingsDragCellID;
    bool mRecursivelyDrawingInContext;
    TSTTableReferences *mReferences;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } mSearchSelectionBounds;
    bool mSelectionUsesBezierPath;
    bool mSelectsCellOnInitialTap;
    TSTCellSelection *mSourceFillSelection;
    <TSTTableChromeProvider> *mTableChrome;
    CALayer *mTableCollaboratorCursorLayer;
    bool mTableNameValid;
    TSTCellSelection *mTargetFillSelection;
    bool mUsesWholeChromeResizer;
    NSSet *mVisibleFillKnobs;
    TSDKnobTracker<TSTTableKnobTrackerVisitorProtocol> *mVisitorKnobTracker;
    bool mWPEndedTableNameEditing;
    struct TSUColumnRowRect { 
        struct { 
            unsigned short row; 
            unsigned char column; 
            unsigned char reserved; 
        } origin; 
        struct { 
            unsigned short numberOfColumns; 
            unsigned short numberOfRows; 
        } size; 
    } mZoomToEditVisibleCellRange;
}

@property(assign,retain) TSTSearchReference * activeSearchReference;
@property(assign,readwrite) <TSTTableAnimationController> * animationController;
@property(assign,readonly) <TSTCanvasReferenceController> * canvasReferenceController;
@property(assign,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } canvasVisibleRect;
@property(assign,readwrite) TSTSelectionDragController * cellDragController;
@property(assign,retain) NSMutableDictionary * childTextReps;
@property(assign,readonly) TSTAnimation * currentAnimation;
@property(assign,copy) NSString * debugDescription;
@property(assign,readonly) <TSTTableRepDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) bool isZoomToEditOperationInProgress;
@property(assign,readonly) TSTMasterLayout * masterLayout;
@property(assign,readwrite) struct { unsigned short x1; unsigned char x2; unsigned char x3; } ratingsDragCellID;
@property(assign,readonly) TSTCellSelection * selection;
@property(assign,readonly) int selectionType;
@property(assign,readonly) Class superclass;
@property(assign,readonly) <TSTTableChromeProvider> * tableChrome;
@property(assign,readonly) TSTTableInfo * tableInfo;
@property(assign,readonly) TSTLayout * tableLayout;
@property(assign,readonly) TSTTableModel * tableModel;
@property(getter=isTableNameValid,assign,readwrite) bool tableNameValid;
@property(assign,readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformFromCanvas;
@property(assign,readonly) struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; } transformToCanvas;

+ (Class)tableRepDelegateClass;

- (id).cxx_construct;
- (id)actionForLayer:(id)arg1 forKey:(id)arg2;
- (void)addAdditionalChildLayersToArray:(id)arg1;
- (id)animationController;
- (void)asyncPostTextChangedInRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })boundsForCellSelection:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (bool)canDrawInBackgroundDuringScroll;
- (bool)canDrawInParallel;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })canvasBoundsForCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (id)canvasReferenceController;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })canvasVisibleRect;
- (id)cellDragController;
- (id)childReps;
- (id)childTextReps;
- (void)contentsRectForCellRangeAcrossSpaces:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1 contentsCenterInfo:(struct { bool x1; double x2; double x3; double x4; double x5; double x6; double x7; }*)arg2 canvasFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg3 contentsRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg4;
- (id)currentAnimation;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })deviceBoundsForCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg1;
- (void)didDrawCellImageFill:(id)arg1 inCellRange:(struct TSUColumnRowRect { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned short x_2_1_2; } x2; })arg2;
- (void)drawInContext:(struct CGContext { }*)arg1;
- (void)drawLayer:(id)arg1 inContext:(struct CGContext { }*)arg2;
- (id)editorSelection;
- (id)hitRep:(struct CGPoint { double x1; double x2; })arg1;
- (id)hitRepChrome:(struct CGPoint { double x1; double x2; })arg1;
- (id)initWithLayout:(id)arg1 canvas:(id)arg2;
- (void)invalidateEditingCell;
- (void)invalidateFrozenHeaders;
- (bool)isDraggable;
- (bool)isFullyVisibleWithBorder:(int)arg1;
- (bool)isTableNameValid;
- (bool)isZoomToEditOperationInProgress;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })layerFrameInScaledCanvas;
- (void)layoutInRootChangedFrom:(id)arg1 to:(id)arg2 translatedOnly:(bool)arg3;
- (id)masterLayout;
- (bool)mustDrawOnMainThreadForInteractiveCanvas;
- (void)orientationDidChange:(id)arg1;
- (id)overlayLayers;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })p_alignedLayerFrameForLayoutSpace:(id)arg1 transform:(struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })arg2;
- (bool)p_shouldPerformOnChildTextReps:(SEL)arg1;
- (id)p_textImageForPath:(struct CGPath { }*)arg1 shouldPulsate:(bool)arg2;
- (void)popAnimation;
- (void)pushAnimation:(id)arg1;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })ratingsDragCellID;
- (void)recursivelyDrawInContext:(struct CGContext { }*)arg1;
- (void)recursivelyPerformSelector:(SEL)arg1;
- (void)recursivelyPerformSelector:(SEL)arg1 withObject:(id)arg2;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1;
- (void)recursivelyPerformSelectorIfImplemented:(SEL)arg1 withObject:(id)arg2;
- (id)repForDragging;
- (void)screenScaleDidChange;
- (id)selection;
- (int)selectionType;
- (void)setAnimationController:(id)arg1;
- (void)setCellDragController:(id)arg1;
- (void)setChildTextReps:(id)arg1;
- (void)setRatingsDragCellID:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1;
- (void)setTableNameValid:(bool)arg1;
- (id)tableChrome;
- (id)tableInfo;
- (id)tableLayout;
- (id)tableModel;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformFromCanvas;
- (struct CGAffineTransform { double x1; double x2; double x3; double x4; double x5; double x6; })transformToCanvas;
- (void)updateChildrenFromLayout;
- (void)updateDynamicModeForEditingSpillText;
- (void)updateFromLayout;
- (void)validateFrozenHeaderColumns;
- (void)validateFrozenHeaderCorner;
- (void)validateFrozenHeaderRows;
- (void)validateFrozenHeaderTableBodyMask;
- (void)validateStrokesInEditingSpillingTextRange;
- (void)validateVisibleRect;
- (void)viewScaleDidChange;
- (void)willBeRemoved;
- (void)willUpdateLayer:(id)arg1;

@end
