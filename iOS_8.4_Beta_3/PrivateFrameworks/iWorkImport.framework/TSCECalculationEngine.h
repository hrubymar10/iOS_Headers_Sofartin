/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
 */

@interface TSCECalculationEngine : TSPObject {
    TSKAccessController *_accessController;
    unsigned long long _batchingGroupCellDirtyingLevel;
    bool _blockingUntilRecalcIsComplete;
    int _calculationPauseCount;
    NSMutableArray *_calculationStateObservers;
    TSKChangeNotifier *_changeNotifier;
    NSDate *_currentDate;
    <TSKMultiTableRemapping> *_currentTableIDRemapper;
    <TSKMultiTableRemapping> *_currentTableIdRemapper;
    NSTimeZone *_currentTimeZone;
    struct TSCEDependencyTracker { struct _opaque_pthread_mutex_t { long long x_1_1_1; BOOL x_1_1_2[56]; } x1; id x2; struct unordered_map<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo, TSCEFormulaOwnerIDHash, TSCEFormulaOwnerIDEqual, std::__1::allocator<std::__1::pair<const __CFUUID *const, TSCEDependencyTrackerFormulaOwnerInfo> > > { struct __hash_table<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, std::__1::__unordered_map_hasher<const __CFUUID *, std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, TSCEFormulaOwnerIDHash, true>, std::__1::__unordered_map_equal<const __CFUUID *, std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, TSCEFormulaOwnerIDEqual, true>, std::__1::allocator<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CFUUID *, std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, TSCEFormulaOwnerIDHash, true> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CFUUID *, std::__1::__hash_value_type<const __CFUUID *, TSCEDependencyTrackerFormulaOwnerInfo>, TSCEFormulaOwnerIDEqual, true> > { float x_4_3_1; } x_1_2_4; } x_3_1_1; } x3; struct unordered_set<const __CFUUID *, std::__1::hash<const __CFUUID *>, std::__1::equal_to<const __CFUUID *>, std::__1::allocator<const __CFUUID *> > { struct __hash_table<const __CFUUID *, std::__1::hash<const __CFUUID *>, std::__1::equal_to<const __CFUUID *>, std::__1::allocator<const __CFUUID *> > { struct unique_ptr<std::__1::__hash_node<const __CFUUID *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<const __CFUUID *, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<const __CFUUID *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<const __CFUUID *, void *> *> > > { struct __hash_node<const __CFUUID *, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<const __CFUUID *, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<const __CFUUID *, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<const __CFUUID *, void *> *>, std::__1::allocator<std::__1::__hash_node<const __CFUUID *, void *> > > { struct __hash_node_base<std::__1::__hash_node<const __CFUUID *, void *> *> { struct __hash_node<const __CFUUID *, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::hash<const __CFUUID *> > { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, std::__1::equal_to<const __CFUUID *> > { float x_4_3_1; } x_1_2_4; } x_4_1_1; } x4; struct TSCEIDMap { struct TSCEIDAllocator<unsigned short> { unsigned short x_1_2_1; struct set<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short> > { struct __tree<unsigned short, std::__1::less<unsigned short>, std::__1::allocator<unsigned short> > { struct __tree_node<unsigned short, void *> {} *x_1_4_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<unsigned short, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_6_1; } x_2_5_1; } x_1_4_2; struct __compressed_pair<unsigned long, std::__1::less<unsigned short> > { unsigned long long x_3_5_1; } x_1_4_3; } x_2_3_1; } x_1_2_2; } x_5_1_1; struct unordered_map<unsigned short, const __CFUUID *, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, const __CFUUID *> > > { struct __hash_table<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, const __CFUUID *>, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, const __CFUUID *>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, const __CFUUID *> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> *> { struct __hash_node<std::__1::__hash_value_type<unsigned short, const __CFUUID *>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, const __CFUUID *>, std::__1::hash<unsigned short>, true> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, const __CFUUID *>, std::__1::equal_to<unsigned short>, true> > { float x_4_4_1; } x_1_3_4; } x_2_2_1; } x_5_1_2; struct unordered_map<const __CFUUID *, unsigned short, TSCEFormulaOwnerIDHash, TSCEFormulaOwnerIDEqual, std::__1::allocator<std::__1::pair<const __CFUUID *const, unsigned short> > > { struct __hash_table<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, std::__1::__unordered_map_hasher<const __CFUUID *, std::__1::__hash_value_type<const __CFUUID *, unsigned short>, TSCEFormulaOwnerIDHash, true>, std::__1::__unordered_map_equal<const __CFUUID *, std::__1::__hash_value_type<const __CFUUID *, unsigned short>, TSCEFormulaOwnerIDEqual, true>, std::__1::allocator<std::__1::__hash_value_type<const __CFUUID *, unsigned short> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> *> { struct __hash_node<std::__1::__hash_value_type<const __CFUUID *, unsigned short>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<const __CFUUID *, std::__1::__hash_value_type<const __CFUUID *, unsigned short>, TSCEFormulaOwnerIDHash, true> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<const __CFUUID *, std::__1::__hash_value_type<const __CFUUID *, unsigned short>, TSCEFormulaOwnerIDEqual, true> > { float x_4_4_1; } x_1_3_4; } x_3_2_1; } x_5_1_3; struct unordered_map<unsigned short, TSU::UUIDData<TSP::UUIDData>, std::__1::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSU::UUIDData<TSP::UUIDData> > > > { struct __hash_table<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<unsigned short>, true>, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> > > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> *> { struct __hash_node<std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned short, std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, std::__1::hash<unsigned short>, true> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned short, std::__1::__hash_value_type<unsigned short, TSU::UUIDData<TSP::UUIDData> >, std::__1::equal_to<unsigned short>, true> > { float x_4_4_1; } x_1_3_4; } x_4_2_1; } x_5_1_4; struct unordered_map<TSU::UUIDData<TSP::UUIDData>, unsigned short, std::__1::hash<TSUUUID>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, std::__1::allocator<std::__1::pair<const TSU::UUIDData<TSP::UUIDData>, unsigned short> > > { struct __hash_table<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::hash<TSUUUID>, true>, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true>, std::__1::allocator<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> {} **x_1_5_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> > { unsigned long long x_1_7_1; } x_2_6_1; } x_1_5_2; } x_1_4_1; } x_1_3_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> *> { struct __hash_node<std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, void *> {} *x_1_5_1; } x_2_4_1; } x_1_3_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::hash<TSUUUID>, true> > { unsigned long long x_3_4_1; } x_1_3_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<TSU::UUIDData<TSP::UUIDData>, std::__1::__hash_value_type<TSU::UUIDData<TSP::UUIDData>, unsigned short>, std::__1::equal_to<TSU::UUIDData<TSP::UUIDData> >, true> > { float x_4_4_1; } x_1_3_4; } x_5_2_1; } x_5_1_5; } x5; bool x6; struct _opaque_pthread_mutex_t { long long x_7_1_1; BOOL x_7_1_2[56]; } x7; struct deque<TSCEInternalCellReference, std::__1::allocator<TSCEInternalCellReference> > { struct __split_buffer<TSCEInternalCellReference *, std::__1::allocator<TSCEInternalCellReference *> > { struct TSCEInternalCellReference {} **x_1_2_1; struct TSCEInternalCellReference {} **x_1_2_2; struct TSCEInternalCellReference {} **x_1_2_3; struct __compressed_pair<TSCEInternalCellReference **, std::__1::allocator<TSCEInternalCellReference *> > { struct TSCEInternalCellReference {} **x_4_3_1; } x_1_2_4; } x_8_1_1; unsigned long long x_8_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<TSCEInternalCellReference> > { unsigned long long x_3_2_1; } x_8_1_3; } x8; struct unordered_set<TSCECellReference, TSCECellReferenceHash, TSCECellReferenceEqual, std::__1::allocator<TSCECellReference> > { struct __hash_table<TSCECellReference, TSCECellReferenceHash, TSCECellReferenceEqual, std::__1::allocator<TSCECellReference> > { struct unique_ptr<std::__1::__hash_node<TSCECellReference, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<TSCECellReference, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > > { struct __hash_node<TSCECellReference, void *> {} **x_1_4_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> *> > { unsigned long long x_1_6_1; } x_2_5_1; } x_1_4_2; } x_1_3_1; } x_1_2_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCECellReference, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCECellReference, void *> > > { struct __hash_node_base<std::__1::__hash_node<TSCECellReference, void *> *> { struct __hash_node<TSCECellReference, void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, TSCECellReferenceHash> { unsigned long long x_3_3_1; } x_1_2_3; struct __compressed_pair<float, TSCECellReferenceEqual> { float x_4_3_1; } x_1_2_4; } x_9_1_1; } x9; struct deque<TSCEInternalCellReference, std::__1::allocator<TSCEInternalCellReference> > { struct __split_buffer<TSCEInternalCellReference *, std::__1::allocator<TSCEInternalCellReference *> > { struct TSCEInternalCellReference {} **x_1_2_1; struct TSCEInternalCellReference {} **x_1_2_2; struct TSCEInternalCellReference {} **x_1_2_3; struct __compressed_pair<TSCEInternalCellReference **, std::__1::allocator<TSCEInternalCellReference *> > { struct TSCEInternalCellReference {} **x_4_3_1; } x_1_2_4; } x_10_1_1; unsigned long long x_10_1_2; struct __compressed_pair<unsigned long, std::__1::allocator<TSCEInternalCellReference> > { unsigned long long x_3_2_1; } x_10_1_3; } x10; struct vector<TSCEInternalCellReference, std::__1::allocator<TSCEInternalCellReference> > { struct TSCEInternalCellReference {} *x_11_1_1; struct TSCEInternalCellReference {} *x_11_1_2; struct __compressed_pair<TSCEInternalCellReference *, std::__1::allocator<TSCEInternalCellReference> > { struct TSCEInternalCellReference {} *x_3_2_1; } x_11_1_3; } x11; struct { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_12_1_1; struct __CFUUID {} *x_12_1_2; } x12; } *_dependencyTracker;
    bool _dirtyAllFormulasInDocumentDidLoad;
    bool _dirtyRandomVolatileFunctionsAtEndOfDirtyBatching;
    unsigned long long _documentRandSeed;
    struct __CFDictionary { } *_legacyGlobalIDStringToOwnerIDDictionary;
    unsigned long long _loadFromFileVersion;
    struct __CFSet { } *_modifiedOwnersInThisRecalcCycle;
    NSObject<OS_dispatch_semaphore> *_modifiedOwnersSem;
    TSCENamedReferenceManager *_namedReferenceManager;
    unsigned long long _numberOfFormulas;
    TSKChangeGroup *_pendingChangesForAsyncNotification;
    NSString *_previousLocaleIdentifier;
    NSObject<OS_dispatch_group> *_recalcDispatchGroup;
    int _recalcDispatchGroupSize;
    NSObject<OS_dispatch_queue> *_recalcHighPriorityQueue;
    NSObject<OS_dispatch_group> *_recalcLoopGroup;
    NSObject<OS_dispatch_queue> *_recalcLowPriorityQueue;
    int _recalculationThreadState;
    struct _opaque_pthread_mutex_t { 
        long long __sig; 
        BOOL __opaque[56]; 
    } _recalculationThreadStateMutex;
    struct __CFDictionary { } *_referenceResolvers;
    bool _shouldCancelRecalculation;
    bool _shouldRefillRecalcQueue;
    unsigned long long _suppressWillModifyCallsLevel;
    TSCERewriteTableIDInfo *_tableIDHistory;
    struct __CFUUID { } *_transposingTableID;
    TSCEUUidReferenceMap *_uuidReferenceMap;
    NSObject<OS_dispatch_queue> *_writeMutualExclusionQueue;
    int _xlImportDateMode;
}

@property (retain) NSDate *currentDate;
@property (retain) <TSKMultiTableRemapping> *currentTableIdRemapper;
@property (retain) NSTimeZone *currentTimeZone;
@property unsigned long long documentRandomSeed;
@property (nonatomic) unsigned long long loadFromFileVersion;
@property (readonly) bool shouldAbortRecalculation;
@property (readonly, retain) TSCERewriteTableIDInfo *tableIDHistory;
@property struct __CFUUID { }*transposingTableID;
@property (readonly) TSCEUUidReferenceMap *uuidReferenceMap;

+ (unsigned long long)generateRandomSeed;
+ (bool)localVariablesEnabled;
+ (unsigned long long)randomSeedFromRandomLo:(int)arg1 hi:(int)arg2;
+ (void)splitRandomSeed:(unsigned long long)arg1 intoLo:(int*)arg2 hi:(int*)arg3;

- (id).cxx_construct;
- (id)accessController;
- (void)addCalculationStateObserver:(id)arg1;
- (void)addFormula:(struct { unsigned int x1 : 24; unsigned int x2 : 8; })arg1 inOwner:(struct __CFUUID { }*)arg2 precedentIterator:(int (*)arg3 userData:(void*)arg4 hasRandomVolatileFunctions:(bool*)arg5;
- (id)allCellDependenciesAsString;
- (bool)allCellsAreClean;
- (void)allFunctionsAreDirty;
- (id)allOwnerIDs;
- (bool)allOwnersRegistered;
- (id)allSpanningDependenciesAsString;
- (id)allWholeOwnerDependenciesAsString;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)assertAllDirtyCellsAreOnLeafStack;
- (void)assertDirtyPrecedentsCountConsistency;
- (void)beginBatchingGroupCellDirtying;
- (void)beginSuppressingWillModifyCalls;
- (void)blockUntilRecalcIsCompleteWithTimeout:(double)arg1;
- (bool)cellContainsAFormula:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; }*)arg1;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })cellCoordForCellHandle:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 inTable:(struct __CFUUID { }*)arg2;
- (struct unordered_set<TSUColumnRowCoordinate, TSCECellCoordinateHash, TSCECellCoordinateEqual, std::__1::allocator<TSUColumnRowCoordinate> > { struct __hash_table<TSUColumnRowCoordinate, TSCECellCoordinateHash, TSCECellCoordinateEqual, std::__1::allocator<TSUColumnRowCoordinate> > { struct unique_ptr<std::__1::__hash_node<TSUColumnRowCoordinate, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSUColumnRowCoordinate, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<TSUColumnRowCoordinate, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSUColumnRowCoordinate, void *> *> > > { struct __hash_node<TSUColumnRowCoordinate, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSUColumnRowCoordinate, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TSUColumnRowCoordinate, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSUColumnRowCoordinate, void *> *>, std::__1::allocator<std::__1::__hash_node<TSUColumnRowCoordinate, void *> > > { struct __hash_node_base<std::__1::__hash_node<TSUColumnRowCoordinate, void *> *> { struct __hash_node<TSUColumnRowCoordinate, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, TSCECellCoordinateHash> { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, TSCECellCoordinateEqual> { float x_4_2_1; } x_1_1_4; } x1; })cellCoordinatesNeedingExcelImportForTable:(struct __CFUUID { }*)arg1;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })cellHandleForCellCoord:(struct { unsigned short x1; unsigned char x2; unsigned char x3; })arg1 inTable:(struct __CFUUID { }*)arg2;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })cellHandleRangeForRangeCoord:(struct TSCERangeCoordinate { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1 inTable:(struct __CFUUID { }*)arg2;
- (bool)cellIsInACycle:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; }*)arg1;
- (void)cellReferenceIsDirty:(const struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; }*)arg1;
- (bool)clearCellIsDirtyAfterRecalc:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; })arg1;
- (void)clearLegacyGlobalIDs;
- (void)compassVolatileFunctionsAreDirty;
- (id)currentDate;
- (id)currentTableIdRemapper;
- (id)currentTimeZone;
- (void)dealloc;
- (unsigned int)delayedArchivingPriority;
- (void)detectAndRepairConsistencyViolations;
- (unsigned long long)dirtyCellCount;
- (unsigned long long)dirtyCellCountInOwner:(struct __CFUUID { }*)arg1;
- (void)dirtyCellsForRemovalOfColumns:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 fromTable:(struct __CFUUID { }*)arg2 tableRange:(struct TSCERangeCoordinate { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg3;
- (void)dirtyCellsForRemovalOfRows:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1 fromTable:(struct __CFUUID { }*)arg2 tableRange:(struct TSCERangeCoordinate { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg3;
- (void)dirtyCellsForUpgrade;
- (void)documentDidLoad;
- (id)documentLocale;
- (unsigned long long)documentRandomSeed;
- (id)documentRoot;
- (void)endBatchingGroupCellDirtying;
- (void)endSuppressingWillModifyCalls;
- (void)enumerateFormulaOwnersUsingBlock:(id)arg1;
- (id)escapedStringForRangeReference:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1 contextSheetName:(id)arg2 stickyBits:(unsigned char)arg3 isRangeWithFunction:(bool)arg4 forceEscaping:(bool)arg5;
- (id)escapedStringForRangeReference:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1 hostTableID:(struct __CFUUID { }*)arg2 stickyBits:(unsigned char)arg3 isRangeWithFunction:(bool)arg4 forceEscaping:(bool)arg5;
- (void)executeBlockWhileCalculationEngineIsNotWriting:(id)arg1;
- (id)extendTableIDHistoryWithRewrite:(id)arg1;
- (void)foreachFormulaInOwner:(struct __CFUUID { }*)arg1 block:(id)arg2;
- (struct vector<TSUColumnRowCoordinate, std::__1::allocator<TSUColumnRowCoordinate> > { struct { /* ? */ } *x1; struct { /* ? */ } *x2; struct __compressed_pair<TSUColumnRowCoordinate *, std::__1::allocator<TSUColumnRowCoordinate> > { struct { /* ? */ } *x_3_1_1; } x3; })formulaCoordsReferringToRange:(const struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; }*)arg1 fromOwner:(struct __CFUUID { }*)arg2;
- (struct __CFUUID { }*)formulaOwnerIDForFormulaOwnerID:(struct __CFUUID { }*)arg1;
- (struct __CFUUID { }*)formulaOwnerIDForFormulaOwnerUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1;
- (int)forwardRegisterOwnerWithOwnerID:(struct __CFUUID { }*)arg1 legacyGlobalID:(id)arg2;
- (void)geometryVolatileFunctionsAreDirtyInOwner:(struct __CFUUID { }*)arg1;
- (void)headerStateOfTableChanged:(struct __CFUUID { }*)arg1;
- (void)headerStateOfTableChanged:(struct __CFUUID { }*)arg1 changeIsForColumns:(bool)arg2;
- (void)indirectCallsAreDirty;
- (id)init;
- (id)initFromUnarchiver:(id)arg1;
- (id)initWithContext:(id)arg1;
- (void)initializeDispatchObjects;
- (void)invalidateAfterRecalc;
- (bool)isCellReferenceDirty:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; }*)arg1;
- (unsigned long long)loadFromFileVersion;
- (void)localeVolatileFunctionsAreDirty;
- (void)locationVolatileFunctionsAreDirty;
- (void)markOnlyDependentsDirty:(const struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; }*)arg1;
- (id)namedReferenceManager;
- (void)notifyObserversOfRecalcProgress;
- (unsigned long long)numFormulaCellsInOwner:(struct __CFUUID { }*)arg1;
- (unsigned long long)numberOfCellsWithFormulas;
- (struct __CFUUID { }*)ownerIDForLegacyGlobalID:(id)arg1 registeringIfNeeded:(bool)arg2;
- (void)ownerIsDirty:(struct __CFUUID { }*)arg1;
- (bool)ownerIsRegistered:(struct __CFUUID { }*)arg1;
- (bool)ownerUidIsRegisterd:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1;
- (void)p_addApplicationNotification;
- (void)p_blockUntilRecalcIsCompleteOnNewThreadWithTimeout:(id)arg1;
- (void)p_blockUntilRecalcTaskExitedWithTimeout:(double)arg1;
- (void)p_enqueueTaskForCell:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; })arg1;
- (void)p_recalcOneCellHoldingReadLock:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; })arg1 formulaOwner:(id)arg2 hasExistingCalculatedPrecedents:(bool)arg3 isInACycle:(bool)arg4;
- (struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; })p_refillRecalcQueue;
- (void)p_removeApplicationNotification;
- (void)p_startRecalculationTask;
- (id)p_stringForRangeReference:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1 hostTableID:(struct __CFUUID { }*)arg2 contextSheetName:(id)arg3 stickyBits:(unsigned char)arg4 isRangeWithFunction:(bool)arg5 quoteComponents:(bool)arg6 forceEscaping:(bool)arg7;
- (id)packageLocator;
- (bool)parseComponentsOfReference:(id)arg1 gettingSheetName:(id*)arg2 gettingTableName:(id*)arg3 gettingRest:(id*)arg4;
- (struct { unsigned short x1; unsigned char x2; unsigned char x3; })parseStringAsGeometricReferenceComponent:(id)arg1 inResolver:(id)arg2 outStickyBits:(char *)arg3 gettingReferencesMatchingInputAsPrefix:(id*)arg4;
- (struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })parseStringAsReference:(id)arg1 contextResolver:(id)arg2 contextSheetName:(id)arg3 gettingSpecifiedSheetName:(id*)arg4 gettingSpecifiedTableName:(id*)arg5 gettingRest:(id*)arg6 gettingReferencesMatchingInputAsPrefix:(id*)arg7 gettingStickyBits:(char *)arg8 filterColons:(bool)arg9 referenceIsComplete:(bool)arg10 outNamesUsed:(bool*)arg11;
- (struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })parseStringAsReference:(id)arg1 contextResolver:(id)arg2 contextSheetName:(id)arg3 gettingSpecifiedSheetName:(id*)arg4 gettingSpecifiedTableName:(id*)arg5 gettingRest:(id*)arg6 gettingReferencesMatchingInputAsPrefix:(id*)arg7 gettingStickyBits:(char *)arg8 filterColons:(bool)arg9 referenceIsComplete:(bool)arg10 outNamesUsed:(bool*)arg11 abortObject:(id)arg12;
- (struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })parseStringAsReference:(id)arg1 tableName:(id)arg2 rest:(id)arg3 contextResolver:(id)arg4 contextSheetName:(id)arg5 gettingReferencesMatchingInputAsPrefix:(id*)arg6 gettingStickyBits:(char *)arg7 filterColons:(bool)arg8 referenceIsComplete:(bool)arg9 outNamesUsed:(bool*)arg10;
- (struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })parseStringAsReference:(id)arg1 tableName:(id)arg2 rest:(id)arg3 contextResolver:(id)arg4 contextSheetName:(id)arg5 gettingReferencesMatchingInputAsPrefix:(id*)arg6 gettingStickyBits:(char *)arg7 filterColons:(bool)arg8 referenceIsComplete:(bool)arg9 outNamesUsed:(bool*)arg10 abortObject:(id)arg11;
- (struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })parseStringAsReferenceComponentIntersection:(id)arg1 inResolver:(id)arg2 inTableNamed:(id)arg3 preferredGeometricResolver:(id)arg4 defaultResolver:(id)arg5 outStickyBits:(char *)arg6 gettingReferencesMatchingInputAsPrefix:(id*)arg7 requireFullMatches:(bool)arg8 filterColons:(bool)arg9 outNamesUsed:(bool*)arg10 abortObject:(id)arg11;
- (void)pauseRecalculation;
- (void)pauseRecalculationForBlock:(id)arg1;
- (struct unordered_set<TSCECReference, TSCECReferenceHash, TSCECReferenceEqual, std::__1::allocator<TSCECReference> > { struct __hash_table<TSCECReference, TSCECReferenceHash, TSCECReferenceEqual, std::__1::allocator<TSCECReference> > { struct unique_ptr<std::__1::__hash_node<TSCECReference, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECReference, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<TSCECReference, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECReference, void *> *> > > { struct __hash_node<TSCECReference, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<TSCECReference, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<TSCECReference, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<TSCECReference, void *> *>, std::__1::allocator<std::__1::__hash_node<TSCECReference, void *> > > { struct __hash_node_base<std::__1::__hash_node<TSCECReference, void *> *> { struct __hash_node<TSCECReference, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, TSCECReferenceHash> { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, TSCECReferenceEqual> { float x_4_2_1; } x_1_1_4; } x1; })precedentsOfCell:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct __CFUUID {} *x2; })arg1;
- (int)preferredDispatchQueueSize;
- (id)previousLocaleIdentifier;
- (void)randomVolatileFunctionsAreDirty;
- (struct TSCERangeCoordinate { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })rangeCoordForCellHandleRange:(struct { struct { unsigned short x_1_1_1; unsigned char x_1_1_2; unsigned char x_1_1_3; } x1; struct { unsigned short x_2_1_1; unsigned char x_2_1_2; unsigned char x_2_1_3; } x2; })arg1 inTable:(struct __CFUUID { }*)arg2;
- (bool)rangeIsWithinTable:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1;
- (void)rangeReferenceIsDirty:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; }*)arg1;
- (bool)recalcHoldingReadLock;
- (void)recalcHoldingWriteLock;
- (void)recalculateWithTimeout:(double)arg1;
- (bool)recalculationIsPaused;
- (bool)referenceIsValid:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1;
- (bool)referenceWasGuaranteedCleanAtRecalcCycleStart:(struct { int x1; union { struct { struct { unsigned short x_1_3_1; unsigned char x_1_3_2; unsigned char x_1_3_3; } x_1_2_1; struct __CFUUID {} *x_1_2_2; } x_2_1_1; struct { struct TSCERangeCoordinate { struct { unsigned short x_1_4_1; unsigned char x_1_4_2; unsigned char x_1_4_3; } x_1_3_1; struct { unsigned short x_2_4_1; unsigned char x_2_4_2; unsigned char x_2_4_3; } x_1_3_2; } x_2_2_1; struct __CFUUID {} *x_2_2_2; } x_2_1_2; struct { struct { struct TSCERangeCoordinate { struct { unsigned short x_1_5_1; unsigned char x_1_5_2; unsigned char x_1_5_3; } x_1_4_1; struct { unsigned short x_2_5_1; unsigned char x_2_5_2; unsigned char x_2_5_3; } x_1_4_2; } x_1_3_1; struct __CFUUID {} *x_1_3_2; } x_3_2_1; int x_3_2_2; } x_2_1_3; struct __CFUUID {} *x_2_1_4; struct { unsigned long long x_5_2_1; unsigned long long x_5_2_2; } x_2_1_5; } x2; })arg1;
- (int)registerOwnerWithOwnerID:(struct __CFUUID { }*)arg1 owner:(id)arg2 referenceResolver:(id)arg3;
- (int)registerOwnerWithOwnerID:(struct __CFUUID { }*)arg1 owner:(id)arg2 referenceResolver:(id)arg3 mergeOwner:(bool)arg4;
- (void)removeAllFormulasFromOwner:(struct __CFUUID { }*)arg1;
- (void)removeCalculationStateObserver:(id)arg1;
- (void)removeFormula:(struct { unsigned int x1 : 24; unsigned int x2 : 8; })arg1 inOwner:(struct __CFUUID { }*)arg2;
- (void)removeFormulasFromRange:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1;
- (void)replaceFormula:(struct { unsigned int x1 : 24; unsigned int x2 : 8; })arg1 inOwner:(struct __CFUUID { }*)arg2 precedentIterator:(int (*)arg3 userData:(void*)arg4 hasRandomVolatileFunctions:(bool*)arg5;
- (void)replaceFormula:(struct { unsigned int x1 : 24; unsigned int x2 : 8; })arg1 inOwner:(struct __CFUUID { }*)arg2 precedentIterator:(int (*)arg3 userData:(void*)arg4 hasRandomVolatileFunctions:(bool*)arg5 clearCycle:(bool)arg6;
- (id)resolverForTableID:(struct __CFUUID { }*)arg1;
- (id)resolverForTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1;
- (void)resumeRecalculation;
- (id)retain;
- (void)rollbackTableIDHistoryWithRewrite:(id)arg1;
- (void)saveToArchiver:(id)arg1;
- (void)setAccessController:(id)arg1;
- (void)setCurrentDate:(id)arg1;
- (void)setCurrentTableIdRemapper:(id)arg1;
- (void)setCurrentTimeZone:(id)arg1;
- (void)setDocumentRandomSeed:(unsigned long long)arg1;
- (void)setLoadFromFileVersion:(unsigned long long)arg1;
- (void)setOwnerIDForLegacyGlobalID:(id)arg1 ownerID:(struct __CFUUID { }*)arg2;
- (void)setTransposingTableID:(struct __CFUUID { }*)arg1;
- (void)setXLImportDateMode:(int)arg1;
- (bool)shouldAbortRecalculation;
- (bool)shouldDelayArchiving;
- (void)startRecalcTaskIfNecessary;
- (void)startRecalculation;
- (id)stringForRangeReference:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1 contextSheetName:(id)arg2 stickyBits:(unsigned char)arg3 isRangeWithFunction:(bool)arg4;
- (id)stringForRangeReference:(struct { struct TSCERangeCoordinate { struct { unsigned short x_1_2_1; unsigned char x_1_2_2; unsigned char x_1_2_3; } x_1_1_1; struct { unsigned short x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; } x_1_1_2; } x1; struct __CFUUID {} *x2; })arg1 hostTableID:(struct __CFUUID { }*)arg2 stickyBits:(unsigned char)arg3 isRangeWithFunction:(bool)arg4;
- (id)tableIDHistory;
- (void)timeVolatileFunctionsAreDirty;
- (struct __CFUUID { }*)transposingTableID;
- (void)unregisterOwner:(struct __CFUUID { }*)arg1;
- (void)updateDirtyPrecedentCountsForRemovedIndex:(int)arg1 inTable:(struct __CFUUID { }*)arg2 forColumns:(bool)arg3;
- (struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; })uuidForTableUID:(const struct UUIDData<TSP::UUIDData> { union { unsigned char x_1_1_1[16]; struct { unsigned char x_2_2_1; unsigned char x_2_2_2; unsigned char x_2_2_3; unsigned char x_2_2_4; unsigned char x_2_2_5; unsigned char x_2_2_6; unsigned char x_2_2_7; unsigned char x_2_2_8; unsigned char x_2_2_9; unsigned char x_2_2_10; unsigned char x_2_2_11; unsigned char x_2_2_12; unsigned char x_2_2_13; unsigned char x_2_2_14; unsigned char x_2_2_15; unsigned char x_2_2_16; } x_1_1_2; struct { unsigned long long x_3_2_1; unsigned long long x_3_2_2; } x_1_1_3; } x1; }*)arg1 andIndex:(unsigned short)arg2 direction:(bool)arg3;
- (id)uuidReferenceMap;
- (int)xlImportDateMode;

@end
