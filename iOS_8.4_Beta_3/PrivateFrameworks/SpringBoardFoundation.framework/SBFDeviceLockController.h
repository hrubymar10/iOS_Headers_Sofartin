/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
 */

@interface SBFDeviceLockController : NSObject {
    SBFPasscodeLockAssertionManager *_assertionManager;
    bool _cachedPasscodeLockedOrBlocked;
    double _deviceLockUnblockTime;
    PCPersistentTimer *_deviceLockUnblockTimer;
    bool _hasBeenUnlockedOnceSinceBoot;
    bool _isBlockedForThermalCondition;
    bool _isPermanentlyBlocked;
    NSString *_lastIncorrectPasscodeAttempt;
    double _lastLockDate;
    bool _lastPasscodeLockStateWasLocked;
    int _lockState;
    bool _okToSendNotifications;
    NSDictionary *_originalDefaultsForRollback;
    NSObject<OS_dispatch_queue> *_persistentStateQueue;
    struct __CFRunLoopObserver { } *_runLoopObserver;
    bool _shouldFetchPasscodeLockState;
    bool _speculativePasscodeFailureChargeOutstanding;
    SBFPasscodeLockDisableAssertion *_transientPasscodeCheckingAssertion;
}

+ (id)_copyLockControllerDefaults;
+ (id)_journalPath;
+ (id)_journaledDefaultsAndTypes;
+ (void)_loadLockControllerDefaults:(id)arg1;
+ (void)_loadLockControllerDefaultsJournalIfNecessary;
+ (id)_lockStateDefaults;
+ (void)_updateLockControllerDefaultsJournal;

- (void)_addDeviceLockDisableAssertion:(id)arg1;
- (void)_cachePassword:(id)arg1;
- (void)_clearBlockedState;
- (void)_clearUnblockTimer;
- (void)_commitSpeculativeFailureCharge;
- (void)_enablePasscodeLockImmediately:(bool)arg1;
- (void)_evaluatePendingWipe;
- (void)_keybagLockStateChangedTo:(int)arg1;
- (void)_lockStateChangedFrom:(int)arg1 to:(int)arg2;
- (void)_noteBlockedReasonsMayHaveChanged;
- (void)_notePasscodeLockedOrBlockedStateMayHaveChanged:(bool)arg1;
- (void)_notifyOfFirstUnlock;
- (void)_persistentStateQueue_beginSpeculativeFailureCharge;
- (void)_persistentStateQueue_cancelSpeculativeFailureCharge;
- (void)_removeDeviceLockDisableAssertion:(id)arg1;
- (void)_scheduleUnblockTimer;
- (void)_sendBlockStateChangeNotification;
- (void)_setDeviceLockUnblockTime:(double)arg1;
- (void)_setLockState:(int)arg1;
- (void)_setupRunLoopObserverIfNecessary;
- (bool)_shouldLockDeviceNow;
- (bool)_shouldSuppressLockOnInit;
- (bool)_temporarilyBlocked;
- (void)_unblockTimerFired;
- (void)_uncachePasscodeIfNecessary;
- (void)_updateDeviceLockedState;
- (void)_wipeDevice;
- (bool)attemptDeviceUnlockWithPassword:(id)arg1 appRequested:(bool)arg2;
- (void)dealloc;
- (id)description;
- (bool)deviceHasBeenPasscodeUnlockedOnceSinceBoot;
- (bool)deviceHasPasscodeSet;
- (void)enablePasscodeLockImmediately;
- (id)init;
- (bool)isBlocked;
- (bool)isBlockedForThermalCondition;
- (bool)isPasscodeLocked;
- (bool)isPasscodeLockedCached;
- (bool)isPasscodeLockedOrBlocked;
- (bool)isPermanentlyBlocked:(double*)arg1;
- (id)lastLockDate;
- (void)notePasscodeEntryBegan;
- (void)notePasscodeEntryCancelled;
- (void)setBlockedForThermalCondition:(bool)arg1;
- (void)synchronize;
- (id)updateLockControllerDefaultsWithBlock:(id)arg1 journaled:(bool)arg2;

@end
