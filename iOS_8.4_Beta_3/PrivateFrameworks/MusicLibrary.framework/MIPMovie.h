/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@interface MIPMovie : PBCodable <NSCopying> {
    MIPArtist *_artist;
    int _audioLanguage;
    int _audioTrackId;
    int _audioTrackIndex;
    NSString *_extendedContentName;
    NSData *_flattenedChapterData;
    struct { 
        unsigned int rentalDuration : 1; 
        unsigned int rentalPlaybackDuration : 1; 
        unsigned int rentalPlaybackStartedDateTime : 1; 
        unsigned int rentalStartedDateTime : 1; 
        unsigned int audioLanguage : 1; 
        unsigned int audioTrackId : 1; 
        unsigned int audioTrackIndex : 1; 
        unsigned int subtitleLanguage : 1; 
        unsigned int subtitleTrackIndex : 1; 
        unsigned int videoQuality : 1; 
        unsigned int hasAlternateAudio : 1; 
        unsigned int hasChapterData : 1; 
        unsigned int hasSubtitles : 1; 
        unsigned int rental : 1; 
    } _has;
    bool _hasAlternateAudio;
    bool _hasChapterData;
    bool _hasSubtitles;
    NSString *_movieInfo;
    bool _rental;
    long long _rentalDuration;
    long long _rentalPlaybackDuration;
    long long _rentalPlaybackStartedDateTime;
    long long _rentalStartedDateTime;
    int _subtitleLanguage;
    int _subtitleTrackIndex;
    int _videoQuality;
}

@property(assign,retain) MIPArtist * artist;
@property(assign,readwrite) int audioLanguage;
@property(assign,readwrite) int audioTrackId;
@property(assign,readwrite) int audioTrackIndex;
@property(assign,retain) NSString * extendedContentName;
@property(assign,retain) NSData * flattenedChapterData;
@property(assign,readwrite) bool hasAlternateAudio;
@property(assign,readonly) bool hasArtist;
@property(assign,readwrite) bool hasAudioLanguage;
@property(assign,readwrite) bool hasAudioTrackId;
@property(assign,readwrite) bool hasAudioTrackIndex;
@property(assign,readwrite) bool hasChapterData;
@property(assign,readonly) bool hasExtendedContentName;
@property(assign,readonly) bool hasFlattenedChapterData;
@property(assign,readwrite) bool hasHasAlternateAudio;
@property(assign,readwrite) bool hasHasChapterData;
@property(assign,readwrite) bool hasHasSubtitles;
@property(assign,readonly) bool hasMovieInfo;
@property(assign,readwrite) bool hasRental;
@property(assign,readwrite) bool hasRentalDuration;
@property(assign,readwrite) bool hasRentalPlaybackDuration;
@property(assign,readwrite) bool hasRentalPlaybackStartedDateTime;
@property(assign,readwrite) bool hasRentalStartedDateTime;
@property(assign,readwrite) bool hasSubtitleLanguage;
@property(assign,readwrite) bool hasSubtitleTrackIndex;
@property(assign,readwrite) bool hasSubtitles;
@property(assign,readwrite) bool hasVideoQuality;
@property(assign,retain) NSString * movieInfo;
@property(assign,readwrite) bool rental;
@property(assign,readwrite) long long rentalDuration;
@property(assign,readwrite) long long rentalPlaybackDuration;
@property(assign,readwrite) long long rentalPlaybackStartedDateTime;
@property(assign,readwrite) long long rentalStartedDateTime;
@property(assign,readwrite) int subtitleLanguage;
@property(assign,readwrite) int subtitleTrackIndex;
@property(assign,readwrite) int videoQuality;

- (void).cxx_destruct;
- (id)artist;
- (int)audioLanguage;
- (int)audioTrackId;
- (int)audioTrackIndex;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (id)extendedContentName;
- (id)flattenedChapterData;
- (bool)hasAlternateAudio;
- (bool)hasArtist;
- (bool)hasAudioLanguage;
- (bool)hasAudioTrackId;
- (bool)hasAudioTrackIndex;
- (bool)hasChapterData;
- (bool)hasExtendedContentName;
- (bool)hasFlattenedChapterData;
- (bool)hasHasAlternateAudio;
- (bool)hasHasChapterData;
- (bool)hasHasSubtitles;
- (bool)hasMovieInfo;
- (bool)hasRental;
- (bool)hasRentalDuration;
- (bool)hasRentalPlaybackDuration;
- (bool)hasRentalPlaybackStartedDateTime;
- (bool)hasRentalStartedDateTime;
- (bool)hasSubtitleLanguage;
- (bool)hasSubtitleTrackIndex;
- (bool)hasSubtitles;
- (bool)hasVideoQuality;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (void)mergeFrom:(id)arg1;
- (id)movieInfo;
- (bool)readFrom:(id)arg1;
- (bool)rental;
- (long long)rentalDuration;
- (long long)rentalPlaybackDuration;
- (long long)rentalPlaybackStartedDateTime;
- (long long)rentalStartedDateTime;
- (void)setArtist:(id)arg1;
- (void)setAudioLanguage:(int)arg1;
- (void)setAudioTrackId:(int)arg1;
- (void)setAudioTrackIndex:(int)arg1;
- (void)setExtendedContentName:(id)arg1;
- (void)setFlattenedChapterData:(id)arg1;
- (void)setHasAlternateAudio:(bool)arg1;
- (void)setHasAudioLanguage:(bool)arg1;
- (void)setHasAudioTrackId:(bool)arg1;
- (void)setHasAudioTrackIndex:(bool)arg1;
- (void)setHasChapterData:(bool)arg1;
- (void)setHasHasAlternateAudio:(bool)arg1;
- (void)setHasHasChapterData:(bool)arg1;
- (void)setHasHasSubtitles:(bool)arg1;
- (void)setHasRental:(bool)arg1;
- (void)setHasRentalDuration:(bool)arg1;
- (void)setHasRentalPlaybackDuration:(bool)arg1;
- (void)setHasRentalPlaybackStartedDateTime:(bool)arg1;
- (void)setHasRentalStartedDateTime:(bool)arg1;
- (void)setHasSubtitleLanguage:(bool)arg1;
- (void)setHasSubtitleTrackIndex:(bool)arg1;
- (void)setHasSubtitles:(bool)arg1;
- (void)setHasVideoQuality:(bool)arg1;
- (void)setMovieInfo:(id)arg1;
- (void)setRental:(bool)arg1;
- (void)setRentalDuration:(long long)arg1;
- (void)setRentalPlaybackDuration:(long long)arg1;
- (void)setRentalPlaybackStartedDateTime:(long long)arg1;
- (void)setRentalStartedDateTime:(long long)arg1;
- (void)setSubtitleLanguage:(int)arg1;
- (void)setSubtitleTrackIndex:(int)arg1;
- (void)setVideoQuality:(int)arg1;
- (int)subtitleLanguage;
- (int)subtitleTrackIndex;
- (int)videoQuality;
- (void)writeTo:(id)arg1;

@end
