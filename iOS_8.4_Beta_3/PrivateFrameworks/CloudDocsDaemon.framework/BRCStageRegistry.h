/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
 */

@interface BRCStageRegistry : NSObject <BRCLowDiskDelegate, BRCModule> {
    NSMutableSet *_activeDownloadStageIDs;
    NSMutableSet *_activeUploadStageIDs;
    NSMutableSet *_containersWithUnflushedFileIDs;
    int _deviceID;
    NSObject<OS_dispatch_queue> *_flushingQueue;
    bool _isCancelled;
    NSMutableDictionary *_lockedFileIDs;
    NSObject<OS_dispatch_source> *_lockedTestTimer;
    bool _lowDiskSpace;
    BRCStagePersistedState *_persistedState;
    NSObject<OS_dispatch_queue> *_queue;
    BRCAccountSession *_session;
    unsigned long long _stageDirectoryFileID;
    NSString *_stageDirectoryPath;
    int _suspendCount;
    NSMutableSet *_unflushedStagedFileIDs;
}

@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,readonly) int deviceID;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) bool isCancelled;
@property(assign,readonly) Class superclass;

+ (void)migrateStageToVersion2_0WithSession:(id)arg1;

- (void).cxx_destruct;
- (int)_openStageDirectory:(unsigned char)arg1;
- (id)_pathInStage:(unsigned long long)arg1 index:(unsigned char*)arg2 generationID:(unsigned int*)arg3;
- (int)_performInStageDirectory:(unsigned char)arg1 block:(id)arg2;
- (void)_testLockedFiles;
- (void)_watchLockedRelpath:(id)arg1;
- (void)applyMetadataOnFileDescriptor:(int)arg1 liveFileDescriptor:(int)arg2 container:(id)arg3 statInfo:(id)arg4 version:(id)arg5;
- (void)associateDownloadStageID:(id)arg1 withOperation:(id)arg2;
- (void)associateUploadStageID:(id)arg1 withOperation:(id)arg2;
- (void)cancel;
- (void)cleanupStagedDownloadWithID:(id)arg1;
- (void)cleanupStagedUploadWithID:(id)arg1;
- (void)close;
- (bool)copyPackageFileWithPackageFd:(int)arg1 toStageFd:(int)arg2 relpath:(id)arg3;
- (id)createURLForDownloadWithStageID:(id)arg1 name:(id)arg2;
- (id)createURLForUploadWithStageID:(id)arg1 name:(id)arg2;
- (void)dealloc;
- (int)deviceID;
- (bool)didFlushStagedFileID:(unsigned long long)arg1;
- (bool)existsInOldVersionStage:(unsigned long long)arg1 generationID:(unsigned int*)arg2;
- (bool)existsInStage:(unsigned long long)arg1 generationID:(unsigned int*)arg2;
- (void)forgetWatchedLockedFileID:(unsigned long long)arg1;
- (void)forgetWatchedLockedFileIDsForContainer:(id)arg1;
- (long long)garbageCollect:(bool)arg1;
- (id)initWithAccountSession:(id)arg1;
- (bool)isCancelled;
- (void)lowDiskStatusChangedForDevice:(int)arg1 hasEnoughSpace:(bool)arg2;
- (bool)makeDirectoryInStageGatherFileID:(unsigned long long*)arg1 generationID:(unsigned int*)arg2 inContainer:(id)arg3 error:(id*)arg4;
- (id)makeNonLocalVersionSideFaultWithAdditionName:(id)arg1 container:(id)arg2 statInfo:(id)arg3 version:(id)arg4 error:(id*)arg5;
- (bool)makeSideFaultInStageGatherFileID:(unsigned long long*)arg1 generationID:(unsigned int*)arg2 documentID:(unsigned int*)arg3 properties:(id)arg4 inContainer:(id)arg5 forCreation:(bool)arg6 error:(id*)arg7;
- (bool)mayLockFileID:(unsigned long long)arg1;
- (bool)moveFromStage:(unsigned long long)arg1 toPath:(id)arg2 fileName:(id)arg3 error:(id*)arg4;
- (bool)moveFromStageToGraveyard:(unsigned long long)arg1;
- (bool)moveOldVersionFromPath:(id)arg1 error:(id*)arg2;
- (bool)moveToGraveyardFromPath:(id)arg1 error:(id*)arg2;
- (id)nonLocalFaultURLForAdditionName:(id)arg1;
- (void)open;
- (long long)purgableSpace;
- (long long)purgeOldFiles;
- (bool)rememberStagedDownloadWithID:(id)arg1 gatherFileID:(unsigned long long*)arg2 generationID:(unsigned int*)arg3 documentID:(unsigned int*)arg4 container:(id)arg5 error:(id*)arg6;
- (void)resume;
- (void)setIsCancelled:(bool)arg1;
- (void)suspend;
- (bool)transferDocumentID:(unsigned int)arg1 fromOldVersionStage:(unsigned long long)arg2 toStage:(unsigned long long)arg3;
- (void)willFlushAllStagedFileIDs;

@end
