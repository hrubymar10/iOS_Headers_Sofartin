/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@interface GEORouteHypothesizer : NSObject <GEOETAUpdaterDelegate, GEORouteHypothesizerUpdaterDelegate> {
    NSDate *_arrivalDate;
    GEOETARoute *_baselineETARoute;
    <GEORouteHypothesizerDelegate> *_delegate;
    NSDate *_departureDate;
    GEOComposedWaypoint *_destination;
    unsigned long long _etaUpdateFrequency;
    double _etaUpdateInterval;
    GEOETAUpdater *_etaUpdater;
    GEORoute *_existingRoute;
    GEODirectionsRequestFeedback *_feedback;
    id _handler;
    GEORouteHypothesis *_hypothesis;
    NSDate *_lastETARequestDate;
    GEOLocation *_lastLocation;
    GEOETARoute *_liveETARoute;
    GEOLocationShifter *_locationShifter;
    GEORouteAttributes *_routeAttributes;
    GEOComposedWaypoint *_source;
    NSDate *_suggestedNextUpdateDate;
    GEORouteHypothesizerUpdater *_updater;
    NSData *_usualRouteData;
}

@property(assign,readonly) NSDate * arrivalDate;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <GEORouteHypothesizerDelegate> * delegate;
@property(assign,readonly) NSDate * departureDate;
@property(assign,copy) NSString * description;
@property(assign,readonly) GEOComposedWaypoint * destination;
@property(assign,readwrite) unsigned long long etaUpdateFrequency;
@property(assign,retain) GEODirectionsRequestFeedback * feedback;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) GEOComposedRoute * route;
@property(assign,readonly) GEOComposedWaypoint * source;
@property(assign,readonly) NSDate * suggestedNextUpdateDate;
@property(assign,readonly) Class superclass;
@property(assign,readonly) bool supportsDirections;
@property(assign,readonly) bool supportsLiveTraffic;

- (void)_commonInit;
- (void)_createUpdaterWithStartingLocation:(id)arg1;
- (void)_refreshETAWithRouteMatch:(id)arg1;
- (void)_updateETAWithRouteMatch:(id)arg1;
- (void)_updateLocation:(id)arg1 hypothesisHandler:(id)arg2;
- (void)_updateLocationAndETAUpdateInterval;
- (id)arrivalDate;
- (void)dealloc;
- (id)delegate;
- (id)departureDate;
- (id)destination;
- (unsigned long long)etaUpdateFrequency;
- (void)etaUpdater:(id)arg1 receivedETATrafficUpdateResponse:(id)arg2;
- (void)etaUpdater:(id)arg1 receivedError:(id)arg2;
- (void)etaUpdater:(id)arg1 willSendETATrafficUpdateRequest:(id)arg2;
- (void)etaUpdaterReceivedInvalidRoute:(id)arg1 newRoute:(id)arg2 incidentsOnRoute:(id)arg3 incidentsOffRoute:(id)arg4;
- (id)etaUpdaterRoutesForETATrafficUpdateRequest:(id)arg1;
- (void)etaUpdaterUpdatedETA:(id)arg1;
- (id)feedback;
- (id)initWithExistingRoute:(id)arg1 source:(id)arg2 destination:(id)arg3 etaUpdater:(id)arg4;
- (id)initWithSource:(id)arg1 toDestination:(id)arg2 arrivalDate:(id)arg3 usualRouteData:(id)arg4;
- (id)initWithSource:(id)arg1 toDestination:(id)arg2 departureDate:(id)arg3 usualRouteData:(id)arg4;
- (id)route;
- (void)routeHypothesizerUpdater:(id)arg1 receivedNewRoute:(id)arg2 request:(id)arg3 response:(id)arg4;
- (void)routeHypothesizerUpdater:(id)arg1 willRequestNewRoute:(id)arg2;
- (void)setDelegate:(id)arg1;
- (void)setEtaUpdateFrequency:(unsigned long long)arg1;
- (void)setFeedback:(id)arg1;
- (id)source;
- (id)suggestedNextUpdateDate;
- (bool)supportsDirections;
- (bool)supportsLiveTraffic;
- (void)updateLocation:(id)arg1 hypothesisHandler:(id)arg2;

@end
