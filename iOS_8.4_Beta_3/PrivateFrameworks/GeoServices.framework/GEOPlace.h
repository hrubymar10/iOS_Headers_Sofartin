/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@interface GEOPlace : PBCodable <GEOURLSerializable, NSCopying> {
    GEOAddress *_address;
    int _addressGeocodeAccuracy;
    double _area;
    NSMutableArray *_business;
    GEOLatLng *_center;
    NSMutableArray *_entryPoints;
    long long _geoId;
    struct { 
        unsigned int area : 1; 
        unsigned int geoId : 1; 
        unsigned int uID : 1; 
        unsigned int addressGeocodeAccuracy : 1; 
        unsigned int localSearchProviderID : 1; 
        unsigned int type : 1; 
        unsigned int isDisputed : 1; 
    } _has;
    NSString *_inputLanguage;
    bool _isDisputed;
    int _localSearchProviderID;
    GEOMapRegion *_mapRegion;
    NSString *_name;
    GEOAddress *_phoneticAddress;
    NSString *_phoneticLocaleIdentifier;
    NSString *_phoneticName;
    NSString *_spokenAddress;
    NSString *_spokenName;
    GEOStructuredAddress *_spokenStructuredAddress;
    GEOTimezone *_timezone;
    int _type;
    long long _uID;
}

@property (nonatomic, retain) GEOAddress *address;
@property (nonatomic) int addressGeocodeAccuracy;
@property (nonatomic) double area;
@property (nonatomic, retain) NSMutableArray *business;
@property (nonatomic, retain) GEOLatLng *center;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, retain) NSMutableArray *entryPoints;
@property (nonatomic, readonly) GEOBusiness *firstBusiness;
@property (nonatomic) long long geoId;
@property (nonatomic, readonly) bool hasAddress;
@property (nonatomic) bool hasAddressGeocodeAccuracy;
@property (nonatomic) bool hasArea;
@property (nonatomic, readonly) bool hasCenter;
@property (nonatomic) bool hasGeoId;
@property (nonatomic, readonly) bool hasInputLanguage;
@property (nonatomic) bool hasIsDisputed;
@property (nonatomic) bool hasLocalSearchProviderID;
@property (nonatomic, readonly) bool hasMapRegion;
@property (nonatomic, readonly) bool hasName;
@property (nonatomic, readonly) bool hasPhoneticAddress;
@property (nonatomic, readonly) bool hasPhoneticLocaleIdentifier;
@property (nonatomic, readonly) bool hasPhoneticName;
@property (nonatomic, readonly) bool hasSpokenAddress;
@property (nonatomic, readonly) bool hasSpokenName;
@property (nonatomic, readonly) bool hasSpokenStructuredAddress;
@property (nonatomic, readonly) bool hasTimezone;
@property (nonatomic) bool hasType;
@property (nonatomic) bool hasUID;
@property (readonly) unsigned long long hash;
@property (nonatomic, retain) NSString *inputLanguage;
@property (nonatomic) bool isDisputed;
@property (nonatomic) int localSearchProviderID;
@property (nonatomic, retain) GEOMapRegion *mapRegion;
@property (nonatomic, retain) NSString *name;
@property (nonatomic, retain) GEOAddress *phoneticAddress;
@property (nonatomic, retain) NSString *phoneticLocaleIdentifier;
@property (nonatomic, retain) NSString *phoneticName;
@property (nonatomic, retain) NSString *spokenAddress;
@property (nonatomic, retain) NSString *spokenName;
@property (nonatomic, retain) GEOStructuredAddress *spokenStructuredAddress;
@property (readonly) Class superclass;
@property (nonatomic, retain) GEOTimezone *timezone;
@property (nonatomic) int type;
@property (nonatomic) long long uID;

+ (id)_placesFromDirectionsAction:(id)arg1 hasCurrentLocation:(bool*)arg2 currentLocationIndex:(unsigned long long*)arg3 options:(id*)arg4;
+ (id)_placesFromPresentAction:(id)arg1 hasCurrentLocation:(bool*)arg2 currentLocationIndex:(unsigned long long*)arg3 options:(id*)arg4;
+ (id)_placesFromShowAction:(id)arg1 hasCurrentLocation:(bool*)arg2 currentLocationIndex:(unsigned long long*)arg3 options:(id*)arg4;
+ (id)_placesFromURL:(id)arg1 hasCurrentLocation:(bool*)arg2 currentLocationIndex:(unsigned long long*)arg3 options:(id*)arg4;
+ (id)_urlForAction:(id)arg1 rison:(id)arg2;
+ (id)_urlForDirectionsFromOrigin:(id)arg1 toDestination:(id)arg2 options:(id)arg3;
+ (id)_urlRepresentationForCurrentLocation;
+ (id)_urlToPresentAction:(id)arg1 present:(id)arg2;
+ (id)_urlToPresentCurrentLocationAndPlaces:(id)arg1 currentLocationIndex:(unsigned long long)arg2 options:(id)arg3;
+ (id)_urlToPresentCurrentLocationWithOptions:(id)arg1;
+ (id)_urlToPresentDirectionsForItems:(id)arg1 options:(id)arg2;
+ (id)_urlToPresentDirectionsForPlaces:(id)arg1 options:(id)arg2;
+ (id)_urlToPresentPlaces:(id)arg1 options:(id)arg2;
+ (id)_urlToShowCurrentLocationAndPlaces:(id)arg1 currentLocationIndex:(unsigned long long)arg2 options:(id)arg3;
+ (id)_urlToShowCurrentLocationWithOptions:(id)arg1;
+ (id)_urlToShowPlaces:(id)arg1 options:(id)arg2;
+ (id)_urlToShowURLRepresentations:(id)arg1 options:(id)arg2;
+ (id)placeForPlaceData:(id)arg1;

- (bool)_isEquivalentURLRepresentationTo:(id)arg1;
- (id)_urlForDirectionsFromCurrentLocationWithOptions:(id)arg1;
- (id)_urlForDirectionsFromPlace:(id)arg1 options:(id)arg2;
- (id)_urlForDirectionsToCurrentLocationWithOptions:(id)arg1;
- (id)_urlForDirectionsToPlace:(id)arg1 options:(id)arg2;
- (id)_urlToPresentDirectionsFromCurrentLocationWithOptions:(id)arg1;
- (id)_urlToPresentDirectionsFromPlace:(id)arg1 options:(id)arg2;
- (id)_urlToPresentDirectionsToCurrentLocationWithOptions:(id)arg1;
- (id)_urlToPresentDirectionsToPlace:(id)arg1 options:(id)arg2;
- (id)_urlToPresentWithOptions:(id)arg1;
- (id)_urlToShowWithOptions:(id)arg1;
- (void)addBusiness:(id)arg1;
- (void)addEntryPoint:(id)arg1;
- (id)address;
- (id)addressDictionary;
- (int)addressGeocodeAccuracy;
- (double)area;
- (id)arrivalMapRegion;
- (id)arrivalMapRegionForTransportType:(int)arg1;
- (id)bestName;
- (id)business;
- (id)businessAtIndex:(unsigned long long)arg1;
- (unsigned long long)businessCount;
- (unsigned long long)businessID;
- (id)center;
- (id)clLocation;
- (id)clRegion;
- (void)clearBusiness;
- (void)clearEntryPoints;
- (struct { double x1; double x2; })coordinate;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (id)entryPointAtIndex:(unsigned long long)arg1;
- (id)entryPoints;
- (unsigned long long)entryPointsCount;
- (id)firstBusiness;
- (long long)geoId;
- (id)geoMapItem;
- (bool)hasAddress;
- (bool)hasAddressGeocodeAccuracy;
- (bool)hasArea;
- (bool)hasCenter;
- (bool)hasGeoId;
- (bool)hasInputLanguage;
- (bool)hasIsDisputed;
- (bool)hasLocalSearchProviderID;
- (bool)hasMapRegion;
- (bool)hasName;
- (bool)hasPhoneticAddress;
- (bool)hasPhoneticLocaleIdentifier;
- (bool)hasPhoneticName;
- (bool)hasSpokenAddress;
- (bool)hasSpokenName;
- (bool)hasSpokenStructuredAddress;
- (bool)hasTimezone;
- (bool)hasType;
- (bool)hasUID;
- (unsigned long long)hash;
- (id)initWithCLLocation:(id)arg1;
- (id)initWithLatitude:(double)arg1 longitude:(double)arg2;
- (id)initWithLatitude:(double)arg1 longitude:(double)arg2 addressDictionary:(id)arg3;
- (id)initWithLocation:(id)arg1 addressDictionary:(id)arg2 name:(id)arg3 businessURL:(id)arg4 phoneNumber:(id)arg5 muid:(unsigned long long)arg6 attributionID:(id)arg7 sampleSizeForUserRatingScore:(unsigned int)arg8 normalizedUserRatingScore:(float)arg9;
- (id)initWithName:(id)arg1 placeType:(int)arg2 areaInMeters:(double)arg3;
- (id)initWithPlaceInfo:(id)arg1 entity:(id)arg2 address:(id)arg3 bounds:(id)arg4 roadAccessInfo:(id)arg5;
- (id)initWithPlacemark:(id)arg1;
- (id)initWithUrlRepresentation:(id)arg1;
- (id)inputLanguage;
- (bool)isDisputed;
- (bool)isEqual:(id)arg1;
- (int)localSearchProviderID;
- (id)mapRegion;
- (void)mergeFrom:(id)arg1;
- (id)name;
- (id)phoneticAddress;
- (id)phoneticLocaleIdentifier;
- (id)phoneticName;
- (double)radialDistance;
- (bool)readFrom:(id)arg1;
- (void)setAddress:(id)arg1;
- (void)setAddressGeocodeAccuracy:(int)arg1;
- (void)setArea:(double)arg1;
- (void)setBusiness:(id)arg1;
- (void)setCenter:(id)arg1;
- (void)setEntryPoints:(id)arg1;
- (void)setGeoId:(long long)arg1;
- (void)setHasAddressGeocodeAccuracy:(bool)arg1;
- (void)setHasArea:(bool)arg1;
- (void)setHasGeoId:(bool)arg1;
- (void)setHasIsDisputed:(bool)arg1;
- (void)setHasLocalSearchProviderID:(bool)arg1;
- (void)setHasType:(bool)arg1;
- (void)setHasUID:(bool)arg1;
- (void)setInputLanguage:(id)arg1;
- (void)setIsDisputed:(bool)arg1;
- (void)setLocalSearchProviderID:(int)arg1;
- (void)setMapRegion:(id)arg1;
- (void)setName:(id)arg1;
- (void)setPhoneticAddress:(id)arg1;
- (void)setPhoneticLocaleIdentifier:(id)arg1;
- (void)setPhoneticName:(id)arg1;
- (void)setSpokenAddress:(id)arg1;
- (void)setSpokenName:(id)arg1;
- (void)setSpokenStructuredAddress:(id)arg1;
- (void)setTimezone:(id)arg1;
- (void)setType:(int)arg1;
- (void)setUID:(long long)arg1;
- (id)spokenAddress;
- (id)spokenName;
- (id)spokenStructuredAddress;
- (id)timezone;
- (int)type;
- (long long)uID;
- (id)urlRepresentation;
- (void)writeTo:(id)arg1;

@end
