/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/GeoServices.framework/GeoServices
 */

@interface GEOMapItemStorage : PBCodable <GEOMapItemPrivate, NSCopying> {
    GEOMapItemClientAttributes *_clientAttributes;
    GEOPlace *_place;
    GEOPDPlace *_placeData;
    GEOPlaceResult *_placeResult;
}

@property(getter=_additionalPlaceInfos,assign,readonly) NSArray * additionalPlaceInfos;
@property(assign,readonly) NSDictionary * addressDictionary;
@property(getter=_areaInMeters,assign,readonly) double areaInMeters;
@property(assign,readonly) NSArray * areasOfInterest;
@property(getter=_attribution,assign,readonly) GEOMapItemPlaceAttribution * attribution;
@property(getter=_businessClaim,assign,readonly) GEOPDBusinessClaim * businessClaim;
@property(getter=_businessURL,assign,readonly) NSString * businessURL;
@property(assign,readonly) struct { double x1; double x2; } centerCoordinate;
@property(getter=_clientAttributes,assign,readonly) GEOMapItemClientAttributes * clientAttributes;
@property(assign,retain) GEOMapItemClientAttributes * clientAttributes;
@property(assign,readonly) int contactAddressType;
@property(assign,readonly) bool contactIsMe;
@property(assign,readonly) NSString * contactName;
@property(assign,readonly) NSString * contactSpokenName;
@property(assign,readonly) struct { double x1; double x2; } coordinate;
@property(getter=_customIconID,assign,readonly) unsigned long long customIconID;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(getter=_disambiguationName,assign,readonly) NSString * disambiguationName;
@property(assign,readonly) GEOMapRegion * displayMapRegion;
@property(assign,readonly) GEOMapRegion * displayMapRegionOrNil;
@property(getter=isDisputed,assign,readonly) bool disputed;
@property(assign,readonly) NSData * encodedData;
@property(assign,readonly) NSDate * eventDate;
@property(assign,readonly) NSString * eventName;
@property(getter=_flyover,assign,readonly) GEOPDFlyover * flyover;
@property(getter=_flyoverAnnouncementMessage,assign,readonly) NSString * flyoverAnnouncement;
@property(assign,readonly) GEOAddress * geoAddress;
@property(assign,readonly) GEOMapRegion * geoFenceMapRegion;
@property(getter=_goodForKids,assign,readonly) bool goodForKids;
@property(getter=_hasAnyAmenities,assign,readonly) bool hasAnyAmenities;
@property(getter=_hasAreaInMeters,assign,readonly) bool hasAreaInMeters;
@property(getter=_hasBusinessClaim,assign,readonly) bool hasBusinessClaim;
@property(assign,readonly) bool hasClientAttributes;
@property(getter=_hasCurrentOperatingHours,assign,readonly) bool hasCurrentOperatingHours;
@property(getter=_hasDelivery,assign,readonly) bool hasDelivery;
@property(getter=_hasDeliveryAmenity,assign,readonly) bool hasDeliveryAmenity;
@property(getter=_hasFlyover,assign,readonly) bool hasFlyover;
@property(getter=_hasFlyoverAnnouncementMessage,assign,readonly) bool hasFlyoverAnnouncement;
@property(getter=_hasGoodForKidsAmenity,assign,readonly) bool hasGoodForKidsAmenity;
@property(getter=_hasMUID,assign,readonly) bool hasMUID;
@property(getter=_hasOperatingHours,assign,readonly) bool hasOperatingHours;
@property(assign,readonly) bool hasPlace;
@property(assign,readonly) bool hasPlaceData;
@property(assign,readonly) bool hasPlaceResult;
@property(getter=_hasPriceRange,assign,readonly) bool hasPriceRange;
@property(getter=_hasResolvablePartialInformation,assign,readonly) bool hasResolvablePartialInformation;
@property(getter=_hasResultProviderID,assign,readonly) bool hasResultProviderID;
@property(getter=_hasTakesReservationsAmenity,assign,readonly) bool hasTakesReservationsAmenity;
@property(getter=_hasTelephone,assign,readonly) bool hasTelephone;
@property(getter=_hasUserRatingScore,assign,readonly) bool hasUserRatingScore;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) bool isEventAllDay;
@property(assign,readonly) GEOMapRegion * mapRegion;
@property(getter=_muid,assign,readonly) unsigned long long muid;
@property(assign,readonly) NSString * name;
@property(getter=_needsAttribution,assign,readonly) bool needsAttribution;
@property(getter=_normalizedUserRatingScore,assign,readonly) float normalizedUserRatingScore;
@property(getter=_openingHoursOptions,assign,readonly) unsigned long long openingHoursOptions;
@property(getter=_operatingHours,assign,readonly) NSArray * operatingHours;
@property(getter=_photosAttribution,assign,readonly) GEOMapItemPhotosAttribution * photosAttribution;
@property(getter=_place,assign,readonly) GEOPlace * place;
@property(assign,retain) GEOPlace * place;
@property(getter=_placeAsData,assign,readonly) NSData * placeAsData;
@property(getter=_placeData,assign,readonly) GEOPDPlace * placeData;
@property(assign,retain) GEOPDPlace * placeData;
@property(getter=_placeDataAsData,assign,readonly) NSData * placeDataAsData;
@property(assign,retain) GEOPlaceResult * placeResult;
@property(getter=_placeType,assign,readonly) int placeType;
@property(getter=_poiSurveyURLString,assign,readonly) NSString * poiSurveyURLString;
@property(getter=_priceRange,assign,readonly) unsigned int priceRange;
@property(getter=_providerURL,assign,copy) NSURL * providerURL;
@property(getter=_resultProviderID,assign,readonly) int resultProviderID;
@property(getter=_reviewsAttribution,assign,readonly) GEOMapItemReviewsAttribution * reviewsAttribution;
@property(getter=_roadAccessPoints,assign,readonly) NSArray * roadAccessPoints;
@property(getter=_sampleSizeForUserRatingScore,assign,readonly) unsigned int sampleSizeForUserRatingScore;
@property(getter=_styleAttributes,assign,readonly) GEOFeatureStyleAttributes * styleAttributes;
@property(assign,readonly) Class superclass;
@property(getter=_takesReservations,assign,readonly) bool takesReservations;
@property(getter=_telephone,assign,readonly) NSString * telephone;
@property(assign,readonly) NSString * timezone;
@property(getter=isValid,assign,readonly) bool valid;
@property(getter=_vendorID,assign,copy) NSString * vendorID;
@property(getter=_webURL,assign,copy) NSURL * webURL;

+ (id)mapItemStorageForGEOMapItem:(id)arg1;
+ (id)mapItemStorageForGEOMapItem:(id)arg1 clientAttributes:(id)arg2;
+ (id)mapItemStorageForGEOMapItemPrivate:(id)arg1;
+ (id)mapItemStorageForPlace:(id)arg1;
+ (id)mapItemStorageForPlace:(id)arg1 clientAttributes:(id)arg2;
+ (id)mapItemStorageForPlaceData:(id)arg1;
+ (id)mapItemStorageForPlaceResult:(id)arg1;
+ (id)mapItemStorageForSerializedMapItemStorage:(id)arg1;
+ (id)mapItemStorageForSerializedPlaceData:(id)arg1;
+ (id)mapItemStorageToShareForGEOMapItem:(id)arg1;

- (id)_additionalPlaceInfos;
- (double)_areaInMeters;
- (id)_arrivalMapRegionForTransportType:(int)arg1;
- (id)_asPlaceInfo;
- (id)_attribution;
- (id)_businessClaim;
- (id)_businessURL;
- (id)_clientAttributes;
- (unsigned long long)_customIconID;
- (id)_disambiguationName;
- (id)_flyover;
- (id)_flyoverAnnouncementMessage;
- (id)_geoMapItem;
- (bool)_goodForKids;
- (bool)_hasAnyAmenities;
- (bool)_hasAreaInMeters;
- (bool)_hasBusinessClaim;
- (bool)_hasCurrentOperatingHours;
- (bool)_hasDelivery;
- (bool)_hasDeliveryAmenity;
- (bool)_hasFlyover;
- (bool)_hasFlyoverAnnouncementMessage;
- (bool)_hasGoodForKidsAmenity;
- (bool)_hasLocalizedCategoryNamesForType:(unsigned int)arg1;
- (bool)_hasMUID;
- (bool)_hasOperatingHours;
- (bool)_hasPriceRange;
- (bool)_hasResolvablePartialInformation;
- (bool)_hasResultProviderID;
- (bool)_hasTakesReservationsAmenity;
- (bool)_hasTelephone;
- (bool)_hasTravelTimeForTransportType:(int)arg1;
- (bool)_hasUserRatingScore;
- (id)_localizedCategoryNamesForType:(unsigned int)arg1;
- (id)_mapItemByStrippingOptionalData;
- (unsigned long long)_muid;
- (bool)_needsAttribution;
- (float)_normalizedUserRatingScore;
- (unsigned long long)_openingHoursOptions;
- (id)_operatingHours;
- (id)_photosAttribution;
- (id)_place;
- (id)_placeAsData;
- (id)_placeData;
- (id)_placeDataAsData;
- (int)_placeType;
- (id)_poiSurveyURLString;
- (unsigned int)_priceRange;
- (id)_providerURL;
- (int)_recommendedTransportType;
- (int)_resultProviderID;
- (id)_reviewsAttribution;
- (id)_roadAccessPoints;
- (unsigned int)_sampleSizeForUserRatingScore;
- (id)_spokenAddressForLocale:(id)arg1;
- (id)_styleAttributes;
- (bool)_takesReservations;
- (id)_telephone;
- (unsigned int)_travelDistanceForTransportType:(int)arg1;
- (unsigned int)_travelTimeForTransportType:(int)arg1;
- (id)_vendorID;
- (id)_webURL;
- (id)addressDictionary;
- (id)areasOfInterest;
- (struct { double x1; double x2; })centerCoordinate;
- (id)clientAttributes;
- (int)contactAddressType;
- (bool)contactIsMe;
- (id)contactName;
- (id)contactSpokenName;
- (struct { double x1; double x2; })coordinate;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (void)dealloc;
- (id)description;
- (id)dictionaryRepresentation;
- (id)displayMapRegion;
- (id)displayMapRegionOrNil;
- (id)encodedData;
- (id)eventDate;
- (id)eventName;
- (id)geoAddress;
- (id)geoFenceMapRegion;
- (bool)hasClientAttributes;
- (bool)hasPlace;
- (bool)hasPlaceData;
- (bool)hasPlaceResult;
- (unsigned long long)hash;
- (id)initWithPlace:(id)arg1 clientAttributes:(id)arg2;
- (id)initWithPlaceData:(id)arg1 clientAttributes:(id)arg2;
- (id)initWithPlaceResult:(id)arg1;
- (bool)isDisputed;
- (bool)isEqual:(id)arg1;
- (bool)isEventAllDay;
- (bool)isValid;
- (id)mapRegion;
- (void)mergeFrom:(id)arg1;
- (id)name;
- (id)place;
- (id)placeData;
- (id)placeResult;
- (bool)readFrom:(id)arg1;
- (void)setClientAttributes:(id)arg1;
- (void)setPlace:(id)arg1;
- (void)setPlaceData:(id)arg1;
- (void)setPlaceResult:(id)arg1;
- (id)spokenNameForLocale:(id)arg1;
- (id)timezone;
- (void)writeTo:(id)arg1;

@end
