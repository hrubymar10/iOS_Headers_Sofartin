/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FuseUI.framework/FuseUI
 */

@interface MusicProductMainViewController : UIViewController <MusicClientContextConsuming, MusicEntityPlaybackStatusControllerObserving, MusicEntityProductHeaderLockupViewDelegate, MusicEntityProvidingActionDelegate, MusicLibraryBrowseTableViewControllerDelegate, MusicProductAdditionalMetadataViewControllerDelegate, UIGestureRecognizerDelegate> {
    MusicEntityProvidingActionsViewController *_actionsViewController;
    UIColor *_backgroundOverlayTintColor;
    MusicClientContext *_clientContext;
    <MusicEntityProviding> *_containerEntityProvider;
    MusicEntityValueContext *_containerEntityValueContext;
    double _contentBottomLayoutGuide;
    double _contentTopLayoutGuide;
    <MusicProductMainViewControllerDelegate> *_delegate;
    unsigned long long _editableComponents;
    UIColor *_headerTintColor;
    MusicEntityPlaybackStatusController *_playbackStatusController;
    MPAVController *_player;
    long long _presentationSource;
    MusicProductAdditionalMetadataViewController *_productAdditionalMetadataViewController;
    MusicEntityProductHeaderLockupView *_productHeaderLockupView;
    SKUIDocumentContainerViewController *_relatedContentDocumentContainerViewController;
    <MusicEntityProviding> *_tracklistEntityProvider;
    MusicProductTracklistTableViewController *_tracklistTableViewController;
    bool _usesLightContentOverHeader;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _verticalScrollingContainerContentInsetAdditions;
    MusicVerticalScrollingContainerViewController *_verticalScrollingContainerViewController;
    bool _wantsRefreshActivityIndicator;
}

@property (nonatomic, retain) SKUIClientContext *clientContext;
@property (nonatomic, readonly) MusicEntityValueContext *containerEntityValueContext;
@property (nonatomic, readonly) <MusicEntityValueProviding> *containerEntityValueProvider;
@property (nonatomic, readonly) UIScrollView *containerScrollView;
@property (nonatomic) double contentBottomLayoutGuide;
@property (nonatomic) double contentTopLayoutGuide;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MusicProductMainViewControllerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (nonatomic) unsigned long long editableComponents;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long presentationSource;
@property (nonatomic, readonly) MusicProductAdditionalMetadataViewController *productAdditionalMetadataViewController;
@property (nonatomic, readonly) MusicEntityProductHeaderLockupView *productHeaderLockupView;
@property (nonatomic, retain) SKUIDocumentContainerViewController *relatedContentDocumentContainerViewController;
@property (readonly) Class superclass;
@property (nonatomic, readonly) MusicProductTracklistTableViewController *tracklistTableViewController;

- (void).cxx_destruct;
- (bool)_calculateWantsRefreshButton;
- (void)_cloudUpdateInProgressDidChangeNotification:(id)arg1;
- (void)_configureContainerEntityValueContext;
- (void)_containerEntityProviderDidInvalidateNotification:(id)arg1;
- (void)_contentSizeCategoryDidChangeNotification:(id)arg1;
- (bool)_isMatchLibraryLoading;
- (void)_presentContextualActionsFromButton:(id)arg1 includeSharing:(bool)arg2 includeStandardActions:(bool)arg3;
- (void)_reloadContainerEntityValueContextProperties;
- (void)_reloadVerticalScrollingContainerItems;
- (void)_updateLayout;
- (void)_updatePlaybackStatusForLockupView;
- (void)_updateProductHeaderLockupAddToLibraryState;
- (void)_updateProductHeaderLockupColors;
- (void)_updateProductHeaderLockupDimensions;
- (void)_updateTracklistTableViewController;
- (void)actionsController:(id)arg1 performAction:(long long)arg2;
- (bool)actionsController:(id)arg1 supportsCollectionActionType:(long long)arg2;
- (void)addProductToLibraryWithContainerEntityValueContext:(id)arg1;
- (void)cancelEditing;
- (id)clientContext;
- (void)commitEditing;
- (void)commitEditingWithTracklistEntityProviderChangeRecords:(id)arg1;
- (void)configureProductAdditionalMetadataViewController:(id)arg1;
- (id)containerEntityValueContext;
- (id)containerEntityValueProvider;
- (id)containerScrollView;
- (double)contentBottomLayoutGuide;
- (double)contentTopLayoutGuide;
- (void)dealloc;
- (id)delegate;
- (unsigned long long)editableComponents;
- (id)initWithContainerEntityProvider:(id)arg1 tracklistEntityProvider:(id)arg2 clientContext:(id)arg3 presentationSource:(long long)arg4;
- (void)libraryBrowseTableViewControllerDidFinishContentHeightAnimation:(id)arg1;
- (void)libraryBrowseTableViewControllerWillBeginContentHeightAnimation:(id)arg1;
- (id)loadProductHeaderLockupContentDescriptor;
- (id)loadProductTracklistTableViewConfigurationWithTracklistEntityProvider:(id)arg1;
- (bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (void)playbackStatusControllerPlaybackStatusDidChange:(id)arg1;
- (long long)presentationSource;
- (id)productAdditionalMetadataViewController;
- (void)productAdditionalMetadataViewControllerDidFinishContentHeightAnimation:(id)arg1;
- (void)productAdditionalMetadataViewControllerWillBeginContentHeightAnimation:(id)arg1;
- (id)productHeaderLockupView;
- (void)productHeaderLockupView:(id)arg1 didSelectPlayButtonAction:(unsigned long long)arg2;
- (void)productHeaderLockupViewDidSelectAddToLibraryButton:(id)arg1;
- (void)productHeaderLockupViewDidSelectContextualActionsButton:(id)arg1;
- (void)productHeaderLockupViewDidSelectEditButton:(id)arg1;
- (void)productHeaderLockupViewDidSelectRefreshButton:(id)arg1;
- (void)productHeaderLockupViewTintColorDidChange:(id)arg1;
- (id)relatedContentDocumentContainerViewController;
- (void)setClientContext:(id)arg1;
- (void)setContentBottomLayoutGuide:(double)arg1;
- (void)setContentTopLayoutGuide:(double)arg1;
- (void)setDelegate:(id)arg1;
- (void)setEditableComponents:(unsigned long long)arg1;
- (void)setEditing:(bool)arg1 animated:(bool)arg2;
- (void)setRelatedContentDocumentContainerViewController:(id)arg1;
- (id)tracklistTableViewController;
- (void)traitCollectionDidChange:(id)arg1;
- (void)updateHeaderTintColor:(id)arg1 usesLightContentOverHeader:(bool)arg2 backgroundOverlayTintColor:(id)arg3;
- (void)updateTracklistWithStoreTracklistItems:(id)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;

@end
