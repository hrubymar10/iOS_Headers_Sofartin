/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/FuseUI.framework/FuseUI
 */

@interface MusicProfileViewController : UIViewController <MusicClientContextConsuming, MusicJSNativeViewControllerFactory, MusicJSProfileNativeViewControllerDelegate, MusicProfileDetailViewDelegate, MusicProfileSplitMainViewControllerDelegate, SKUINavigationBarDisplayConfiguring, SKUIProxyScrollViewDelegate> {
    MPMediaItemCollection *_artistMediaItemCollection;
    UIView *_backgroundView;
    MusicClientContext *_clientContext;
    MusicProfileDetailView *_detailsView;
    bool _didDispatchLoadEvent;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _externalContentInset;
    UIView *_hairlineView;
    MusicInteractiveBlurringView *_headerBlurringView;
    double _headerHeight;
    MusicProfileHeaderLegibilityOverlayView *_headerLegibilityOverlayView;
    UIView *_headerMultiplyTintView;
    UIColor *_headerRadialGradientColor;
    UIColor *_headerTintColor;
    MusicProfileHeaderView *_headerView;
    bool _isAdminEnabled;
    bool _isAlbumArtist;
    bool _isCollapsed;
    bool _isContainedWithinSplitViewDetail;
    bool _isHandlingScrollViewUpdate;
    bool _isHeaderBlurringViewTransitioning;
    bool _isWaitingToPushProfileBiographyView;
    MusicNavigationBarTitleContainerView *_navigationBarTitleContainerView;
    NSString *_navigationTitle;
    long long _options;
    <MusicEntityProviding> *_profileEntityProvider;
    MusicEntityValueContext *_profileEntityValueContext;
    SKUIProxyScrollView *_proxyScrollView;
    NSString *_segmentIdentifierNeedingContent;
    MusicProfileSplitMainViewController *_splitDetailViewController;
    MusicProfileSplitMainViewController *_splitMainViewController;
    NSMapTable *_splitScrollViewToScrollingContext;
    NSArray *_splitScrollViews;
    MPArtworkCatalog *_uberImageArtworkCatalog;
    MusicUberArtworkView *_uberImageView;
    double _uberImageViewConfigurationDisplayScale;
    struct CGSize { 
        double width; 
        double height; 
    } _uberImageViewConfigurationSize;
    bool _useNoArtworkStyle;
    bool _usesLightContentOverHeader;
}

@property(assign,retain) SKUIClientContext * clientContext;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) long long options;
@property(assign,readwrite) bool shouldAutomaticallySelectMyMusicSegment;
@property(assign,readonly) Class superclass;

- (void).cxx_destruct;
- (bool)_calculateCollapsed;
- (double)_calculateDisappearanceProgressForHeaderHeight:(double)arg1;
- (id)_currentPrimaryScrollView;
- (void)_dispatchNeedsContentForSegmentWithIdentifier:(id)arg1;
- (double)_effectiveHeaderHeightForContentOffset:(struct CGPoint { double x1; double x2; })arg1 externalScrollViewContentInset:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg2;
- (bool)_hasVisibleNavigationBar;
- (void)_initializeHeaderTintColor;
- (double)_minimumHeaderHeight;
- (bool)_profileBiographyShouldBePresentedAsNavigationStackPush;
- (void)_profileEntityProviderDidInvalidateNotification:(id)arg1;
- (void)_pushBiographyDocument:(id)arg1 options:(id)arg2;
- (void)_reconfigureProfileArtwork;
- (void)_registerForNotificationsForProfileEntityProvider:(id)arg1;
- (id)_scrollingContextForSplitScrollView:(id)arg1;
- (id)_splitDetailContentScrollView;
- (id)_splitDetailViewController;
- (id)_splitMainContentScrollView;
- (id)_splitMainViewController;
- (void)_unregisterForNotificationsForProfileEntityProvider:(id)arg1;
- (void)_updateHeaderColors;
- (void)_updateHeaderColorsForArtworkBackgroundColor:(id)arg1 allowsBarsAppearanceUpdate:(bool)arg2;
- (void)_updateHeaderViewFrameWithHeaderHeight:(double)arg1;
- (void)_updateNavigationItemTitleView;
- (void)_updateNavigationTitle;
- (void)_updateScrollViewWithOriginatingScrollView:(id)arg1 contentOffset:(struct CGPoint { double x1; double x2; })arg2 shouldAlwaysAdjustContentOffset:(bool)arg3;
- (void)_updateScrollViewWithOriginatingScrollView:(id)arg1 shouldAlwaysAdjustContentOffset:(bool)arg2;
- (void)_updateSplitChildViewControllers;
- (bool)_updateSplitScrollViews;
- (void)_updateToMatchCapabilities;
- (id)clientContext;
- (id)contentScrollView;
- (void)dealloc;
- (id)initWithProfileEntityProvider:(id)arg1 isAlbumArtist:(bool)arg2 clientContext:(id)arg3 existingJSProfileNativeViewController:(id)arg4;
- (void)jsProfileNativeViewController:(id)arg1 presentBiographyEditorDocument:(id)arg2 options:(id)arg3;
- (void)jsProfileNativeViewController:(id)arg1 presentShareDocument:(id)arg2 options:(id)arg3;
- (void)jsProfileNativeViewController:(id)arg1 setBiographyDocument:(id)arg2 options:(id)arg3;
- (void)jsProfileNativeViewController:(id)arg1 setDocument:(id)arg2 options:(id)arg3 forSegmentIdentifier:(id)arg4;
- (void)jsProfileNativeViewController:(id)arg1 setProfileEntityValueProviderData:(id)arg2;
- (void)jsProfileNativeViewController:(id)arg1 setReportingInformation:(id)arg2;
- (void)jsProfileNativeViewController:(id)arg1 setVisibleSegments:(id)arg2;
- (id)loadJSNativeViewControllerWithAppContext:(id)arg1;
- (bool)music_handleUserActivityContext:(id)arg1 containerItem:(id)arg2;
- (id)navigationBarTintColor;
- (long long)options;
- (long long)preferredStatusBarStyle;
- (bool)prefersNavigationBarBackgroundViewHidden;
- (void)profileDetailViewDidSelectContextualActionsButton:(id)arg1;
- (void)profileDetailViewDidSelectTitle:(id)arg1;
- (void)profileSplitMainViewController:(id)arg1 needsContentForSegmentWithIdentifier:(id)arg2;
- (void)profileSplitMainViewControllerContentScrollViewContentSizeDidChange:(id)arg1;
- (double)profileSplitMainViewControllerContentScrollViewCurrentSnapTargetOffset:(id)arg1;
- (void)profileSplitMainViewControllerContentScrollViewDidScroll:(id)arg1;
- (bool)profileSplitMainViewControllerContentScrollViewShouldOverrideDeceleration:(id)arg1 forTargetContentOffset:(struct CGPoint { double x1; double x2; }*)arg2;
- (bool)profileSplitMainViewControllerContentScrollViewShouldOverrideDecelerationVelocity:(id)arg1 forVelocity:(struct CGPoint { double x1; double x2; })arg2;
- (void)scrollViewDidChangeContentInset:(id)arg1;
- (void)setClientContext:(id)arg1;
- (void)setOptions:(long long)arg1;
- (void)setShouldAutomaticallySelectMyMusicSegment:(bool)arg1;
- (bool)shouldAutomaticallySelectMyMusicSegment;
- (unsigned long long)supportedInterfaceOrientations;
- (void)traitCollectionDidChange:(id)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewDidLoad;
- (void)viewWillAppear:(bool)arg1;

@end
