/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/NanoAudioControl.framework/NanoAudioControl
 */

@interface NACVolumeControllerLocal : NSObject <MPAVRoutingControllerDelegate, MPVolumeControllerDelegate, NACVolumeController> {
    NSString *_audioCategory;
    <NACVolumeControllerDelegate> *_delegate;
    NACEventThrottler *_hapticThrottler;
    MPAVRoutingController *_routingController;
    bool _systemMuted;
    MPVolumeController *_volumeController;
    NSCountedSet *_volumeSetHistory;
    NACEventThrottler *_volumeThrottler;
}

@property(assign,readonly) float EUVolumeLimit;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <NACVolumeControllerDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,readwrite) float hapticIntensity;
@property(assign,readonly) unsigned long long hash;
@property(getter=isMuted,assign,readonly) bool muted;
@property(assign,readonly) Class superclass;
@property(getter=isSystemMuted,assign,readwrite) bool systemMuted;
@property(getter=isVolumeControlAvailable,assign,readonly) bool volumeControlAvailable;
@property(assign,readonly) float volumeValue;
@property(getter=isVolumeWarningEnabled,assign,readonly) bool volumeWarningEnabled;

- (void).cxx_destruct;
- (float)EUVolumeLimit;
- (void)_hapticIntensityDidChange:(id)arg1;
- (void)_setHapticIntensity:(id)arg1;
- (void)_setVolumeValue:(id)arg1;
- (void)beginObservingHapticIntensity;
- (void)beginObservingVolume;
- (id)delegate;
- (void)endObservingHapticIntensity;
- (void)endObservingVolume;
- (float)hapticIntensity;
- (id)init;
- (id)initWithAudioCategory:(id)arg1;
- (bool)isMuted;
- (bool)isSystemMuted;
- (bool)isVolumeControlAvailable;
- (bool)isVolumeWarningEnabled;
- (void)playPreview;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setHapticIntensity:(float)arg1;
- (void)setMuted:(bool)arg1;
- (void)setSystemMuted:(bool)arg1;
- (void)setVolumeValue:(float)arg1;
- (void)setVolumeValue:(float)arg1 muted:(bool)arg2 overrideEULimit:(bool)arg3;
- (void)volumeController:(id)arg1 EUVolumeLimitDidChange:(float)arg2;
- (void)volumeController:(id)arg1 mutedStateDidChange:(bool)arg2;
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;
- (float)volumeValue;

@end
