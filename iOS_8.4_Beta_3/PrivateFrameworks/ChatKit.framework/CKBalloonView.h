/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit
 */

@interface CKBalloonView : CKBalloonImageView <UIGestureRecognizerDelegate> {
    unsigned long long _balloonCorners;
    bool _canUseOpaqueMask;
    <CKBalloonViewDelegate> *_delegate;
    CKManualUpdater *_displayUpdater;
    UITapGestureRecognizer *_doubleTapGestureRecognizer;
    bool _filled;
    bool _hasOverlay;
    bool _hasTail;
    UILongPressGestureRecognizer *_longPressGestureRecognizer;
    BOOL _orientation;
    CKBalloonImageView *_overlay;
    bool _showingMenu;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _textAlignmentInsets;
    bool _wantsSkinnyMask;
}

@property(assign,readwrite) unsigned long long balloonCorners;
@property(assign,readwrite) bool canUseOpaqueMask;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <CKBalloonViewDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,retain) CKManualUpdater * displayUpdater;
@property(assign,retain) UITapGestureRecognizer * doubleTapGestureRecognizer;
@property(getter=isFilled,assign,readwrite) bool filled;
@property(assign,readwrite) bool hasOverlay;
@property(assign,readwrite) bool hasTail;
@property(assign,readonly) unsigned long long hash;
@property(assign,retain) UILongPressGestureRecognizer * longPressGestureRecognizer;
@property(assign,readonly) bool needsGroupOpacity;
@property(assign,readwrite) BOOL orientation;
@property(assign,retain) CKBalloonImageView * overlay;
@property(assign,readonly) UIColor * overlayColor;
@property(getter=isShowingMenu,assign,readwrite) bool showingMenu;
@property(assign,readonly) Class superclass;
@property(assign,readwrite) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } textAlignmentInsets;
@property(assign,readwrite) bool wantsSkinnyMask;

- (void)_dismissOverlay;
- (void)_performAction:(SEL)arg1 sender:(id)arg2;
- (unsigned long long)balloonCorners;
- (bool)becomeFirstResponder;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canUseOpaqueMask;
- (void)configureForMediaObject:(id)arg1 previewWidth:(double)arg2 orientation:(BOOL)arg3;
- (void)configureForMessagePart:(id)arg1;
- (void)copy:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (id)description;
- (id)displayUpdater;
- (void)doubleTapGestureRecognized:(id)arg1;
- (id)doubleTapGestureRecognizer;
- (void)export:(id)arg1;
- (bool)hasOverlay;
- (bool)hasTail;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isFilled;
- (bool)isShowingMenu;
- (void)layoutSubviews;
- (void)longPressGestureRecognized:(id)arg1;
- (id)longPressGestureRecognizer;
- (void)more:(id)arg1;
- (bool)needsGroupOpacity;
- (BOOL)orientation;
- (id)overlay;
- (id)overlayColor;
- (void)prepareForDisplay;
- (void)prepareForDisplayIfNeeded;
- (void)prepareForReuse;
- (bool)resignFirstResponder;
- (void)sendAsTextMessage:(id)arg1;
- (void)setBalloonCorners:(unsigned long long)arg1;
- (void)setCanUseOpaqueMask:(bool)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisplayUpdater:(id)arg1;
- (void)setDoubleTapGestureRecognizer:(id)arg1;
- (void)setFilled:(bool)arg1;
- (void)setHasOverlay:(bool)arg1;
- (void)setHasOverlay:(bool)arg1 autoDismiss:(bool)arg2;
- (void)setHasTail:(bool)arg1;
- (void)setLongPressGestureRecognizer:(id)arg1;
- (void)setNeedsPrepareForDisplay;
- (void)setOrientation:(BOOL)arg1;
- (void)setOverlay:(id)arg1;
- (void)setShowingMenu:(bool)arg1;
- (void)setTextAlignmentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setWantsSkinnyMask:(bool)arg1;
- (void)showMenu;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1 textAlignmentInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; }*)arg2;
- (void)tapGestureRecognized:(id)arg1;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })textAlignmentInsets;
- (bool)wantsSkinnyMask;
- (void)willHideMenu:(id)arg1;
- (void)willShowMenu:(id)arg1;

@end
