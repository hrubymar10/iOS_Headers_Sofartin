/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/ChatKit.framework/ChatKit
 */

@interface CKAudioRecorder : NSObject <CKVoiceControllerDelegate> {
    bool _cancelled;
    id _completion;
    <CKAudioRecorderDelegate> *_delegate;
    struct OpaqueAudioFileID { } *_fileID;
    NSURL *_fileURL;
    bool _recording;
    bool _recordingEmpty;
    bool _shouldPlayStartSound;
    bool _shouldPlayStopSound;
    NSDate *_startDate;
    long long _totalPacketsCount;
    CKVoiceController *_voiceController;
}

@property(getter=isCancelled,assign,readwrite) bool cancelled;
@property(assign,copy) id completion;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <CKAudioRecorderDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,readonly) double duration;
@property(assign,readwrite) struct OpaqueAudioFileID { }* fileID;
@property(assign,retain) NSURL * fileURL;
@property(assign,readonly) unsigned long long hash;
@property(getter=isRecording,assign,readwrite) bool recording;
@property(getter=isRecordingEmpty,assign,readwrite) bool recordingEmpty;
@property(assign,readwrite) bool shouldPlayStartSound;
@property(assign,readwrite) bool shouldPlayStopSound;
@property(assign,retain) NSDate * startDate;
@property(assign,readonly) Class superclass;
@property(assign,readwrite) long long totalPacketsCount;
@property(assign,retain) CKVoiceController * voiceController;

- (void)applicationDidEnterBackground:(id)arg1;
- (void)cancelRecording;
- (id)completion;
- (void)dealloc;
- (id)delegate;
- (double)duration;
- (struct OpaqueAudioFileID { }*)fileID;
- (id)fileURL;
- (id)init;
- (bool)isCancelled;
- (bool)isRecording;
- (bool)isRecordingEmpty;
- (void)resetState;
- (void)setCancelled:(bool)arg1;
- (void)setCompletion:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFileID:(struct OpaqueAudioFileID { }*)arg1;
- (void)setFileURL:(id)arg1;
- (void)setRecording:(bool)arg1;
- (void)setRecordingEmpty:(bool)arg1;
- (void)setShouldPlayStartSound:(bool)arg1;
- (void)setShouldPlayStopSound:(bool)arg1;
- (void)setStartDate:(id)arg1;
- (void)setTotalPacketsCount:(long long)arg1;
- (void)setVoiceController:(id)arg1;
- (bool)shouldPlayStartSound;
- (bool)shouldPlayStopSound;
- (id)startDate;
- (void)startRecordingAndPlaySound:(bool)arg1;
- (void)startRecordingForRaiseGesture;
- (void)startRecordingForRaiseGesture:(bool)arg1 shouldPlaySound:(bool)arg2;
- (void)stopRecording:(id)arg1;
- (void)stopRecordingAndPlaySound:(bool)arg1 completion:(id)arg2;
- (long long)totalPacketsCount;
- (id)voiceController;
- (void)voiceController:(id)arg1 didUpdateAveragePower:(float)arg2;
- (void)voiceControllerDidDetectStartpoint:(id)arg1;
- (void)voiceControllerDidFinishRecording:(id)arg1 successfully:(bool)arg2;
- (void)voiceControllerDidStartRecording:(id)arg1;
- (void)voiceControllerRecordBufferAvailable:(id)arg1 buffer:(id)arg2;

@end
