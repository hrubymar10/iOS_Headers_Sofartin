/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface GGLImageCanvas : NSObject <MDRenderTarget> {
    bool _canMakeImage;
    struct unique_ptr<ggl::TextureBuffer, std::__1::default_delete<ggl::TextureBuffer> > { 
        struct __compressed_pair<ggl::TextureBuffer *, std::__1::default_delete<ggl::TextureBuffer> > { 
            struct TextureBuffer {} *__first_; 
        } __ptr_; 
    } _colorBuffer;
    struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > { 
        struct __compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > { 
            struct Texture2D {} *__first_; 
        } __ptr_; 
    } _colorTexture;
    double _contentScale;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> > { 
        struct __compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> > { 
            struct RenderBuffer {} *__first_; 
        } __ptr_; 
    } _depthStencilBuffer;
    struct unique_ptr<ggl::TextureBuffer, std::__1::default_delete<ggl::TextureBuffer> > { 
        struct __compressed_pair<ggl::TextureBuffer *, std::__1::default_delete<ggl::TextureBuffer> > { 
            struct TextureBuffer {} *__first_; 
        } __ptr_; 
    } _flippedColorBuffer;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> > { 
        struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> > { 
            struct RenderTarget {} *__first_; 
        } __ptr_; 
    } _flippedRenderTarget;
    struct unique_ptr<ggl::IOSurfaceTexture, std::__1::default_delete<ggl::IOSurfaceTexture> > { 
        struct __compressed_pair<ggl::IOSurfaceTexture *, std::__1::default_delete<ggl::IOSurfaceTexture> > { 
            struct IOSurfaceTexture {} *__first_; 
        } __ptr_; 
    } _flippedSurfaceTexture;
    struct unique_ptr<ggl::RenderTargetOperation, std::__1::default_delete<ggl::RenderTargetOperation> > { 
        struct __compressed_pair<ggl::RenderTargetOperation *, std::__1::default_delete<ggl::RenderTargetOperation> > { 
            struct RenderTargetOperation {} *__first_; 
        } __ptr_; 
    } _msaaBlitOperation;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> > { 
        struct __compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> > { 
            struct RenderBuffer {} *__first_; 
        } __ptr_; 
    } _msaaColorBuffer;
    struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> > { 
        struct __compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> > { 
            struct RenderBuffer {} *__first_; 
        } __ptr_; 
    } _msaaDepthStencilBuffer;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> > { 
        struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> > { 
            struct RenderTarget {} *__first_; 
        } __ptr_; 
    } _msaaRenderTarget;
    bool _recreateRenderTarget;
    struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> > { 
        struct __compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> > { 
            struct RenderTarget {} *__first_; 
        } __ptr_; 
    } _renderTarget;
    struct CGSize { 
        double width; 
        double height; 
    } _size;
    bool _useMultisampling;
}

@property(assign,readonly) float averageFPS;
@property(assign,readwrite) double contentScale;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,readonly) struct RenderTarget { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; int (**x4)(); char *x5; /* Warning: unhandled struct encoding: '{vector<ggl::FragmentBuffer *' */ struct x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; unsigned short x34; void*x35; short x36; void*x37; void*x38; void*x39; void*x40; unsigned long x41; int x42; unsigned int x43/* : ? */; const void*x44; const void*x45; void*x46; void*x47; const int x48; void x49; void*x50; void*x51; void*x52; void*x53; const void*x54; void*x55; void*x56; void*x57; out const void*x58; short x59; void*x60; unsigned short x61; void*x62; const int x63; in void*x64; bool x65; out void*x66; const double x67; void*x68; out void*x69; in double x70; void*x71; void*x72; int x73; out in void*x74; float x75; const void*x76; void*x77; void*x78; void*x79; out const void*x80; void*x81; unsigned short x82; void*x83; const int x84; in void*x85; bool x86; out void*x87; const double x88; void*x89; out void*x90; in double x91; void*x92; void*x93; int x94; out in void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; int x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; unsigned short x121; void*x122; short x123; void*x124; void*x125; void*x126; void*x127; unsigned long x128; int x129; unsigned int x130/* : ? */; const void*x131; const void*x132; void*x133; void*x134; const int x135; void x136; void*x137; void*x138; void*x139; void*x140; const void*x141; void*x142; void*x143; void*x144; out const void*x145; short x146; void*x147; void*x148; void*x149; void*x150; void*x151; unsigned char x152; void*x153; in void*x154; void*x155; const void*x156; out void*x157; in double x158; void*x159; void*x160; int x161; out in void*x162; float x163; const void*x164; void*x165; void*x166; void*x167; out const void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; unsigned char x174; void*x175; in void*x176; void*x177; const void*x178; out void*x179; in double x180; void*x181; void*x182; int x183; out in void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; int x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; unsigned short x212; void*x213; short x214; void*x215; void*x216; void*x217; void*x218; unsigned long x219; int x220; unsigned int x221/* : ? */; const void*x222; const void*x223; void*x224; void*x225; const int x226; void x227; void*x228; void*x229; void*x230; void*x231; const void*x232; void*x233; void*x234; void*x235; out const void*x236; short x237; void*x238; unsigned short x239; void*x240; const int x241; in void*x242; bool x243; out void*x244; const double x245; void*x246; unsigned int x247; unsigned short x248; void*x249; const void x250; int x251; BOOL x252; void*x253; short x254; void*x255; float x256; const void*x257; void*x258; void*x259; void*x260; out const void*x261; void*x262; unsigned short x263; void*x264; const int x265; in void*x266; bool x267; out void*x268; const double x269; void*x270; unsigned int x271; unsigned short x272; void*x273; const void x274; int x275; BOOL x276; void*x277; short x278; void*x279; void*x280; void*x281; void*x282; void*x283; void*x284; void*x285; void*x286; void*x287; void*x288; int x289; void*x290; void*x291; void*x292; void*x293; void*x294; void*x295; out long x296; void*x297; void*x298; void*x299; void*x300; void*x301; void*x302; void*x303; unsigned short x304; void*x305; short x306; void*x307; void*x308; void*x309; void*x310; unsigned long x311; int x312; unsigned int x313/* : ? */; const void*x314; const void*x315; void*x316; void*x317; const int x318; void x319; void*x320; void*x321; void*x322; void*x323; const void*x324; void*x325; void*x326; void*x327; out const void*x328; short x329; void*x330; unsigned short x331; out float x332; void*x333; void*x334; void*x335; const void*x336; void*x337; void*x338; double x339; void*x340; void*x341; void*x342; unsigned short x343; void*x344; const void x345; int x346; BOOL x347; void*x348; short x349; void*x350; float x351; const void*x352; void*x353; void*x354; void*x355; out const void*x356; void*x357; unsigned short x358; out float x359; void*x360; void*x361; void*x362; const void*x363; void*x364; void*x365; double x366; void*x367; void*x368; void*x369; unsigned short x370; void*x371; const void x372; int x373; BOOL x374; void*x375; short x376; void*x377; void*x378; void*x379; void*x380; void*x381; void*x382; void*x383; void*x384; void*x385; void*x386; void*x387; void*x388; void*x389; void*x390; void*x391; void*x392; void*x393; void*x394; void*x395; void*x396; void*x397; void*x398; void*x399; void*x400; unsigned short x401; void*x402; short x403; void*x404; void*x405; void*x406; void*x407; unsigned long x408; int x409; unsigned int x410/* : ? */; const void*x411; const void*x412; void*x413; void*x414; const int x415; void x416; void*x417; void*x418; void*x419; void*x420; const void*x421; void*x422; void*x423; void*x424; out const void*x425; short x426; void*x427; void*x428; void*x429; in void*x430; void*x431; void*x432; double x433; unsigned char x434; out in float x435; int x436; void*x437; void*x438; const void*x439; void*x440; int x441; out in void*x442; float x443; const void*x444; void*x445; void*x446; void*x447; out const void*x448; void*x449; void*x450; void*x451; in void*x452; void*x453; void*x454; double x455; unsigned char x456; out in float x457; int x458; void*x459; void*x460; const void*x461; void*x462; int x463; out in void*x464; void*x465; void*x466; void*x467; void*x468; void*x469; void*x470; void*x471; void*x472; void*x473; void*x474; void*x475; int x476; void*x477; void*x478; void*x479; void*x480; void*x481; void*x482; void*x483; void*x484; void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; unsigned short x492; void*x493; short x494; void*x495; void*x496; void*x497; void*x498; unsigned long x499; int x500; unsigned int x501/* : ? */; const void*x502; const void*x503; void*x504; void*x505; const int x506; void x507; void*x508; void*x509; void*x510; void*x511; const void*x512; void*x513; void*x514; void*x515; out const void*x516; short x517; void*x518; void*x519; void*x520; void*x521; void*x522; unsigned char x523; void*x524; in void*x525; void*x526; const void*x527; out void*x528; in double x529; void*x530; void*x531; int x532; out in void*x533; float x534; const void*x535; void*x536; void*x537; void*x538; out const void*x539; void*x540; void*x541; void*x542; void*x543; void*x544; unsigned char x545; void*x546; in void*x547; void*x548; const void*x549; out void*x550; in double x551; void*x552; void*x553; int x554; out in void*x555; void*x556; void*x557; void*x558; void*x559; void*x560; void*x561; void*x562; void*x563; void*x564; void*x565; void*x566; int x567; void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; unsigned short x583; void*x584; short x585; void*x586; void*x587; void*x588; void*x589; unsigned long x590; int x591; unsigned int x592/* : ? */; const void*x593; const void*x594; void*x595; void*x596; const int x597; void x598; void*x599; void*x600; void*x601; void*x602; const void*x603; void*x604; void*x605; void*x606; out const void*x607; short x608; void*x609; void*x610; void*x611; void*x612; void*x613; unsigned char x614; void*x615; in void*x616; void*x617; const void*x618; out void*x619; in double x620; void*x621; void*x622; int x623; out in void*x624; float x625; const void*x626; void*x627; void*x628; void*x629; out const void*x630; void*x631; void*x632; void*x633; void*x634; void*x635; unsigned char x636; void*x637; in void*x638; void*x639; const void*x640; out void*x641; in double x642; void*x643; void*x644; int x645; out in void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; void*x652; void*x653; void*x654; void*x655; void*x656; void*x657; int x658; void*x659; void*x660; void*x661; void*x662; void*x663; void*x664; short x665; unsigned long x666; void*x667; void*x668; void*x669; void*x670; void*x671; unsigned short x672; void*x673; unsigned short x674; void*x675; short x676; void*x677; void*x678; void*x679; void*x680; unsigned long x681; int x682; unsigned int x683/* : ? */; const void*x684; const void*x685; void*x686; void*x687; const int x688; void x689; void*x690; void*x691; void*x692; void*x693; const void*x694; void*x695; void*x696; void*x697; out const void*x698; short x699; void*x700; void*x701; void*x702; void*x703; void*x704; unsigned char x705; void*x706; in void*x707; void*x708; const void*x709; const int x710; void x711; void*x712; void*x713; void*x714; void*x715; unsigned int x716; void*x717; float x718; const void*x719; void*x720; void*x721; void*x722; out const void*x723; void*x724; void*x725; void*x726; void*x727; void*x728; unsigned char x729; void*x730; in void*x731; void*x732; const void*x733; const int x734; void x735; void*x736; void*x737; void*x738; void*x739; unsigned int x740; void*x741; void*x742; void*x743; void*x744; void*x745; void*x746; void*x747; void*x748; void*x749; void*x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; void*x757; void*x758; void*x759; void*x760; void*x761; void*x762; void*x763; void*x764; void*x765; void*x766; void*x767; void*x768; void*x769; void*x770; unsigned short x771; void*x772; short x773; void*x774; void*x775; void*x776; void*x777; unsigned long x778; int x779; unsigned int x780/* : ? */; const void*x781; const void*x782; void*x783; void*x784; const int x785; void x786; void*x787; void*x788; void*x789; void*x790; const void*x791; void*x792; void*x793; void*x794; out const void*x795; short x796; void*x797; void*x798; void*x799; void*x800; void*x801; unsigned char x802; void*x803; in void*x804; void*x805; const void*x806; out void*x807; in double x808; void*x809; void*x810; int x811; out in void*x812; float x813; const void*x814; void*x815; void*x816; void*x817; out const void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; unsigned char x824; void*x825; in void*x826; void*x827; const void*x828; out void*x829; in double x830; void*x831; void*x832; int x833; out in void*x834; void*x835; void*x836; void*x837; void*x838; void*x839; void*x840; void*x841; void*x842; void*x843; void*x844; void*x845; int x846; void*x847; void*x848; void*x849; void*x850; void*x851; void*x852; void*x853; void*x854; void*x855; void*x856; void*x857; void*x858; void*x859; void*x860; unsigned short x861; void*x862; short x863; void*x864; void*x865; void*x866; void*x867; unsigned long x868; int x869; unsigned int x870/* : ? */; const void*x871; const void*x872; void*x873; void*x874; const int x875; void x876; void*x877; void*x878; void*x879; void*x880; const void*x881; void*x882; void*x883; void*x884; out const void*x885; short x886; void*x887; unsigned char x888; out const void*x889; unsigned short x890; void*x891; void*x892; void*x893; void*x894; short x895; void*x896; int x897; out in short x898; unsigned int x899; in void*x900; void*x901; const in void*x902; long x903; short x904; void*x905; float x906; const void*x907; void*x908; void*x909; void*x910; out const void*x911; void*x912; unsigned char x913; out const void*x914; unsigned short x915; void*x916; void*x917; void*x918; void*x919; short x920; void*x921; int x922; out in short x923; unsigned int x924; in void*x925; void*x926; const in void*x927; long x928; short x929; void*x930; void*x931; void*x932; void*x933; int x934; void*x935; void*x936; void*x937; void*x938; void*x939; id x940; void*x941; void*x942; void*x943; void*x944; void*x945; void*x946; void*x947; void*x948; void*x949; unsigned short x950; void*x951; int x952; void*x953; void*x954; void*x955; void*x956; void*x957; void*x958; void*x959; struct x960; void*x961; void*x962; void*x963; double x964; void*x965; out void*x966; void*x967; void*x968; unsigned int x969/* : ? */; void*x970; long x971; void*x972; void*x973; void*x974; void*x975; void*x976; void*x977; void*x978; void*x979; void*x980; void*x981; void*x982; void*x983; void*x984; void*x985; void*x986; void*x987; void*x988; void*x989; void*x990; void*x991; void*x992; void*x993; void*x994; double x995; void*x996; out void*x997; void*x998; void*x999; unsigned int x1000/* : ? */; void*x1001; long x1002; void*x1003; void*x1004; void*x1005; void*x1006; void*x1007; void*x1008; void*x1009; void*x1010; void*x1011; void*x1012; void*x1013; void*x1014; void*x1015; void*x1016; void*x1017; void*x1018; void*x1019; void*x1020; void*x1021; void*x1022; void*x1023; void*x1024; void*x1025; }* finalRenderTarget; /* unknown property attribute:  std::__1::allocator<ggl::FragmentBuffer *> >=^^{FragmentBuffer}}}^{FragmentBuffer}IIB} */
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) struct RenderTargetOperation { int (**x1)(); int x2; }* msaaBlitOperation;
@property(assign,readonly) struct RenderTarget { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; int (**x4)(); char *x5; /* Warning: unhandled struct encoding: '{vector<ggl::FragmentBuffer *' */ struct x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; int x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; long x25; unsigned long x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; unsigned short x34; void*x35; short x36; void*x37; void*x38; void*x39; void*x40; unsigned long x41; int x42; unsigned int x43/* : ? */; const void*x44; const void*x45; void*x46; void*x47; const int x48; void x49; void*x50; void*x51; void*x52; void*x53; const void*x54; void*x55; void*x56; void*x57; out const void*x58; short x59; void*x60; void*x61; void*x62; void*x63; void*x64; unsigned char x65; void*x66; in void*x67; void*x68; const void*x69; out void*x70; in double x71; void*x72; void*x73; int x74; out in void*x75; float x76; const void*x77; void*x78; void*x79; void*x80; out const void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; unsigned char x87; void*x88; in void*x89; void*x90; const void*x91; out void*x92; in double x93; void*x94; void*x95; int x96; out in void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; int x109; void*x110; void*x111; void*x112; void*x113; void*x114; void*x115; void*x116; void*x117; void*x118; void*x119; void*x120; void*x121; void*x122; void*x123; void*x124; unsigned short x125; void*x126; int x127; void*x128; void*x129; void*x130; void*x131; void*x132; void*x133; void*x134; struct x135; void*x136; void*x137; void*x138; double x139; void*x140; out void*x141; void*x142; void*x143; unsigned int x144/* : ? */; void*x145; long x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; void*x156; void*x157; void*x158; void*x159; void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; double x170; void*x171; out void*x172; void*x173; void*x174; unsigned int x175/* : ? */; void*x176; long x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; }* msaaRenderTarget; /* unknown property attribute:  std::__1::allocator<ggl::FragmentBuffer *> >=^^{FragmentBuffer}}}^{FragmentBuffer}IIB} */
@property(assign,readonly) struct RenderTarget { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; int (**x4)(); char *x5; /* Warning: unhandled struct encoding: '{vector<ggl::FragmentBuffer *' */ struct x6; void*x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; int x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; unsigned long x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; out void*x36; int x37; void*x38; in void*x39; void*x40; void*x41; void*x42; void*x43; struct x44; void*x45; void*x46; void*x47; double x48; void*x49; out void*x50; void*x51; void*x52; unsigned int x53/* : ? */; void*x54; long x55; void*x56; void*x57; void*x58; void*x59; void*x60; void*x61; void*x62; void*x63; void*x64; void*x65; void*x66; void*x67; void*x68; void*x69; void*x70; void*x71; void*x72; void*x73; void*x74; void*x75; void*x76; void*x77; void*x78; double x79; void*x80; out void*x81; void*x82; void*x83; unsigned int x84/* : ? */; void*x85; long x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; }* renderTarget; /* unknown property attribute:  std::__1::allocator<ggl::FragmentBuffer *> >=^^{FragmentBuffer}}}^{FragmentBuffer}IIB} */
@property(assign,readwrite) struct CGSize { double x1; double x2; } size;
@property(assign,readonly) struct CGSize { double x1; double x2; } sizeInPixels;
@property(assign,readonly) Class superclass;
@property(assign,readonly) bool useMultisampling;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_createMSAARenderTarget;
- (void)_createRenderTarget;
- (void)_destroyMSAARenderTarget;
- (void)_destroyRenderTarget;
- (struct shared_ptr<ggl::BitmapDataBase> { struct BitmapDataBase {} *x1; struct __shared_weak_count {} *x2; })bitmapDataWithRenderer:(struct Renderer { int (**x1)(); struct Device {} *x2; unsigned long long x3; unsigned long long x4; bool x5; float x6; }*)arg1;
- (double)contentScale;
- (void)didDrawView;
- (struct RenderTarget { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; int (**x4)(); char *x5; struct vector<ggl::FragmentBuffer *, std::__1::allocator<ggl::FragmentBuffer *> > { struct FragmentBuffer {} **x_6_1_1; struct FragmentBuffer {} **x_6_1_2; struct __compressed_pair<ggl::FragmentBuffer **, std::__1::allocator<ggl::FragmentBuffer *> > { struct FragmentBuffer {} **x_3_2_1; } x_6_1_3; } x6; struct FragmentBuffer {} *x7; unsigned int x8; unsigned int x9; bool x10; }*)finalRenderTarget;
- (id)initWithSize:(struct CGSize { double x1; double x2; })arg1 scale:(double)arg2 useMultisampling:(bool)arg3;
- (struct RenderTargetOperation { int (**x1)(); int x2; }*)msaaBlitOperation;
- (struct RenderTarget { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; int (**x4)(); char *x5; struct vector<ggl::FragmentBuffer *, std::__1::allocator<ggl::FragmentBuffer *> > { struct FragmentBuffer {} **x_6_1_1; struct FragmentBuffer {} **x_6_1_2; struct __compressed_pair<ggl::FragmentBuffer **, std::__1::allocator<ggl::FragmentBuffer *> > { struct FragmentBuffer {} **x_3_2_1; } x_6_1_3; } x6; struct FragmentBuffer {} *x7; unsigned int x8; unsigned int x9; bool x10; }*)msaaRenderTarget;
- (struct CGImage { }*)newImageWithRenderer:(struct Renderer { int (**x1)(); struct Device {} *x2; unsigned long long x3; unsigned long long x4; bool x5; float x6; }*)arg1;
- (struct RenderTarget { int (**x1)(); struct ResourceManager {} *x2; struct RenderResource {} *x3; int (**x4)(); char *x5; struct vector<ggl::FragmentBuffer *, std::__1::allocator<ggl::FragmentBuffer *> > { struct FragmentBuffer {} **x_6_1_1; struct FragmentBuffer {} **x_6_1_2; struct __compressed_pair<ggl::FragmentBuffer **, std::__1::allocator<ggl::FragmentBuffer *> > { struct FragmentBuffer {} **x_3_2_1; } x_6_1_3; } x6; struct FragmentBuffer {} *x7; unsigned int x8; unsigned int x9; bool x10; }*)renderTarget;
- (void)setContentScale:(double)arg1;
- (void)setSize:(struct CGSize { double x1; double x2; })arg1;
- (struct CGSize { double x1; double x2; })size;
- (struct CGSize { double x1; double x2; })sizeInPixels;
- (bool)useMultisampling;
- (void)willDrawView;

@end
