/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKStylesheet : NSObject {
    NSObject<OS_dispatch_semaphore> *_everythingLoadingSemaphore;
    NSMutableArray *_finishedDecodingCallbacks;
    NSLock *_finishedDecodingCallbacksLock;
    NSObject<OS_dispatch_semaphore> *_globalResourcesLoadingSemaphore;
    NSMutableArray *_inheritance;
    bool _isDevResource;
    int _loadedEverything;
    int _loadedGlobalResources;
    NSObject<OS_dispatch_queue> *_loadingQueue;
    struct unique_ptr<md::StyleMatchingTree, std::__1::default_delete<md::StyleMatchingTree> > { 
        struct __compressed_pair<md::StyleMatchingTree *, std::__1::default_delete<md::StyleMatchingTree> > { 
            struct StyleMatchingTree {} *__first_; 
        } __ptr_; 
    } _matchingTree;
    float _ppi;
    long long _rasterPolygonChangeoverZ;
    NSMutableDictionary *_resultCache;
    NSObject<OS_dispatch_queue> *_resultCacheQueue;
    float _scale;
    NSString *_sheetName;
    VKPGlobalProperties *_styleGlobalProperties;
    VKStylesheetVendor *_stylesheetVendor;
    bool _supportsNightMode;
    bool _supportsRouteMode;
    long long _targetDisplay;
}

@property (getter=isFinishedDecoding, nonatomic, readonly) bool finishedDecoding;
@property (nonatomic, readonly) bool isDevResource;
@property (nonatomic, readonly) long long rasterPolygonChangeoverZ;
@property (nonatomic, readonly) NSString *sheetName;
@property (nonatomic, readonly) VKPGlobalProperties *styleGlobalProperties;
@property (nonatomic, readonly) bool supportsNightMode;

- (id).cxx_construct;
- (void).cxx_destruct;
- (struct unordered_map<unsigned int, unsigned long long, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long long> > > { struct __hash_table<std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, unsigned long long> > > { struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> > > { struct __compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> > > { struct __hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> {} **x_1_3_1; struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> > { struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> > { unsigned long long x_1_5_1; } x_2_4_1; } x_1_3_2; } x_1_2_1; } x_1_1_1; struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> > > { struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> *> { struct __hash_node<std::__1::__hash_value_type<unsigned int, unsigned long long>, void *> {} *x_1_3_1; } x_2_2_1; } x_1_1_2; struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::hash<unsigned int>, true> > { unsigned long long x_3_2_1; } x_1_1_3; struct __compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, unsigned long long>, std::__1::equal_to<unsigned int>, true> > { float x_4_2_1; } x_1_1_4; } x1; })_attributeMapForAttributes:(id)arg1 clientAttributes:(struct { long long x1; int x2; int x3; bool x4; id x5; bool x6; unsigned int x7; }*)arg2;
- (id)_styleMatchingAttributes:(id)arg1 clientAttributes:(struct { long long x1; int x2; int x3; bool x4; id x5; bool x6; unsigned int x7; }*)arg2;
- (id)_stylesMatchingAttributes:(id)arg1 clientAttributes:(struct { long long x1; int x2; int x3; bool x4; id x5; bool x6; unsigned int x7; }*)arg2;
- (void)addFinishedDecodingCallback:(id)arg1;
- (void)clearCaches;
- (void)dealloc;
- (id)init;
- (id)initWithData:(id)arg1 miniData:(id)arg2 forName:(id)arg3 scale:(float)arg4 ppi:(float)arg5 vendor:(id)arg6 targetDisplay:(long long)arg7 isDevResource:(bool)arg8;
- (id)initWithName:(id)arg1 scale:(float)arg2 ppi:(float)arg3 targetDisplay:(long long)arg4 vendor:(id)arg5 resourceManager:(id)arg6;
- (bool)isDevResource;
- (bool)isFinishedDecoding;
- (long long)rasterPolygonChangeoverZ;
- (id)sheetName;
- (int)styleAttributeValueForLocalization:(id)arg1;
- (id)styleForFeatureAttributes:(id)arg1 clientAttributes:(struct { long long x1; int x2; int x3; bool x4; id x5; bool x6; unsigned int x7; }*)arg2;
- (id)styleGlobalProperties;
- (id)styleMatchingAttributes:(id)arg1 vectorType:(long long)arg2 locale:(id)arg3 mapDisplayStyle:(unsigned long long)arg4 mapDisplayStyleVariant:(unsigned long long)arg5;
- (id)styleMatchingAttributes:(id)arg1 vectorType:(long long)arg2 locale:(id)arg3 mapDisplayStyle:(unsigned long long)arg4 mapDisplayStyleVariant:(unsigned long long)arg5 canSelectIcons:(bool)arg6 selected:(bool)arg7;
- (bool)supportsNightMode;

@end
