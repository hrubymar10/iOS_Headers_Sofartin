/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
 */

@interface VKMapCameraController : VKScreenCameraController <VKInteractiveCameraController, VKTrackingCameraControllerDelegate> {
    double _cameraHorizontalOffset;
    double _canonicalSkyHeight;
    double _finalPitch;
    double _finalYaw;
    VKAnimation *_horizontalOffsetAnimation;
    VKMapCanvas *_mapCanvas;
    VKMapModel *_mapModel;
    double _maxDistanceToGroundAlongForwardVector;
    double _minDistanceToGroundAlongForwardVector;
    float _navigationPuckSize;
    bool _panning;
    struct CGPoint { 
        double x; 
        double y; 
    } _pinchStartFocusPoint;
    bool _pinching;
    struct CGPoint { 
        double x; 
        double y; 
    } _pitchStartFocusPoint;
    bool _pitching;
    bool _shouldLimitTrackingCameraHeight;
    double _tracePlaybackSpeedMultiplier;
    VKTrackingCameraController *_trackingCameraController;
    int _trackingCameraPanStyle;
    double _userZoomFocusStyleGroundspanMeters;
    double _userZoomFocusStyleMaxGroundspanMeters;
    double _userZoomFocusStyleMinGroundspanMeters;
}

@property(assign,readwrite) bool allowDatelineWraparound;
@property(assign,readwrite) long long annotationTrackingZoomStyle;
@property(assign,readwrite) double canonicalSkyHeight;
@property(assign,readonly) struct { double x1; double x2; double x3; } centerCoordinate;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) VKMapCanvas * mapCanvas;
@property(assign,retain) VKMapModel * mapModel;
@property(assign,readonly) GEOMapRegion * mapRegion;
@property(assign,readonly) GEOMapRegion * mapRegionOfInterest;
@property(assign,readwrite) float navigationPuckSize;
@property(assign,readonly) double pitch;
@property(assign,readonly) double presentationYaw;
@property(assign,readwrite) bool shouldLimitTrackingCameraHeight;
@property(assign,readonly) Class superclass;
@property(assign,readwrite) double tracePlaybackSpeedMultiplier;
@property(assign,readwrite) int trackingCameraPanStyle;
@property(assign,readwrite) double trackingZoomScale;
@property(assign,readwrite) double userZoomFocusStyleGroundspanMeters;
@property(assign,readwrite) double userZoomFocusStyleMaxGroundspanMeters;
@property(assign,readwrite) double userZoomFocusStyleMinGroundspanMeters;
@property(assign,readonly) double yaw;

- (id).cxx_construct;
- (void)_animateToPosition:(struct VKPoint { double x1; double x2; double x3; })arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 timingCurve:(id)arg5 completion:(id)arg6;
- (struct CGPoint { double x1; double x2; })_centerScreenPoint;
- (id)_mapRegionIgnoringFarAmount:(double)arg1;
- (struct { double x1; double x2; })_mercatorCenterCoordinateForMapRegion:(id)arg1;
- (struct CGPoint { double x1; double x2; })_scaledScreenPointForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)allowDatelineWraparound;
- (double)altitude;
- (void)animateToMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(id)arg5;
- (bool)canEnter3DMode;
- (bool)canEnter3DModeNoUpdate;
- (double)canonicalSkyHeight;
- (void)canvasDidLayout;
- (void)canvasFrameDidChange;
- (struct { double x1; double x2; double x3; })centerCoordinate;
- (void)clampPitch:(double*)arg1 yaw:(double*)arg2 atTargetPositionZ:(double)arg3;
- (bool)clampZoomLevelIfNecessary;
- (float)currentDisplayZoomLevel;
- (float)currentMaximumNormalizedZoomLevel;
- (float)currentMinimumNormalizedZoomLevel;
- (float)currentNormalizedZoomLevel;
- (float)currentStyleZoomLevel;
- (float)currentTopDownMinimumNormalizedZoomLevel;
- (bool)currentZoomLevelAllowsRotation;
- (void)dealloc;
- (id)detailedDescription;
- (double)durationToAnimateToMapRegion:(id)arg1;
- (void)edgeInsetsDidEndAnimating;
- (void)edgeInsetsWillBeginAnimating;
- (void)enter3DMode;
- (void)exit3DMode;
- (struct VKPoint { double x1; double x2; double x3; })groundPointFromScreenPoint:(struct CGPoint { double x1; double x2; })arg1;
- (float)idealPitchForNormalizedZoomLevel:(float)arg1;
- (id)init;
- (bool)isAtDefaultTrackingZoomScale;
- (bool)isFullyPitched;
- (bool)isPitched;
- (bool)isTracking;
- (id)mapCanvas;
- (id)mapModel;
- (id)mapRegion;
- (id)mapRegionOfInterest;
- (float)maxPitchForNormalizedZoomLevel:(float)arg1;
- (long long)maximumNormalizedZoomLevel;
- (long long)minimumNormalizedZoomLevel;
- (float)minimumPitchForNormalizedZoomLevel:(float)arg1;
- (float)navigationPuckSize;
- (float)normalizedZoomLevelAdjustmentForTileSize:(long long)arg1;
- (void)pan:(struct CGPoint { double x1; double x2; })arg1;
- (void)panWithOffset:(struct CGPoint { double x1; double x2; })arg1 relativeToScreenPoint:(struct CGPoint { double x1; double x2; })arg2 animated:(bool)arg3 duration:(double)arg4 completionHandler:(id)arg5;
- (void)pauseCameraMotion;
- (void)pinch:(struct CGPoint { double x1; double x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (double)pitch;
- (void)pitch:(struct CGPoint { double x1; double x2; })arg1 translation:(double)arg2;
- (double)presentationYaw;
- (void)puckAnimator:(id)arg1 updatedPosition:(struct { struct VKPoint { double x_1_1_1; double x_1_1_2; double x_1_1_3; } x1; double x2; bool x3; }*)arg2;
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(struct VKPoint { double x1; double x2; double x3; })arg2;
- (void)puckAnimatorDidStop:(id)arg1;
- (bool)restoreViewportFromInfo:(id)arg1;
- (void)rotate:(double)arg1 atScreenPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)rotateToPitch:(double)arg1 withPoint:(const struct VKPoint { double x1; double x2; double x3; }*)arg2 preserveAltitude:(bool)arg3 animated:(bool)arg4 exaggerate:(bool)arg5;
- (void)rotateToYaw:(double)arg1 withPoint:(const struct VKPoint { double x1; double x2; double x3; }*)arg2 animated:(bool)arg3;
- (void)setAllowDatelineWraparound:(bool)arg1;
- (void)setCameraHorizontalOffset:(double)arg1 duration:(double)arg2 timingFunction:(id)arg3;
- (void)setCanonicalSkyHeight:(double)arg1;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(id)arg6 completion:(id)arg7;
- (void)setCenterCoordinate:(struct { double x1; double x2; double x3; })arg1 animated:(bool)arg2;
- (void)setEdgeInsets:(struct VKEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setGesturing:(bool)arg1;
- (void)setMapCanvas:(id)arg1;
- (void)setMapModel:(id)arg1;
- (void)setMapRegion:(id)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(bool)arg4 completion:(id)arg5;
- (void)setNavigationPuckSize:(float)arg1;
- (void)setShouldLimitTrackingCameraHeight:(bool)arg1;
- (void)setTracePlaybackSpeedMultiplier:(double)arg1;
- (void)setTrackingCameraPanStyle:(int)arg1;
- (void)setTrackingZoomScale:(double)arg1;
- (void)setUserZoomFocusStyleGroundspanMeters:(double)arg1;
- (void)setUserZoomFocusStyleMaxGroundspanMeters:(double)arg1;
- (void)setUserZoomFocusStyleMinGroundspanMeters:(double)arg1;
- (void)setYaw:(double)arg1 animated:(bool)arg2;
- (bool)shouldLimitTrackingCameraHeight;
- (bool)snapMapIfNecessary:(const struct VKPoint { double x1; double x2; double x3; }*)arg1 animated:(bool)arg2;
- (void)startCameraMotionAnimated:(bool)arg1 pounceCompletionHandler:(id)arg2;
- (void)startPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1 panAtStartPoint:(bool)arg2;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startTrackingAnnotation:(id)arg1 trackHeading:(bool)arg2 animated:(bool)arg3;
- (void)stopCameraMotion;
- (void)stopPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)tapZoom:(struct CGPoint { double x1; double x2; })arg1 levels:(double)arg2 completionHandler:(id)arg3;
- (long long)tileSize;
- (double)tracePlaybackSpeedMultiplier;
- (void)trackingCameraController:(id)arg1 updatedStartAnimationTargetPosition:(struct VKPoint { double x1; double x2; double x3; })arg2 orientation:(const struct { double x1[4][4]; }*)arg3;
- (int)trackingCameraPanStyle;
- (bool)trackingCanZoomIn;
- (bool)trackingCanZoomOut;
- (double)trackingZoomScale;
- (void)updateCameraContext:(id)arg1;
- (bool)updateCameraToPositionOrientationLimits;
- (void)updateCameraZBounds;
- (void)updatePanWithTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 translation:(double)arg2;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 newValue:(double)arg2;
- (void)updatedMatchedSection:(struct fast_shared_ptr<vk::RouteLineSection> { struct _fast_shared_ptr_control {} *x1; })arg1 index:(struct PolylineCoordinate { unsigned int x1; float x2; }*)arg2;
- (double)userZoomFocusStyleGroundspanMeters;
- (double)userZoomFocusStyleMaxGroundspanMeters;
- (double)userZoomFocusStyleMinGroundspanMeters;
- (id)viewportInfo;
- (double)yaw;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { double x1; double x2; })arg2 completionHandler:(id)arg3;
- (void)zoom:(double)arg1 withPoint:(struct VKPoint { double x1; double x2; double x3; })arg2 completionHandler:(id)arg3;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)zoomToLevel:(double)arg1 withPoint:(struct VKPoint { double x1; double x2; double x3; })arg2;

@end
