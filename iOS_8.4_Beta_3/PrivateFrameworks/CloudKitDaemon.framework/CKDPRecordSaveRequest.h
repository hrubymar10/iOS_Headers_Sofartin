/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudKitDaemon.framework/CloudKitDaemon
 */

@interface CKDPRecordSaveRequest : PBRequest <NSCopying> {
    CKDPRecordSaveRequestConflictLoserUpdate *_conflictLoserUpdate;
    NSMutableArray *_conflictLosersToResolves;
    NSString *_etag;
    NSMutableArray *_fieldsToDeleteIfExistOnMerges;
    struct { 
        unsigned int saveSemantics : 1; 
        unsigned int merge : 1; 
    } _has;
    bool _merge;
    CKDPRecord *_record;
    NSString *_recordProtectionInfoTag;
    int _saveSemantics;
    NSString *_shareEtag;
    CKDPRecordSaveRequestShareIdUpdate *_shareIDUpdate;
    NSString *_zoneProtectionInfoTag;
}

@property(assign,retain) CKDPRecordSaveRequestConflictLoserUpdate * conflictLoserUpdate;
@property(assign,retain) NSMutableArray * conflictLosersToResolves;
@property(assign,retain) NSString * etag;
@property(assign,retain) NSMutableArray * fieldsToDeleteIfExistOnMerges;
@property(assign,readonly) bool hasConflictLoserUpdate;
@property(assign,readonly) bool hasEtag;
@property(assign,readwrite) bool hasMerge;
@property(assign,readonly) bool hasRecord;
@property(assign,readonly) bool hasRecordProtectionInfoTag;
@property(assign,readwrite) bool hasSaveSemantics;
@property(assign,readonly) bool hasShareEtag;
@property(assign,readonly) bool hasShareIDUpdate;
@property(assign,readonly) bool hasZoneProtectionInfoTag;
@property(assign,readwrite) bool merge;
@property(assign,retain) CKDPRecord * record;
@property(assign,retain) NSString * recordProtectionInfoTag;
@property(assign,readwrite) int saveSemantics;
@property(assign,retain) NSString * shareEtag;
@property(assign,retain) CKDPRecordSaveRequestShareIdUpdate * shareIDUpdate;
@property(assign,retain) NSString * zoneProtectionInfoTag;

+ (id)options;

- (void).cxx_destruct;
- (void)addConflictLosersToResolve:(id)arg1;
- (void)addFieldsToDeleteIfExistOnMerge:(id)arg1;
- (void)clearConflictLosersToResolves;
- (void)clearFieldsToDeleteIfExistOnMerges;
- (id)conflictLoserUpdate;
- (id)conflictLosersToResolveAtIndex:(unsigned long long)arg1;
- (id)conflictLosersToResolves;
- (unsigned long long)conflictLosersToResolvesCount;
- (void)copyTo:(id)arg1;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)description;
- (id)dictionaryRepresentation;
- (id)etag;
- (id)fieldsToDeleteIfExistOnMergeAtIndex:(unsigned long long)arg1;
- (id)fieldsToDeleteIfExistOnMerges;
- (unsigned long long)fieldsToDeleteIfExistOnMergesCount;
- (bool)hasConflictLoserUpdate;
- (bool)hasEtag;
- (bool)hasMerge;
- (bool)hasRecord;
- (bool)hasRecordProtectionInfoTag;
- (bool)hasSaveSemantics;
- (bool)hasShareEtag;
- (bool)hasShareIDUpdate;
- (bool)hasZoneProtectionInfoTag;
- (unsigned long long)hash;
- (bool)isEqual:(id)arg1;
- (bool)merge;
- (void)mergeFrom:(id)arg1;
- (bool)readFrom:(id)arg1;
- (id)record;
- (id)recordProtectionInfoTag;
- (unsigned int)requestTypeCode;
- (Class)responseClass;
- (int)saveSemantics;
- (void)setConflictLoserUpdate:(id)arg1;
- (void)setConflictLosersToResolves:(id)arg1;
- (void)setEtag:(id)arg1;
- (void)setFieldsToDeleteIfExistOnMerges:(id)arg1;
- (void)setHasMerge:(bool)arg1;
- (void)setHasSaveSemantics:(bool)arg1;
- (void)setMerge:(bool)arg1;
- (void)setRecord:(id)arg1;
- (void)setRecordProtectionInfoTag:(id)arg1;
- (void)setSaveSemantics:(int)arg1;
- (void)setShareEtag:(id)arg1;
- (void)setShareIDUpdate:(id)arg1;
- (void)setZoneProtectionInfoTag:(id)arg1;
- (id)shareEtag;
- (id)shareIDUpdate;
- (void)writeTo:(id)arg1;
- (id)zoneProtectionInfoTag;

@end
