/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreRecognition.framework/CoreRecognition
 */

@interface CRCaptureSessionManager : NSObject {
    NSString *_cameraMode;
    long long _cameraPosition;
    struct CGSize { 
        double width; 
        double height; 
    } _cameraResolution;
    AVCaptureSession *_captureSession;
    <AVCaptureVideoDataOutputSampleBufferDelegate> *_captureSessionDelegate;
    AVCaptureVideoDataOutput *_captureVideoDataOutput;
    struct __CVBuffer { } *_correctedCreditCardBuffer;
    AVCaptureDeviceInput *_deviceInput;
    long long _exposureMode;
    long long _focusMode;
    id _inputPortFormatObserver;
    AVCaptureVideoPreviewLayer *_previewLayer;
    long long _torchMode;
    long long _whiteBalanceMode;
}

@property (nonatomic, copy) NSString *cameraMode;
@property (nonatomic) long long cameraPosition;
@property (nonatomic) struct CGSize { double x1; double x2; } cameraResolution;
@property (nonatomic, retain) AVCaptureSession *captureSession;
@property (nonatomic) <AVCaptureVideoDataOutputSampleBufferDelegate> *captureSessionDelegate;
@property (nonatomic, retain) AVCaptureVideoDataOutput *captureVideoDataOutput;
@property struct __CVBuffer { }*correctedCreditCardBuffer;
@property (nonatomic, retain) AVCaptureDeviceInput *deviceInput;
@property (nonatomic) long long exposureMode;
@property (nonatomic) long long focusMode;
@property (retain) id inputPortFormatObserver;
@property (nonatomic, retain) AVCaptureVideoPreviewLayer *previewLayer;
@property (nonatomic) long long torchMode;
@property (nonatomic) long long whiteBalanceMode;

- (void).cxx_destruct;
- (void)_refocusOnPoint:(struct CGPoint { double x1; double x2; })arg1 focusMode:(long long)arg2 exposure:(bool)arg3;
- (id)backFacingCamera;
- (void)cacheCameraResolution:(id)arg1;
- (unsigned long long)cameraCount;
- (id)cameraMode;
- (long long)cameraPosition;
- (struct CGSize { double x1; double x2; })cameraResolution;
- (id)captureDeviceWithPosition:(long long)arg1;
- (id)captureSession;
- (id)captureSessionDelegate;
- (id)captureVideoDataOutput;
- (void)changeCameraConfiguration;
- (struct CGPoint { double x1; double x2; })convertCameraPoint:(struct CGPoint { double x1; double x2; })arg1 fromLayer:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertCameraPoint:(struct CGPoint { double x1; double x2; })arg1 toLayer:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertCameraPoint:(struct CGPoint { double x1; double x2; })arg1 toLayer:(id)arg2 flipped:(bool)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertCameraRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromLayer:(id)arg2;
- (struct __CVBuffer { }*)correctedCreditCardBuffer;
- (id)deviceInput;
- (long long)exposureMode;
- (long long)focusMode;
- (id)frontFacingCamera;
- (id)inputPortFormatObserver;
- (bool)isAdjustingFocus;
- (bool)isRearCamera;
- (bool)isRunning;
- (id)previewLayer;
- (void)refocusOnPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)refocusOnPoint:(struct CGPoint { double x1; double x2; })arg1 exposure:(bool)arg2;
- (void)resetFocus;
- (void)setCameraMode:(id)arg1;
- (void)setCameraPosition:(long long)arg1;
- (void)setCameraResolution:(struct CGSize { double x1; double x2; })arg1;
- (void)setCaptureSession:(id)arg1;
- (void)setCaptureSessionDelegate:(id)arg1;
- (void)setCaptureVideoDataOutput:(id)arg1;
- (void)setCorrectedCreditCardBuffer:(struct __CVBuffer { }*)arg1;
- (void)setDeviceInput:(id)arg1;
- (void)setExposureMode:(long long)arg1;
- (void)setFocusMode:(long long)arg1;
- (void)setInputPortFormatObserver:(id)arg1;
- (void)setPreviewLayer:(id)arg1;
- (void)setPreviewOrientation:(long long)arg1;
- (void)setTorchMode:(long long)arg1;
- (void)setWhiteBalanceMode:(long long)arg1;
- (void)setupCameraSession;
- (void)startRunning;
- (void)stopRunning;
- (bool)switchToCamera:(long long)arg1;
- (void)teardownCameraSession;
- (bool)toggleCamera;
- (long long)torchMode;
- (long long)whiteBalanceMode;

@end
