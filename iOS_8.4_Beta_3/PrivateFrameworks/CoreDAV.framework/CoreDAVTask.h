/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CoreDAV.framework/CoreDAV
 */

@interface CoreDAVTask : NSObject <CoreDAVSubmittable> {
    <CoreDAVAccountInfoProvider> *_accountInfoProvider;
    bool _allowAutomaticRedirects;
    id _completionBlock;
    bool _compressedRequestFailed;
    NSURLConnection *_connection;
    id _context;
    NSDate *_dateConnectionWentOut;
    <CoreDAVTaskDelegate> *_delegate;
    int _depth;
    bool _didCancel;
    bool _didFailWithError;
    bool _didFinishLoading;
    bool _didReceiveData;
    bool _didReceiveResponse;
    bool _didRetryWithClientToken;
    bool _didSendRequest;
    NSError *_error;
    bool _everTriedTokenAuth;
    NSData *_fakeResponseData;
    bool _finished;
    CoreDAVErrorItem *_forbiddenErrorItem;
    bool _haveParsedFakeResponseData;
    bool _justTriedTokenAuth;
    CoreDAVRequestLogger *_logger;
    long long _numDownloadedElements;
    NSMutableDictionary *_overriddenHeaders;
    NSError *_passwordNotificationError;
    bool _receivedBadPasswordResponse;
    NSMutableArray *_redirectHistory;
    NSURLRequest *_request;
    bool _requestIsCompressed;
    id _requestProgressBlock;
    NSDictionary *_requestProperties;
    NSHTTPURLResponse *_response;
    <CoreDAVResponseBodyParser> *_responseBodyParser;
    id _responseProgressBlock;
    long long _responseStatusCode;
    bool _shouldRetryWithClientToken;
    <CoreDAVTaskManager> *_taskManager;
    double _timeoutInterval;
    unsigned long long _totalBytesReceived;
    bool _triedRenewingCredential;
    NSString *_uniqueID;
    NSURL *_url;
}

@property(assign,readwrite) <CoreDAVAccountInfoProvider> * accountInfoProvider;
@property(assign,readwrite) bool allowAutomaticRedirects;
@property(assign,copy) id completionBlock;
@property(assign,retain) id context;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <CoreDAVTaskDelegate> * delegate;
@property(assign,readwrite) int depth;
@property(assign,copy) NSString * description;
@property(assign,retain) NSError * error;
@property(getter=isFinished,assign,readonly) bool finished;
@property(assign,readonly) unsigned long long hash;
@property(assign,copy) id requestProgressBlock;
@property(assign,retain) NSDictionary * requestProperties;
@property(assign,retain) <CoreDAVResponseBodyParser> * responseBodyParser;
@property(assign,readonly) NSDictionary * responseHeaders;
@property(assign,copy) id responseProgressBlock;
@property(assign,readwrite) long long responseStatusCode;
@property(assign,readonly) Class superclass;
@property(assign,readwrite) <CoreDAVTaskManager> * taskManager;
@property(assign,readwrite) double timeoutInterval;
@property(assign,readwrite) unsigned long long totalBytesReceived;
@property(assign,readonly) NSURL * url;

+ (id)stringFromDepth:(int)arg1;
+ (unsigned int)uniqueQueryID;

- (id)_applyAuthenticationChain:(struct __CFArray { }*)arg1 toRequest:(id)arg2;
- (id)_applyStorageSession:(struct __CFURLStorageSession { }*)arg1 toRequest:(id)arg2;
- (id)_compressBodyData:(id)arg1;
- (id)_connectionForLogging;
- (id)_createBodyData;
- (void)_failImmediately;
- (void)_handleBadPasswordResponse;
- (bool)_handleUnauthorizedAccessError:(id)arg1;
- (bool)_includeGeneralHeaders;
- (id)_requestForLogging;
- (void)_sendTimeSpentInNetworkingToProvider;
- (bool)_shouldHandleStatusCode:(long long)arg1;
- (id)accountInfoProvider;
- (id)additionalHeaderValues;
- (bool)allowAutomaticRedirects;
- (unsigned long long)cachePolicy;
- (id)completionBlock;
- (bool)connection:(id)arg1 canAuthenticateAgainstProtectionSpace:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (void)connection:(id)arg1 didReceiveAuthenticationChallenge:(id)arg2;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connection:(id)arg1 didSendBodyData:(long long)arg2 totalBytesWritten:(long long)arg3 totalBytesExpectedToWrite:(long long)arg4;
- (id)connection:(id)arg1 needNewBodyStream:(id)arg2;
- (id)connection:(id)arg1 willSendRequest:(id)arg2 redirectResponse:(id)arg3;
- (void)connection:(id)arg1 willSendRequestForAuthenticationChallenge:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (bool)connectionShouldUseCredentialStorage:(id)arg1;
- (id)context;
- (id)copyDefaultParserForContentType:(id)arg1;
- (id)credentialForOAuthChallenge:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (int)depth;
- (id)description;
- (id)error;
- (void)finishCoreDAVTaskWithError:(id)arg1;
- (void)finishEarlyWithError:(id)arg1;
- (void)handleWebLoginRequestWithCompletionBlock:(id)arg1;
- (id)httpMethod;
- (id)initWithURL:(id)arg1;
- (bool)isFinished;
- (id)lastRedirectURL;
- (void)loadRequest:(id)arg1;
- (bool)markAsFinished;
- (long long)numDownloadedElements;
- (void)overrideRequestHeader:(id)arg1 withValue:(id)arg2;
- (void)performCoreDAVTask;
- (void)reportStatusWithError:(id)arg1;
- (id)requestBody;
- (id)requestBodyStream;
- (id)requestProgressBlock;
- (id)requestProperties;
- (void)reset;
- (id)responseBodyParser;
- (id)responseHeaders;
- (id)responseProgressBlock;
- (long long)responseStatusCode;
- (void)setAccountInfoProvider:(id)arg1;
- (void)setAllowAutomaticRedirects:(bool)arg1;
- (void)setCompletionBlock:(id)arg1;
- (void)setContext:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDepth:(int)arg1;
- (void)setError:(id)arg1;
- (void)setRequestProgressBlock:(id)arg1;
- (void)setRequestProperties:(id)arg1;
- (void)setResponseBodyParser:(id)arg1;
- (void)setResponseProgressBlock:(id)arg1;
- (void)setResponseStatusCode:(long long)arg1;
- (void)setTaskManager:(id)arg1;
- (void)setTimeoutInterval:(double)arg1;
- (void)setTotalBytesReceived:(unsigned long long)arg1;
- (bool)shouldLogResponseBody;
- (void)startModal;
- (void)submitWithTaskManager:(id)arg1;
- (id)taskManager;
- (void)tearDownResources;
- (double)timeoutInterval;
- (unsigned long long)totalBytesReceived;
- (id)url;
- (bool)validate:(id*)arg1;

@end
