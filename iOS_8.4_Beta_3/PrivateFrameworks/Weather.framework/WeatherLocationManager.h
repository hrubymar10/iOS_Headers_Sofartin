/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/Weather.framework/Weather
 */

@interface WeatherLocationManager : NSObject <CLLocationManagerDelegate> {
    NSTimer *_accuracyFallbackTimer;
    bool _activelyTrackingLocation;
    int _authorizationStatus;
    bool _authorizationStatusSet;
    NSTimer *_automaticLocationUpdateTimer;
    <CLLocationManagerDelegate> *_delegate;
    float _lastLocationAccuracy;
    struct { 
        double latitude; 
        double longitude; 
    } _lastLocationCoord;
    NSDate *_lastLocationTimeStamp;
    double _lastLocationUpdateTime;
    CLLocationManager *_locationManager;
    bool _locationTrackingIsReady;
    double _nextPlannedUpdate;
    double _oldestAcceptedTime;
}

@property (nonatomic) bool activelyTrackingLocation;
@property (nonatomic) int authorizationStatus;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <CLLocationManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic) float lastLocationAccuracy;
@property (nonatomic) struct { double x1; double x2; } lastLocationCoord;
@property (nonatomic, copy) NSDate *lastLocationTimeStamp;
@property (nonatomic, retain) CLLocationManager *locationManager;
@property (nonatomic) bool locationTrackingIsReady;
@property (readonly) Class superclass;

+ (void)clearSharedLocationManager;
+ (id)sharedWeatherLocationManager;

- (void)_cleanupAccuracyFallbackTimer;
- (void)_cleanupLocationTimer;
- (void)_clearLastLocUpdateTime;
- (double)_lastLocationUpdateTime;
- (double)_nextPlannedUpdate;
- (void)_setAuthorizationStatus:(int)arg1;
- (void)_setUpLocationTimerWithInterval:(float)arg1;
- (void)_updateLocation:(id)arg1;
- (bool)activelyTrackingLocation;
- (void)adjustDefaultSelectionForWeatherLocationUpdate:(bool)arg1;
- (void)askForLocationManagerAuthorization;
- (int)authorizationStatus;
- (void)clearLocalWeatherUpdateState;
- (void)dealloc;
- (id)delegate;
- (int)forceLoadingAuthorizationStatus;
- (void)forceLocationUpdate;
- (bool)isLocalStaleOrOutOfDate;
- (float)lastLocationAccuracy;
- (struct { double x1; double x2; })lastLocationCoord;
- (id)lastLocationTimeStamp;
- (bool)loadAndPrepareLocationTrackingState:(bool)arg1;
- (bool)localWeatherAuthorized;
- (id)location;
- (id)locationManager;
- (void)locationManager:(id)arg1 didChangeAuthorizationStatus:(int)arg2;
- (void)locationManager:(id)arg1 didUpdateLocations:(id)arg2;
- (bool)locationTrackingIsReady;
- (void)rescheduleTimerWithFastInterval:(bool)arg1;
- (void)setActivelyTrackingLocation:(bool)arg1;
- (void)setAuthorizationStatus:(int)arg1;
- (void)setDelegate:(id)arg1;
- (void)setLastLocationAccuracy:(float)arg1;
- (void)setLastLocationCoord:(struct { double x1; double x2; })arg1;
- (void)setLastLocationTimeStamp:(id)arg1;
- (void)setLocationManager:(id)arg1;
- (void)setLocationTrackingActive:(bool)arg1;
- (void)setLocationTrackingIsReady:(bool)arg1;
- (void)setLocationTrackingReady:(bool)arg1 activelyTracking:(bool)arg2 watchKitExtension:(bool)arg3;
- (void)updateLocation:(id)arg1;

@end
