/* Generated by RuntimeBrowser
   Image: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/CloudPhotoLibrary
 */

@interface CPLEngineStore : NSObject <CPLAbstractObject, CPLEngineComponent> {
    bool _batchedTransactionDequeueIsScheduled;
    NSMutableArray *_batchedTransactions;
    NSObject<OS_dispatch_queue> *_batchedTransactionsQueue;
    CPLEngineClientCache *_clientCache;
    CPLEngineCloudCache *_cloudCache;
    CPLEngineChangePipe *_deletePushQueue;
    CPLEngineResourceDownloadQueue *_downloadQueue;
    CPLEngineLibrary *_engineLibrary;
    CPLEngineIDMapping *_idMapping;
    CPLPlatformObject *_platformObject;
    CPLEngineChangePipe *_pullQueue;
    CPLEngineChangePipe *_pushQueue;
    CPLEngineRemappedDeletes *_remappedDeletes;
    NSMutableArray *_resetEvents;
    NSURL *_resetEventsURL;
    CPLEngineResourceStorage *_resourceStorage;
    unsigned long long _state;
    NSHashTable *_storages;
    CPLEngineTransientRepository *_transientPullRepository;
    CPLEngineResourceUploadQueue *_uploadQueue;
}

@property(assign,readonly) CPLEngineClientCache * clientCache;
@property(assign,readonly) CPLEngineCloudCache * cloudCache;
@property(assign,copy) NSString * debugDescription;
@property(assign,readonly) CPLEngineChangePipe * deletePushQueue;
@property(assign,copy) NSString * description;
@property(assign,readonly) CPLEngineResourceDownloadQueue * downloadQueue;
@property(assign,readonly) CPLEngineLibrary * engineLibrary;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) CPLEngineIDMapping * idMapping;
@property(assign,readonly) NSDate * libraryCreationDate;
@property(assign,readonly) CPLPlatformObject * platformObject;
@property(assign,readonly) CPLEngineChangePipe * pullQueue;
@property(assign,readonly) CPLEngineChangePipe * pushQueue;
@property(assign,readonly) bool pushQueuesAreFull;
@property(assign,readonly) CPLEngineRemappedDeletes * remappedDeletes;
@property(assign,readonly) CPLEngineResourceStorage * resourceStorage;
@property(assign,readwrite) unsigned long long state;
@property(assign,readonly) NSArray * storages;
@property(assign,readonly) Class superclass;
@property(assign,readonly) CPLEngineTransientRepository * transientPullRepository;
@property(assign,readonly) CPLEngineResourceUploadQueue * uploadQueue;

+ (id)platformImplementationProtocol;
+ (id)stateDescriptionForState:(unsigned long long)arg1;

- (void).cxx_destruct;
- (bool)_canRead;
- (bool)_canWrite;
- (id)_currentTransaction;
- (void)_performTransaction:(id)arg1 withBlock:(id)arg2;
- (void)_reallyPerformBatchedTransactionsLocked;
- (void)_removeTransactionOnCurrentThread:(id)arg1;
- (id)_resetEventsDescriptions;
- (bool)_resetLocalSyncStateWithError:(id*)arg1;
- (void)_scheduleBatchedTransactionsLocked;
- (void)_setTransactionOnCurrentThread:(id)arg1;
- (void)_storeResetEvent:(id)arg1 cause:(id)arg2;
- (void)assertCanRead;
- (void)assertCanWrite;
- (id)clientCache;
- (id)clientCacheIdentifier;
- (void)closeAndDeactivate:(bool)arg1 completionHandler:(id)arg2;
- (id)cloudCache;
- (id)componentName;
- (id)createNewLibraryVersion;
- (void)dealloc;
- (id)deletePushQueue;
- (id)description;
- (id)downloadQueue;
- (id)engineLibrary;
- (void)getStatusDictionaryWithCompletionHandler:(id)arg1;
- (void)getStatusWithCompletionHandler:(id)arg1;
- (id)idMapping;
- (id)initWithEngineLibrary:(id)arg1;
- (bool)isClientInSyncWithClientCache;
- (id)libraryCreationDate;
- (id)libraryVersion;
- (id)libraryZoneName;
- (void)openWithCompletionHandler:(id)arg1;
- (void)performBatchedWriteTransactionWithBlock:(id)arg1 completionHandler:(id)arg2;
- (id)performReadTransactionWithBlock:(id)arg1;
- (id)performWriteTransactionWithBlock:(id)arg1 completionHandler:(id)arg2;
- (id)platformObject;
- (id)pullQueue;
- (id)pushQueue;
- (bool)pushQueuesAreFull;
- (void)registerStorage:(id)arg1;
- (id)remappedDeletes;
- (bool)resetCompleteSyncStateWithCause:(id)arg1 error:(id*)arg2;
- (bool)resetLocalSyncStateWithCause:(id)arg1 error:(id*)arg2;
- (id)resourceStorage;
- (void)setState:(unsigned long long)arg1;
- (unsigned long long)state;
- (id)storages;
- (bool)storeClientIsInSyncWithClientCacheWithError:(id*)arg1;
- (bool)storeLibraryVersion:(id)arg1 withError:(id*)arg2;
- (bool)storeLibraryZoneName:(id)arg1 error:(id*)arg2;
- (bool)storeUserIdentifier:(id)arg1 error:(id*)arg2;
- (id)transientPullRepository;
- (id)uploadQueue;
- (id)userIdentifier;

@end
