/* Generated by RuntimeBrowser.
 */

@protocol VKInteractiveMap <NSObject>

@required

+ (bool)supportsMapType:(long long)arg1 scale:(int)arg2;

- (void)_setStyleTransitionProgress:(double)arg1 targetStyle:(unsigned long long)arg2 step:(long long)arg3;
- (double)_styleTransitionProgress;
- (void)addAnnotationMarker:(VKAnnotationMarker *)arg1 allowAnimation:(bool)arg2;
- (void)addExternalAnchor:(VKAnchorWrapper *)arg1;
- (void)addOverlay:(id <VKOverlay>)arg1;
- (void)addPersistentOverlay:(id <VKOverlay>)arg1;
- (double)altitude;
- (void)animateToMapRegion:(GEOMapRegion *)arg1 pitch:(double)arg2 yaw:(double)arg3 duration:(double)arg4 completion:(id)arg5;
- (id)annotationCoordinateTest:(bool)arg1;
- (id)annotationMarkerDeselectionCallback:(void)arg1;
- (VKAnnotationMarker *)annotationMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1 avoidCurrent:(bool)arg2;
- (NSArray *)annotationMarkers;
- (id)annotationRectTest:(long long)arg1;
- (long long)annotationTrackingHeadingAnimationDisplayRate;
- (long long)annotationTrackingZoomStyle;
- (NSArray *)attributionsForCurrentRegion;
- (bool)canEnter3DMode;
- (bool)canZoomInForTileSize:(long long)arg1;
- (bool)canZoomOutForTileSize:(long long)arg1;
- (struct { double x1; double x2; double x3; })centerCoordinate;
- (NSString *)consoleString:(bool)arg1;
- (struct CGPoint { double x1; double x2; })convertCoordinateToCameraModelPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertCoordinateToPoint:(struct { double x1; double x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertMapPointToPoint:(struct { double x1; double x2; })arg1;
- (struct { double x1; double x2; })convertPointToCoordinate:(struct CGPoint { double x1; double x2; })arg1;
- (struct { double x1; double x2; })convertPointToMapPoint:(struct CGPoint { double x1; double x2; })arg1;
- (double)currentZoomLevel;
- (bool)currentZoomLevelAllowsRotation;
- (double)currentZoomLevelForTileSize:(long long)arg1;
- (void)debugHighlightLabelAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (<VKInteractiveMapDelegate> *)delegate;
- (void)deselectAnnotationMarker:(VKAnnotationMarker *)arg1;
- (void)deselectLabelMarker;
- (NSString *)detailedDescription;
- (void)didStartPanningDeceleration;
- (double)durationToAnimateToMapRegion:(GEOMapRegion *)arg1;
- (void)enter3DMode;
- (void)exit3DMode;
- (VKAnchorWrapper *)externalAnchors;
- (NSArray *)externalTrafficIncidents;
- (bool)isAnimatingToTrackAnnotation;
- (bool)isFullyDrawn;
- (bool)isFullyPitched;
- (bool)isPitchable;
- (bool)isPitched;
- (bool)isPointValidForGesturing:(struct CGPoint { double x1; double x2; })arg1;
- (bool)isShowingNoDataPlaceholders;
- (bool)isTrackingHeading;
- (VKLabelMarker *)labelMarkerForSelectionAtPoint:(struct CGPoint { double x1; double x2; })arg1 selectableLabelsOnly:(bool)arg2;
- (bool)labelMarkerSelectionEnabled;
- (NSArray *)labelMarkers;
- (long long)labelScaleFactor;
- (bool)localizeLabels;
- (GEOMapRegion *)mapRegion;
- (GEOMapRegion *)mapRegionOfInterest;
- (long long)mapType;
- (double)maximumZoomLevel;
- (double)maximumZoomLevelForTileSize:(long long)arg1;
- (double)minimumZoomLevel;
- (double)minimumZoomLevelForTileSize:(long long)arg1;
- (long long)navigationShieldSize;
- (NSArray *)overlays;
- (void)panWithOffset:(struct CGPoint { double x1; double x2; })arg1 relativeToScreenPoint:(struct CGPoint { double x1; double x2; })arg2 animated:(bool)arg3 duration:(double)arg4 completionHandler:(id)arg5;
- (NSSet *)persistentOverlays;
- (double)pitch;
- (double)presentationYaw;
- (void)removeAnnotationMarker:(VKAnnotationMarker *)arg1;
- (void)removeExternalAnchor:(VKAnchorWrapper *)arg1;
- (void)removeOverlay:(id <VKOverlay>)arg1;
- (void)removePersistentOverlay:(id <VKOverlay>)arg1;
- (void)requestStylesheetAnimation:(VKAnimation *)arg1 targetMapDisplayStyle:(unsigned long long)arg2 setupHandler:(id)arg3;
- (bool)restoreViewportFromInfo:(VKViewportInfo *)arg1;
- (<VKRouteMatchedAnnotationPresentation> *)routeLineSplitAnnotation;
- (struct PolylineCoordinate { unsigned int x1; float x2; })routeUserOffset;
- (struct VKPoint { double x1; double x2; double x3; })screenPointForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)selectAnnotationMarker:(VKAnnotationMarker *)arg1;
- (void)selectLabelMarker:(VKLabelMarker *)arg1;
- (VKAnnotationMarker *)selectedAnnotationMarker;
- (VKLabelMarker *)selectedLabelMarker;
- (void)setAnnotationMarkerDeselectionCallback:(id)arg1;
- (void)setAnnotationTrackingHeadingAnimationDisplayRate:(long long)arg1;
- (void)setAnnotationTrackingZoomStyle:(long long)arg1;
- (void)setCenterCoordinate:(struct { double x1; double x2; })arg1 altitude:(double)arg2 yaw:(double)arg3 pitch:(double)arg4 duration:(double)arg5 timingCurve:(id)arg6 completion:(/* Warning: Unrecognized filer type: '?' using 'void*' */ void*)arg7;
- (void)setDelegate:(id <VKInteractiveMapDelegate>)arg1;
- (void)setExternalTrafficIncidents:(NSArray *)arg1;
- (void)setIsPitchable:(bool)arg1;
- (void)setLabelMarkerSelectionEnabled:(bool)arg1;
- (void)setLabelScaleFactor:(long long)arg1;
- (void)setLocalizeLabels:(bool)arg1;
- (void)setMapRegion:(GEOMapRegion *)arg1;
- (void)setMapRegion:(GEOMapRegion *)arg1 animated:(bool)arg2;
- (void)setMapRegion:(GEOMapRegion *)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(bool)arg4;
- (void)setMapRegion:(GEOMapRegion *)arg1 pitch:(double)arg2 yaw:(double)arg3 animated:(bool)arg4 completion:(id)arg5;
- (void)setMapType:(long long)arg1;
- (void)setNavigationShieldSize:(long long)arg1;
- (void)setRouteLineSplitAnnotation:(id <VKRouteMatchedAnnotationPresentation>)arg1;
- (void)setRouteUserOffset:(struct PolylineCoordinate { unsigned int x1; float x2; })arg1;
- (void)setShieldIdiom:(long long)arg1;
- (void)setShieldSize:(long long)arg1;
- (void)setShowsBuildings:(bool)arg1;
- (void)setShowsPointsOfInterest:(bool)arg1;
- (void)setStaysCenteredDuringPinch:(bool)arg1;
- (void)setStaysCenteredDuringRotation:(bool)arg1;
- (void)setStylesheetMapDisplayStyle:(unsigned long long)arg1;
- (void)setTrafficEnabled:(bool)arg1;
- (void)setYaw:(double)arg1 animated:(bool)arg2;
- (long long)shieldIdiom;
- (long long)shieldSize;
- (bool)shouldHideOffscreenSelectedAnnotation;
- (bool)showsBuildings;
- (bool)showsPointsOfInterest;
- (void)startPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1 panAtStartPoint:(bool)arg2;
- (void)startPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startPitchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startRotatingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)startTrackingAnnotation:(id <VKTrackableAnnotation>)arg1 trackHeading:(bool)arg2 animated:(bool)arg3;
- (bool)staysCenteredDuringPinch;
- (bool)staysCenteredDuringRotation;
- (void)stopPanningAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopPinchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopPitchingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopRotatingWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopSnappingAnimations;
- (void)stopTrackingAnnotation;
- (void)stylesheetAnimationDidEnd:(bool)arg1;
- (void)stylesheetAnimationDidProgress:(float)arg1;
- (void)stylesheetAnimationWillStartFromStyle:(unsigned long long)arg1 toStyle:(unsigned long long)arg2;
- (double)topDownMinimumZoomLevelForTileSize:(long long)arg1;
- (<VKTrackableAnnotation> *)trackingAnnotation;
- (bool)trafficEnabled;
- (void)updatePanWithTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (void)updatePinchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 oldFactor:(double)arg2 newFactor:(double)arg3;
- (void)updatePitchWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 translation:(double)arg2;
- (void)updateRotationWithFocusPoint:(struct CGPoint { double x1; double x2; })arg1 newValue:(double)arg2;
- (VKViewportInfo *)viewportInfo;
- (NSArray *)visibleTileSets;
- (double)yaw;
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint { double x1; double x2; })arg2 completionHandler:(id)arg3;
- (double)zoomLevelAdjustmentForTileSize:(long long)arg1;
- (void)zoomToLevel:(double)arg1 withFocusPoint:(struct CGPoint { double x1; double x2; })arg2;

@end
