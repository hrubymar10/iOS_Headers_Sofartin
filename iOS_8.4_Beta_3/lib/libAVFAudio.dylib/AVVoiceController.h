/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AVFoundation.framework/libAVFAudio.dylib
 */

@interface AVVoiceController : NSObject {
    void *_impl;
}

@property(assign,readwrite) float alertVolume;
@property(getter=isBargeInDetectEnabled,assign,readwrite) bool bargeInDetectEnabled;
@property(assign,retain) <Endpointer> * endpointerDelegate;
@property(assign,readonly) unsigned long long lastRecordStartTime;
@property(getter=isMeteringEnabled,assign,readwrite) bool meteringEnabled;
@property(assign,readwrite) <AVVoiceControllerPlaybackDelegate> * playbackDelegate;
@property(assign,readonly) NSDictionary * playbackSettings;
@property(assign,readwrite) float playbackVolume;
@property(getter=isPlaying,assign,readonly) bool playing;
@property(assign,readwrite) <AVVoiceControllerRecordDelegate> * recordDelegate;
@property(assign,readwrite) double recordEndWaitTime;
@property(assign,readwrite) int recordEndpointMode;
@property(assign,readwrite) double recordInterspeechWaitTime;
@property(assign,copy) NSString * recordRoute;
@property(assign,readonly) NSDictionary * recordSettings;
@property(assign,readwrite) double recordStartWaitTime;
@property(getter=isRecording,assign,readonly) bool recording;
@property(getter=isStopOnBargeInEnabled,assign,readwrite) bool stopOnBargeInEnabled;
@property(getter=isStopOnEndpointEnabled,assign,readwrite) bool stopOnEndpointEnabled;
@property(getter=isSynchronousCallbackEnabled,assign,readwrite) bool synchronousCallbackEnabled;
@property(assign,readonly) NSDictionary * voiceTriggerInfo;

- (float)alertVolume;
- (float)averagePowerForChannel:(unsigned long long)arg1;
- (void)beganPlaying;
- (void)beganRecording;
- (void)beginPlaybackInterruption;
- (void)beginRecordInterruption;
- (void)dealloc;
- (void)decodeError;
- (void)encodeError;
- (void)endPlaybackInterruption;
- (void)endRecordInterruption;
- (void)endpointDetected;
- (id)endpointerDelegate;
- (void)finalize;
- (void)finishedPlaying;
- (void)finishedRecording;
- (double)getPlaybackBufferDuration;
- (double)getRecordBufferDuration;
- (void)handleInterruption:(id)arg1;
- (void)handleMediaServerDeath:(id)arg1;
- (void)handleMediaServerReset:(id)arg1;
- (void)handleRouteChange:(id)arg1;
- (void)hardwareConfigChanged;
- (struct ControllerImpl { int (**x1)(); id x2; id x3; struct CAStreamBasicDescription { double x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; unsigned int x_4_1_4; unsigned int x_4_1_5; unsigned int x_4_1_6; unsigned int x_4_1_7; unsigned int x_4_1_8; unsigned int x_4_1_9; } x4; double x5; bool x6; struct AudioQueueLevelMeterState {} *x7; struct OpaqueAudioQueue {} *x8; int x9; struct OpaqueAudioConverter {} *x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; struct AudioQueueBuffer {} **x15; int x16; unsigned long long x17; unsigned long long x18; bool x19; struct MemorySyncBool { bool x_20_1_1; } x20; bool x21; bool x22; float x23; id x24; struct __CFDictionary {} *x25; unsigned int x26; id x27; id x28; struct CAStreamBasicDescription { double x_29_1_1; unsigned int x_29_1_2; unsigned int x_29_1_3; unsigned int x_29_1_4; unsigned int x_29_1_5; unsigned int x_29_1_6; unsigned int x_29_1_7; unsigned int x_29_1_8; unsigned int x_29_1_9; } x29; double x30; struct OpaqueAudioQueue {} *x31; int x32; id x33; unsigned int x34; struct AudioQueueBuffer {} **x35; int x36; bool x37; bool x38; bool x39; bool x40; struct MemorySyncBool { bool x_41_1_1; } x41; bool x42; float x43; unsigned int x44; struct CAStreamBasicDescription { double x_45_1_1; unsigned int x_45_1_2; unsigned int x_45_1_3; unsigned int x_45_1_4; unsigned int x_45_1_5; unsigned int x_45_1_6; unsigned int x_45_1_7; unsigned int x_45_1_8; unsigned int x_45_1_9; } x45; long long x46; struct OpaqueAudioQueue {} *x47; struct map<AVVoiceAlertType, NSURL *, std::__1::less<AVVoiceAlertType>, std::__1::allocator<std::__1::pair<const AVVoiceAlertType, NSURL *> > > { struct __tree<std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::less<AVVoiceAlertType>, true>, std::__1::allocator<std::__1::__value_type<AVVoiceAlertType, NSURL *> > > { struct __tree_node<std::__1::__value_type<AVVoiceAlertType, NSURL *>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<AVVoiceAlertType, NSURL *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, NSURL *>, std::__1::less<AVVoiceAlertType>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_48_1_1; } x48; struct map<AVVoiceAlertType, AudioQueueBuffer *, std::__1::less<AVVoiceAlertType>, std::__1::allocator<std::__1::pair<const AVVoiceAlertType, AudioQueueBuffer *> > > { struct __tree<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, std::__1::less<AVVoiceAlertType>, true>, std::__1::allocator<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *> > > { struct __tree_node<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<AVVoiceAlertType, std::__1::__value_type<AVVoiceAlertType, AudioQueueBuffer *>, std::__1::less<AVVoiceAlertType>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_49_1_1; } x49; bool x50; bool x51; int x52; float x53; double x54; unsigned long long x55; float x56; float x57; struct OpaqueAudioQueue {} *x58; id x59; struct OpaqueAudioFileID {} *x60; unsigned int x61; struct AudioFormatListItem {} *x62; unsigned int x63; unsigned long long x64; char *x65; struct AudioFilePacketTableInfo { long long x_66_1_1; int x_66_1_2; int x_66_1_3; } x66; long long x67; long long x68; bool x69; int x70; int x71; id x72; bool x73; bool x74; bool x75; bool x76; int x77; double x78; double x79; double x80; bool x81; bool x82; bool x83; id x84; unsigned char x85; int x86; bool x87; int x88; bool x89; unsigned int x90; long long x91; id x92; struct _opaque_pthread_mutex_t { long long x_93_1_1; BOOL x_93_1_2[56]; } x93[5]; int x94; int x95; int x96; }*)impl;
- (id)initWithContext:(id)arg1 error:(id*)arg2;
- (void)interspeechPointDetected;
- (bool)isBargeInDetectEnabled;
- (bool)isMeteringEnabled;
- (bool)isPlaying;
- (bool)isRecording;
- (bool)isStopOnBargeInEnabled;
- (bool)isStopOnEndpointEnabled;
- (bool)isSynchronousCallbackEnabled;
- (unsigned long long)lastRecordStartTime;
- (float)peakPowerForChannel:(unsigned long long)arg1;
- (bool)playAlertSoundForType:(int)arg1;
- (void)playbackBufferReceived:(struct MyAudioQueueBuffer { unsigned int x1; void *x2; unsigned int x3; void *x4; unsigned int x5; struct AudioStreamPacketDescription {} *x6; unsigned int x7; }*)arg1;
- (id)playbackDelegate;
- (id)playbackSettings;
- (float)playbackVolume;
- (bool)preparePlaybackFromURL:(id)arg1 error:(id*)arg2;
- (bool)preparePlaybackWithSettings:(id)arg1 error:(id*)arg2;
- (bool)prepareRecordWithSettings:(id)arg1 error:(id*)arg2;
- (void)prewarmAudioSession;
- (void)recordBufferReceived:(struct MyAudioQueueBuffer { unsigned int x1; void *x2; unsigned int x3; void *x4; unsigned int x5; struct AudioStreamPacketDescription {} *x6; unsigned int x7; }*)arg1;
- (id)recordDelegate;
- (double)recordEndWaitTime;
- (int)recordEndpointMode;
- (double)recordInterspeechWaitTime;
- (id)recordRoute;
- (id)recordSettings;
- (double)recordStartWaitTime;
- (void)releaseAudioSession;
- (void)releaseAudioSession:(unsigned long long)arg1;
- (void)removeSessionNotifications;
- (bool)setAlertSoundFromURL:(id)arg1 forType:(int)arg2;
- (void)setAlertVolume:(float)arg1;
- (void)setBargeInDetectEnabled:(bool)arg1;
- (bool)setCurrentContext:(id)arg1 error:(id*)arg2;
- (void)setEndpointerDelegate:(id)arg1;
- (void)setMeteringEnabled:(bool)arg1;
- (bool)setPlaybackBufferDuration:(double)arg1;
- (void)setPlaybackDelegate:(id)arg1;
- (void)setPlaybackVolume:(float)arg1;
- (bool)setRecordBufferDuration:(double)arg1;
- (void)setRecordDelegate:(id)arg1;
- (void)setRecordEndWaitTime:(double)arg1;
- (void)setRecordEndpointMode:(int)arg1;
- (void)setRecordInterspeechWaitTime:(double)arg1;
- (void)setRecordStartWaitTime:(double)arg1;
- (void)setSessionNotifications;
- (void)setStopOnBargeInEnabled:(bool)arg1;
- (void)setStopOnEndpointEnabled:(bool)arg1;
- (void)setSynchronousCallbackEnabled:(bool)arg1;
- (bool)startPlaying;
- (bool)startRecording;
- (bool)startRecording:(id*)arg1;
- (void)startpointDetected;
- (void)stopPlaying;
- (void)stopRecording;
- (void)updateMeters;
- (id)voiceTriggerInfo;
- (bool)willAcceptContext:(id)arg1;

@end
