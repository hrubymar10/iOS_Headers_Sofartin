/* Generated by RuntimeBrowser
   Image: /usr/lib/libAXSpeechManager.dylib
 */

@interface AXSpeechAction : NSObject {
    bool _cannotInterrupt;
    id _completionCallback;
    NSMutableArray *_emojiRangeReplacements;
    NSString *_language;
    id _onPauseCallback;
    id _onResumeCallback;
    id _onSpeechStartCallback;
    id _onWillSpeakRangeCallback;
    double _pitch;
    NSString *_processedString;
    bool _shouldDetectLanguage;
    bool _shouldPrecomposeString;
    bool _shouldProcessEmoji;
    bool _shouldProcessEmoticons;
    bool _shouldQueue;
    double _speakingRate;
    TTSSpeechRequest *_speechRequest;
    NSString *_string;
    bool _useCompactVoice;
    NSString *_voiceIdentifier;
    double _volume;
    long long _wordCallbackPostProcessedOffset;
}

@property (nonatomic) bool cannotInterrupt;
@property (nonatomic, copy) id completionCallback;
@property (nonatomic, retain) NSMutableArray *emojiRangeReplacements;
@property (nonatomic, retain) NSString *language;
@property (nonatomic, copy) id onPauseCallback;
@property (nonatomic, copy) id onResumeCallback;
@property (nonatomic, copy) id onSpeechStartCallback;
@property (nonatomic, copy) id onWillSpeakRangeCallback;
@property (nonatomic) double pitch;
@property (nonatomic, retain) NSString *processedString;
@property (nonatomic) bool shouldDetectLanguage;
@property (nonatomic) bool shouldPrecomposeString;
@property (nonatomic) bool shouldProcessEmoji;
@property (nonatomic) bool shouldProcessEmoticons;
@property (nonatomic) bool shouldQueue;
@property (nonatomic) double speakingRate;
@property (nonatomic, retain) TTSSpeechRequest *speechRequest;
@property (nonatomic, copy) NSString *string;
@property (nonatomic) bool useCompactVoice;
@property (nonatomic, retain) NSString *voiceIdentifier;
@property (nonatomic) double volume;
@property (nonatomic) long long wordCallbackPostProcessedOffset;

+ (id)actionWithString:(id)arg1 shouldQueue:(bool)arg2;

- (id)_detectLanguageFromContent;
- (bool)cannotInterrupt;
- (id)completionCallback;
- (void)dealloc;
- (id)description;
- (id)emojiRangeReplacements;
- (id)init;
- (id)language;
- (id)onPauseCallback;
- (id)onResumeCallback;
- (id)onSpeechStartCallback;
- (id)onWillSpeakRangeCallback;
- (double)pitch;
- (void)preprocessAction;
- (id)processedString;
- (void)setCannotInterrupt:(bool)arg1;
- (void)setCompletionCallback:(id)arg1;
- (void)setEmojiRangeReplacements:(id)arg1;
- (void)setLanguage:(id)arg1;
- (void)setOnPauseCallback:(id)arg1;
- (void)setOnResumeCallback:(id)arg1;
- (void)setOnSpeechStartCallback:(id)arg1;
- (void)setOnWillSpeakRangeCallback:(id)arg1;
- (void)setPitch:(double)arg1;
- (void)setProcessedString:(id)arg1;
- (void)setShouldDetectLanguage:(bool)arg1;
- (void)setShouldPrecomposeString:(bool)arg1;
- (void)setShouldProcessEmoji:(bool)arg1;
- (void)setShouldProcessEmoticons:(bool)arg1;
- (void)setShouldQueue:(bool)arg1;
- (void)setSpeakingRate:(double)arg1;
- (void)setSpeechRequest:(id)arg1;
- (void)setString:(id)arg1;
- (void)setUseCompactVoice:(bool)arg1;
- (void)setVoiceIdentifier:(id)arg1;
- (void)setVolume:(double)arg1;
- (void)setWordCallbackPostProcessedOffset:(long long)arg1;
- (bool)shouldDetectLanguage;
- (bool)shouldPrecomposeString;
- (bool)shouldProcessEmoji;
- (bool)shouldProcessEmoticons;
- (bool)shouldQueue;
- (double)speakingRate;
- (id)speechRequest;
- (id)string;
- (bool)useCompactVoice;
- (id)voiceIdentifier;
- (double)volume;
- (long long)wordCallbackPostProcessedOffset;

@end
