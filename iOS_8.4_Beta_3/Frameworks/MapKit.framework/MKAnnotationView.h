/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MapKit.framework/MapKit
 */

@interface MKAnnotationView : UIView <MKAnnotationRepresentation, MKLocatableObject> {
    _MKAnnotationViewAnchor *_anchor;
    bool _animatingToCoordinate;
    <MKAnnotation> *_annotation;
    MKAnnotationManager *_annotationManager;
    id _calloutHitTest;
    struct CGPoint { 
        double x; 
        double y; 
    } _calloutOffset;
    UICalloutView *_calloutView;
    struct CGPoint { 
        double x; 
        double y; 
    } _centerOffset;
    bool _customTransformApplied;
    UIView *_detailCalloutAccessoryView;
    unsigned long long _dragState;
    bool _explicitlyHidden;
    struct { 
        unsigned int disabled : 1; 
        unsigned int selected : 1; 
        unsigned int canShowCallout : 1; 
        unsigned int isHighlighted : 1; 
        unsigned int canDisplayDisclosureInCallout : 1; 
        unsigned int canDisplayPlacemarkInCallout : 1; 
        unsigned int draggable : 1; 
    } _flags;
    bool _hiddenForInvalidPoint;
    bool _hiddenForOffscreen;
    UIImage *_image;
    bool _internalTransformApplied;
    UIView *_leftCalloutAccessoryView;
    struct CGPoint { 
        double x; 
        double y; 
    } _leftCalloutOffset;
    unsigned long long _mapDisplayStyle;
    double _mapPitchRadians;
    double _mapRotationRadians;
    unsigned long long _mapType;
    struct { 
        double latitude; 
        double longitude; 
    } _presentationCoordinate;
    id _presentationCoordinateChangedCallback;
    double _presentationCourse;
    NSString *_reuseIdentifier;
    UIView *_rightCalloutAccessoryView;
    struct CGPoint { 
        double x; 
        double y; 
    } _rightCalloutOffset;
    double _rotationRadians;
    GEORouteMatch *_routeMatch;
    bool _tracking;
    MKUserLocationAnnotationViewProxy *_userLocationProxy;
    unsigned long long _zIndex;
}

@property(getter=_isAnimatingToCoordinate,setter=_setAnimatingToCoordinate:,assign,readwrite) bool _animatingToCoordinate;
@property(setter=_setAnnotationManager:,assign,readwrite) MKAnnotationManager * _annotationManager;
@property(assign,copy) id _calloutHitTest;
@property(setter=_setPresentationCoordinate:,assign,readwrite) struct { double x1; double x2; } _presentationCoordinate;
@property(setter=_setPresentationCoordinateChangedCallback:,assign,copy) id _presentationCoordinateChangedCallback;
@property(setter=_setPresentationCourse:,assign,readwrite) double _presentationCourse;
@property(setter=_setRouteMatch:,assign,retain) GEORouteMatch * _routeMatch;
@property(assign,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } _significantFrame;
@property(getter=_isTracking,setter=_setTracking:,assign,readwrite) bool _tracking;
@property(assign,readonly) MKUserLocationAnnotationViewProxy * _userLocationProxy;
@property(assign,readonly) VKAnchorWrapper * anchor;
@property(assign,retain) <MKAnnotation> * annotation;
@property(assign,readwrite) struct CGPoint { double x1; double x2; } calloutOffset;
@property(assign,readwrite) bool canShowCallout;
@property(assign,readwrite) struct CGPoint { double x1; double x2; } centerOffset;
@property(assign,readonly) struct { double x1; double x2; } coordinate;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,retain) UIView * detailCalloutAccessoryView;
@property(assign,readwrite) unsigned long long dragState;
@property(getter=isDraggable,assign,readwrite) bool draggable;
@property(getter=isEnabled,assign,readwrite) bool enabled;
@property(assign,readonly) unsigned long long hash;
@property(getter=_isHiddenForInvalidPoint,setter=_setHiddenForInvalidPoint:,assign,readwrite) bool hiddenForInvalidPoint;
@property(getter=isHighlighted,assign,readwrite) bool highlighted;
@property(assign,retain) UIImage * image;
@property(assign,retain) UIView * leftCalloutAccessoryView;
@property(assign,readwrite) struct CGPoint { double x1; double x2; } leftCalloutOffset;
@property(getter=_mapDisplayStyle,setter=_setMapDisplayStyle:,assign,readwrite) unsigned long long mapDisplayStyle;
@property(getter=_mapPitchRadians,setter=_setMapPitchRadians:,assign,readwrite) double mapPitchRadians;
@property(getter=_mapRotationRadians,setter=_setMapRotationRadians:,assign,readwrite) double mapRotationRadians;
@property(assign,readonly) NSString * reuseIdentifier;
@property(assign,retain) UIView * rightCalloutAccessoryView;
@property(assign,readwrite) struct CGPoint { double x1; double x2; } rightCalloutOffset;
@property(getter=isSelected,assign,readwrite) bool selected;
@property(getter=_significantBounds,assign,readonly) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } significantBounds;
@property(assign,readonly) Class superclass;

+ (id)_disclosureCalloutButton;
+ (bool)_followsTerrain;
+ (unsigned long long)_selectedZIndex;
+ (unsigned long long)_zIndex;
+ (bool)automaticallyNotifiesObserversForKey:(id)arg1;
+ (id)currentLocationTitle;
+ (id)droppedPinTitle;

- (void).cxx_destruct;
- (id)_annotationContainer;
- (id)_annotationManager;
- (id)_calloutHitTest;
- (id)_calloutView;
- (bool)_canChangeOrientation;
- (bool)_canDisplayDisclosureInCallout;
- (bool)_canDisplayPlacemarkInCallout;
- (id)_containerView;
- (id)_contentLayer;
- (void)_didUpdatePosition;
- (struct CGPoint { double x1; double x2; })_draggingDropOffset;
- (void)_enableRotationForHeadingMode:(double)arg1;
- (bool)_hasAlternateOrientation;
- (bool)_isAnimatingToCoordinate;
- (bool)_isHiddenForInvalidPoint;
- (bool)_isTracking;
- (unsigned long long)_mapDisplayStyle;
- (double)_mapPitchRadians;
- (double)_mapRotationRadians;
- (unsigned long long)_mapType;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_mapkit_visibleRect;
- (unsigned long long)_orientationCount;
- (double)_pointsForDistance:(double)arg1;
- (struct { double x1; double x2; })_presentationCoordinate;
- (id)_presentationCoordinateChangedCallback;
- (double)_presentationCourse;
- (void)_resetZIndex;
- (void)_resetZIndexNotify:(bool)arg1;
- (id)_routeMatch;
- (void)_setAnimatingToCoordinate:(bool)arg1;
- (void)_setAnnotationManager:(id)arg1;
- (void)_setCalloutView:(id)arg1;
- (void)_setCanDisplayDisclosureInCallout:(bool)arg1;
- (void)_setCanDisplayPlacemarkInCallout:(bool)arg1;
- (void)_setHiddenForInvalidPoint:(bool)arg1;
- (void)_setHiddenForOffscreen:(bool)arg1;
- (void)_setMapDisplayStyle:(unsigned long long)arg1;
- (void)_setMapPitchRadians:(double)arg1;
- (void)_setMapRotationRadians:(double)arg1;
- (void)_setMapType:(unsigned long long)arg1;
- (void)_setPresentationCoordinate:(struct { double x1; double x2; })arg1;
- (void)_setPresentationCoordinateChangedCallback:(id)arg1;
- (void)_setPresentationCourse:(double)arg1;
- (void)_setRotationRadians:(double)arg1 withAnimation:(id)arg2;
- (void)_setRouteMatch:(id)arg1;
- (void)_setTracking:(bool)arg1;
- (void)_setZIndex:(unsigned long long)arg1;
- (void)_setZIndex:(unsigned long long)arg1 notify:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_significantBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_significantFrame;
- (void)_transitionFrom:(long long)arg1 to:(long long)arg2 duration:(double)arg3;
- (void)_updateFromMap;
- (id)_userLocationProxy;
- (void)_userTrackingModeDidChange:(id)arg1;
- (id)_vkMarker;
- (unsigned long long)_zIndex;
- (id)anchor;
- (id)annotation;
- (struct CGPoint { double x1; double x2; })calloutOffset;
- (bool)canShowCallout;
- (struct CGPoint { double x1; double x2; })centerOffset;
- (struct { double x1; double x2; })coordinate;
- (void)dealloc;
- (id)detailCalloutAccessoryView;
- (unsigned long long)dragState;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (struct UIImage { Class x1; void *x2; double x3; struct { unsigned int x_4_1_1 : 1; unsigned int x_4_1_2 : 3; unsigned int x_4_1_3 : 1; unsigned int x_4_1_4 : 1; unsigned int x_4_1_5 : 1; unsigned int x_4_1_6 : 2; unsigned int x_4_1_7 : 1; unsigned int x_4_1_8 : 1; } x4; }*)image;
- (id)initWithAnnotation:(id)arg1 reuseIdentifier:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)isDraggable;
- (bool)isEnabled;
- (bool)isHighlighted;
- (bool)isPersistent;
- (bool)isSelected;
- (void)layoutSubviews;
- (id)leftCalloutAccessoryView;
- (struct CGPoint { double x1; double x2; })leftCalloutOffset;
- (void)prepareForReuse;
- (id)reuseIdentifier;
- (id)rightCalloutAccessoryView;
- (struct CGPoint { double x1; double x2; })rightCalloutOffset;
- (void)setAnnotation:(id)arg1;
- (void)setCalloutOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setCanShowCallout:(bool)arg1;
- (void)setCenterOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setDetailCalloutAccessoryView:(id)arg1;
- (void)setDragState:(unsigned long long)arg1;
- (void)setDragState:(unsigned long long)arg1 animated:(bool)arg2;
- (void)setDraggable:(bool)arg1;
- (void)setEnabled:(bool)arg1;
- (void)setHidden:(bool)arg1;
- (void)setHighlighted:(bool)arg1;
- (void)setImage:(struct UIImage { Class x1; void *x2; double x3; struct { unsigned int x_4_1_1 : 1; unsigned int x_4_1_2 : 3; unsigned int x_4_1_3 : 1; unsigned int x_4_1_4 : 1; unsigned int x_4_1_5 : 1; unsigned int x_4_1_6 : 2; unsigned int x_4_1_7 : 1; unsigned int x_4_1_8 : 1; } x4; }*)arg1;
- (void)setLeftCalloutAccessoryView:(id)arg1;
- (void)setLeftCalloutOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setRightCalloutAccessoryView:(id)arg1;
- (void)setRightCalloutOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setSelected:(bool)arg1;
- (void)setSelected:(bool)arg1 animated:(bool)arg2;
- (void)set_calloutHitTest:(id)arg1;

@end
