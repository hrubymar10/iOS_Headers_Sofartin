/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MapKit.framework/MapKit
 */

@interface MKMapGestureController : NSObject <MKVariableDelayTapRecognizerDelegate, UIGestureRecognizerDelegate, _MKUserInteractionGestureRecognizerTouchObserver> {
    <MKMapGestureControllerDelegate> *_delegate;
    bool _didStartLongPress;
    MKVariableDelayTapRecognizer *_doubleTapGestureRecognizer;
    long long _gestureCount;
    double _lastScale;
    MKBasicMapView *_mapView;
    _UIDynamicAnimationGroup *_panDecelerationAnimationGroup;
    UIPanGestureRecognizer *_panGestureRecognizer;
    bool _panWithMomentum;
    _UIDynamicValueAnimation *_pinchDecelerationAnimation;
    UIPinchGestureRecognizer *_pinchGestureRecognizer;
    _UIDynamicValueAnimation *_rotationDecelerationAnimation;
    UIRotationGestureRecognizer *_rotationGestureRecognizer;
    _UIDynamicValueAnimation *_tiltDecelerationAnimation;
    MKTiltGestureRecognizer *_tiltGestureRecognizer;
    _MKUserInteractionGestureRecognizer *_touchGestureRecognizer;
    UILongPressGestureRecognizer *_twoFingerLongPressGestureRecognizer;
    UITapGestureRecognizer *_twoFingerTapGestureRecognizer;
}

@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <MKMapGestureControllerDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,readonly) UITapGestureRecognizer * doubleTapGestureRecognizer;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) MKBasicMapView * mapView;
@property(assign,readonly) UIPanGestureRecognizer * panGestureRecognizer;
@property(assign,readwrite) bool panWithMomentum;
@property(assign,readonly) UIPinchGestureRecognizer * pinchGestureRecognizer;
@property(getter=isRotationEnabled,assign,readwrite) bool rotationEnabled;
@property(getter=isScrollEnabled,assign,readwrite) bool scrollEnabled;
@property(assign,readonly) Class superclass;
@property(getter=isTiltEnabled,assign,readwrite) bool tiltEnabled;
@property(assign,readonly) UILongPressGestureRecognizer * twoFingerLongPressGestureRecognizer;
@property(assign,readonly) UITapGestureRecognizer * twoFingerTapGestureRecognizer;
@property(getter=isZoomEnabled,assign,readwrite) bool zoomEnabled;

- (void).cxx_destruct;
- (void)_clearGesture:(id)arg1;
- (struct CGPoint { double x1; double x2; })_snapPointToDevicePixels:(struct CGPoint { double x1; double x2; })arg1;
- (void)beginGesturing;
- (void)clearGestureRecognizersInFlight;
- (void)dealloc;
- (id)delegate;
- (id)doubleTapGestureRecognizer;
- (void)endGesturing;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)gestureRecognizerTouchesBegan:(id)arg1;
- (void)gestureRecognizerTouchesCanceled:(id)arg1;
- (void)gestureRecognizerTouchesEnded:(id)arg1;
- (void)handleDoubleTap:(id)arg1;
- (void)handlePan:(id)arg1;
- (void)handlePinch:(id)arg1;
- (void)handleRotation:(id)arg1;
- (void)handleTilt:(id)arg1;
- (void)handleTouch:(id)arg1;
- (void)handleTwoFingerLongPress:(id)arg1;
- (void)handleTwoFingerTap:(id)arg1;
- (id)initWithMapView:(id)arg1 gestureTargetView:(id)arg2;
- (id)initWithMapView:(id)arg1 gestureTargetView:(id)arg2 doubleTapTargetView:(id)arg3;
- (bool)isRotationEnabled;
- (bool)isScrollEnabled;
- (bool)isTiltEnabled;
- (bool)isZoomEnabled;
- (id)mapView;
- (id)panGestureRecognizer;
- (bool)panWithMomentum;
- (id)pinchGestureRecognizer;
- (void)setDelegate:(id)arg1;
- (void)setPanWithMomentum:(bool)arg1;
- (void)setRotationEnabled:(bool)arg1;
- (void)setScrollEnabled:(bool)arg1;
- (void)setTiltEnabled:(bool)arg1;
- (void)setZoomEnabled:(bool)arg1;
- (void)startUserInteractionFromExternalGesture;
- (void)stopDynamicAnimations;
- (void)stopUserInteractionFromExternalGesture;
- (id)twoFingerLongPressGestureRecognizer;
- (id)twoFingerTapGestureRecognizer;
- (double)variableDelayTapRecognizer:(id)arg1 shouldWaitForNextTapForDuration:(double)arg2 afterTouch:(id)arg3;

@end
