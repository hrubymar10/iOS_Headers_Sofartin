/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UIWebDocumentView : UIWebTiledView <DDDetectionControllerInteractionDelegate, UIAutoscrollContainer, UIGestureRecognizerDelegate, UIKeyInput, UIKeyboardInput, UIModalViewDelegate, UITextAutoscrolling, UITextInputPrivate, UITextInputTokenizer, UIWebFileUploadPanelDelegate, _UIRotatingAlertControllerDelegate, _UIWebDoubleTapDelegate> {
    NSArray *_additionalSubviews;
    unsigned int _autoresizes;
    UIAutoscroll *_autoscroll;
    unsigned int _avoidFixedPositionUpdateViaDidScroll;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _caretInsets;
    CALayer *_contentLayersHostingLayer;
    unsigned long long _dataDetectorTypes;
    struct _UIWebViewportConfiguration { 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
        float initialScale; 
        float minimumScale; 
        float maximumScale; 
        bool allowsUserScaling; 
    } _defaultViewportConfigurations;
    _UITextServiceSession *_definitionSession;
    id _delegate;
    DOMElement *_dictationResultPlaceholder;
    id _dictationResultPlaceholderRemovalObserver;
    unsigned int _didFirstVisuallyNonEmptyLayout;
    float _documentScale;
    int _documentType;
    UITapGestureRecognizer *_doubleTapGestureRecognizer;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _doubleTapRect;
    unsigned int _doubleTapRectIsReplaced;
    struct CGPoint { 
        double x; 
        double y; 
    } _doubleTapStartPosition;
    double _doubleTapStartTime;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _exposedScrollViewRect;
    UIWebFileUploadPanel *_fileUploadPanel;
    struct CGSize { 
        double width; 
        double height; 
    } _fixedLayoutOriginRoundingDelta;
    struct CGSize { 
        double width; 
        double height; 
    } _fixedLayoutSizeRoundingDelta;
    CALayer *_flattenedRotatingContentLayer;
    unsigned int _geolocationDialogAllowed;
    unsigned int _gesturesDisabled;
    unsigned int _hasCustomScale;
    unsigned int _hasDrawnTiles;
    unsigned int _hasScrollPoint;
    _UIWebHighlightLongPressGestureRecognizer *_highlightLongPressGestureRecognizer;
    unsigned int _ignoresFocusEventFromFirstResponderChange;
    unsigned int _ignoresFocusingMouse;
    unsigned int _ignoresKeyEvents;
    unsigned int _ignoresViewportOverflowWhenAutoresizing;
    <UITextInputDelegate> *_inputDelegate;
    unsigned int _inspectorSearchingForNode;
    struct { 
        NSTimer *timer; 
        struct CGPoint { 
            double x; 
            double y; 
        } location; 
        bool isBlocked; 
        bool isCancelled; 
        bool isOnWebThread; 
        bool isDisplayingHighlight; 
        bool attemptedClick; 
        struct CGPoint { 
            double x; 
            double y; 
        } lastPanTranslation; 
        DOMNode *element; 
        id delegate; 
        UIWebRotatingAlertController *interactionSheet; 
        bool allowsImageSheet; 
        bool allowsDataDetectorsSheet; 
        bool allowsLinkSheet; 
        bool acceptsFirstResponder; 
        double documentScale; 
    } _interaction;
    unsigned int _isSettingRedrawFrame;
    unsigned int _isShowingFullScreenPlugIn;
    WebHistoryItem *_latestCommittedPageLoadHistoryItem;
    _UITextServiceSession *_learnSession;
    unsigned int _loadInProgress;
    unsigned int _loadsSynchronously;
    UILongPressGestureRecognizer *_longPressGestureRecognizer;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _mainDocumentDoubleTapRect;
    unsigned int _mouseDown;
    unsigned int _mouseDownCount;
    struct CGPoint { 
        double x; 
        double y; 
    } _mouseDownPoint;
    double _mouseDownTime;
    unsigned int _mouseDragged;
    unsigned int _mouseReentrancyGuard;
    unsigned int _needsScrollNotifications;
    long long _orientation;
    unsigned int _pageIsLoadedFromPageCache;
    unsigned int _pageNeedsReset;
    struct CGSize { 
        double width; 
        double height; 
    } _pendingSize;
    UIWebPlaybackTargetPicker *_playbackTargetPicker;
    struct __CFDictionary { } *_plugInViews;
    float _previousDocumentScale;
    unsigned int _previousScrollWasScrollToTop;
    DOMRange *_rangeToRestoreAfterDictation;
    unsigned long long _renderTreeSize;
    unsigned long long _renderTreeSizeThresholdForReset;
    unsigned int _scalesToFit;
    struct CGPoint { 
        double x; 
        double y; 
    } _scrollPoint;
    int _selectionAffinity;
    unsigned int _sheetsCount;
    unsigned int _shouldCloseWebViewAtDealloc;
    unsigned int _shouldIgnoreCustomViewport;
    unsigned int _shouldOnlyRecognizeGesturesOnActiveElements;
    unsigned int _shouldRemoveUserStyleSheet;
    unsigned int _shouldRestoreScrollPosition;
    unsigned int _shouldSendWillShowInteractionHighlight;
    unsigned int _showingTextStyleOptions;
    UITapGestureRecognizer *_singleTapGestureRecognizer;
    unsigned int _sizeUpdateOccurredWhileSuspended;
    unsigned int _sizeUpdatesSuspended;
    unsigned int _standaloneEditableView;
    DOMHTMLElement *_standaloneEditingElement;
    unsigned int _subviewCachesNeedUpdate;
    bool _suppressesIncrementalRendering;
    UITextChecker *_textChecker;
    UITextInteractionAssistant *_textSelectionAssistant;
    id _textSuggestionDelegate;
    UITextInputTraits *_traits;
    UITapGestureRecognizer *_twoFingerDoubleTapGestureRecognizer;
    UIPanGestureRecognizer *_twoFingerPanGestureRecognizer;
    unsigned int _uiwdvIsResigningFirstResponder;
    WebThreadSafeUndoManager *_undoManager;
    unsigned int _updatesScrollView;
    unsigned int _updatingSize;
    unsigned int _usePreTimberlineTransparencyBehavior;
    unsigned int _usingMinimalTilesDuringLoading;
    _UIWebViewportHandler *_viewportHandler;
    bool _wantsMinimalUI;
    unsigned int _webCoreNeedsDraw;
    unsigned int _webCoreNeedsSetNeedsDisplay;
    UIWebSelectionAssistant *_webSelectionAssistant;
    WebView *_webView;
    unsigned int _widgetEditingView;
    id m_parentTextView;
    long long m_selectionGranularity;
}

@property(getter=_acceptsFirstResponder,setter=_setAcceptsFirstResponder:,assign,readwrite) bool _acceptsFirstResponder;
@property(assign,readwrite) bool acceptsEmoji;
@property(assign,readwrite) bool acceptsFloatingKeyboard;
@property(assign,readwrite) bool acceptsSplitKeyboard;
@property(assign,readwrite) long long autocapitalizationType;
@property(assign,copy) NSString * autocorrectionContext;
@property(assign,readwrite) long long autocorrectionType;
@property(assign,readwrite) struct CGPoint { double x1; double x2; } autoscrollContentOffset;
@property(assign,readonly) UITextPosition * beginningOfDocument;
@property(assign,readwrite) bool contentsIsSingleValue;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) bool deferBecomingResponder;
@property(assign,copy) NSString * description;
@property(assign,copy) NSString * description;
@property(assign,readwrite) bool disablePrediction;
@property(assign,readwrite) bool displaySecureTextUsingPlainText;
@property(getter=isDoubleTapEnabled,assign,readwrite) bool doubleTapEnabled;
@property(assign,readwrite) int emptyContentReturnKeyType;
@property(assign,readwrite) bool enablesReturnKeyAutomatically;
@property(assign,readwrite) bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(assign,readonly) UITextPosition * endOfDocument;
@property(assign,readwrite) struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; } exposedScrollViewRect;
@property(assign,readwrite) bool forceEnableDictation;
@property(assign,readonly) unsigned long long hash;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) <UITextInputDelegate> * inputDelegate;
@property(assign,retain) UIColor * insertionPointColor;
@property(assign,readwrite) unsigned long long insertionPointWidth;
@property(assign,readonly) UITextInteractionAssistant * interactionAssistant;
@property(assign,readwrite) bool isSingleLineDocument;
@property(assign,readwrite) long long keyboardAppearance;
@property(assign,readwrite) long long keyboardType;
@property(assign,readwrite) bool learnsCorrections;
@property(assign,readonly) UITextRange * markedTextRange;
@property(assign,copy) NSDictionary * markedTextStyle;
@property(assign,readwrite) bool mediaPlaybackAllowsAirPlay;
@property(assign,retain) DOMRange * rangeToRestoreAfterDictation;
@property(assign,readonly) unsigned long long renderTreeSize;
@property(assign,readwrite) unsigned long long renderTreeSizeThresholdForReset;
@property(assign,copy) NSString * responseContext;
@property(assign,readwrite) bool returnKeyGoesToNextResponder;
@property(assign,readwrite) long long returnKeyType;
@property(getter=isSecureTextEntry,assign,readwrite) bool secureTextEntry;
@property(assign,copy) UITextRange * selectedTextRange;
@property(assign,readwrite) long long selectionAffinity;
@property(assign,retain) UIColor * selectionBarColor;
@property(assign,retain) UIImage * selectionDragDotImage;
@property(assign,readwrite) long long selectionGranularity;
@property(assign,retain) UIColor * selectionHighlightColor;
@property(assign,readonly) int selectionState;
@property(assign,readwrite) int shortcutConversionType;
@property(assign,readwrite) bool shouldIgnoreCustomViewport;
@property(assign,readwrite) bool shouldOnlyRecognizeGesturesOnActiveElements;
@property(assign,readwrite) bool sizeUpdatesSuspended;
@property(assign,readwrite) long long spellCheckingType;
@property(assign,readonly) Class superclass;
@property(assign,readonly) Class superclass;
@property(assign,readwrite) bool suppressReturnKeyStyling;
@property(assign,readwrite) bool suppressesIncrementalRendering;
@property(assign,readonly) UIView * textInputView;
@property(assign,readwrite) int textLoupeVisibility;
@property(assign,readwrite) int textSelectionBehavior;
@property(assign,readwrite) id textSuggestionDelegate;
@property(assign,readwrite) struct __CFCharacterSet { }* textTrimmingSet;
@property(assign,readonly) <UITextInputTokenizer> * tokenizer;
@property(assign,readwrite) bool useInterfaceLanguageForLocalization;
@property(assign,readonly) bool wantsMinimalUI;

+ (id)_createDefaultHighlightView;
+ (id)_sharedHighlightView;
+ (double)getTimestamp;
+ (bool)hasLandscapeOrientation;
+ (void)initialize;
+ (Class)layerClass;
+ (id)standardTextViewPreferences;

- (id)URL;
- (void)_WAKViewSizeDidChange:(id)arg1;
- (bool)_acceptsFirstResponder;
- (SEL)_actionForLongPressOnElement:(id)arg1;
- (void)_addShortcut:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_adjustedLayoutRectForFixedPositionObjects;
- (void)_applyViewportArguments:(id)arg1;
- (id)_beginPrintModeForHTMLView:(id)arg1 withSize:(struct CGSize { double x1; double x2; })arg2 startOffset:(double)arg3 minimumLayoutWidth:(double)arg4 maximumLayoutWidth:(double)arg5 tileClippedContent:(bool)arg6;
- (id)_beginPrintModeForPDFView:(id)arg1 withSize:(struct CGSize { double x1; double x2; })arg2 startOffset:(double)arg3 minimumLayoutWidth:(double)arg4 maximumLayoutWidth:(double)arg5;
- (void)_cancelLongPressGestureRecognizer;
- (void)_cleanUpFrameStateAndLoad:(id)arg1;
- (void)_cleanupSheet;
- (void)_clearAllConsoleMessages;
- (void)_clearDoubleTapRect;
- (id)_collectAdditionalSubviews;
- (unsigned int)_contentSizeInExposedRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 topLayer:(id)arg2 visibleLayerCount:(int*)arg3;
- (void*)_createIOSurfaceFromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)_createSheetWithElementActions:(id)arg1 showLinkTitle:(bool)arg2;
- (bool)_dataDetectionIsActivated;
- (void)_define:(id)arg1;
- (bool)_dictationPlaceholderHasBeenRemoved;
- (void)_didDismissElementSheet;
- (void)_didMoveFromWindow:(id)arg1 toWindow:(id)arg2;
- (void)_didScroll;
- (void)_dismissViewControllerAnimated:(bool)arg1 completion:(id)arg2;
- (float)_documentScale;
- (id)_documentUrl;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_documentViewVisibleRect;
- (id)_doubleTapGestureRecognizer;
- (void)_doubleTapRecognized:(id)arg1;
- (void)_drawPDFPagesForPage:(unsigned long long)arg1 withPaginationInfo:(id)arg2;
- (void)_editableSelectionLayoutChangedByScrolling:(bool)arg1;
- (void)_finishedUsingDictationPlaceholder;
- (void)_flattenAndSwapContentLayersInRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)_focusedOrMainFrame;
- (id)_groupName;
- (void)_handleDoubleTapAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_handleSingleTapZoomPostClickAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_handleSingleTapZoomPreClickAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_handleTwoFingerDoubleTapAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_highlightLongPressRecognized:(id)arg1;
- (void)_insertAttributedTextWithoutClosingTyping:(id)arg1;
- (void)_inspectorDidStartSearchingForNode:(id)arg1;
- (void)_inspectorDidStopSearchingForNode:(id)arg1;
- (bool)_isDisplayingReferenceLibraryViewController;
- (bool)_isDisplayingShortcutViewController;
- (bool)_isInspectorSearchingForNode;
- (bool)_isSubviewOfPlugInView:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_lastRectForRange:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_layoutRectForFixedPositionObjects;
- (void)_longPressRecognized:(id)arg1;
- (void)_notifyContentHostingLayersOfScaleChange;
- (void)_notifyPlugInViewsOfDidEndZooming;
- (void)_notifyPlugInViewsOfDidZoom;
- (void)_notifyPlugInViewsOfScaleChange;
- (void)_notifyPlugInViewsOfWillBeginZooming;
- (id)_parentTextView;
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(bool)arg4;
- (bool)_presentViewController:(id)arg1 animated:(bool)arg2 completion:(id)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_presentationRectForSheetGivenPoint:(struct CGPoint { double x1; double x2; })arg1 inHostView:(id)arg2;
- (Class)_printFormatterClass;
- (void)_promptForReplace:(id)arg1;
- (void)_removeDefinitionController:(bool)arg1;
- (void)_removeShortcutController:(bool)arg1;
- (void)_renderUnbufferedInContext:(struct CGContext { }*)arg1;
- (void)_resetForNewPage;
- (void)_resetFormDataForFrame:(id)arg1;
- (void)_resetInteractionWithLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_resetShowingTextStyle:(id)arg1;
- (void)_reshapePlugInViews;
- (id)_responderForBecomeFirstResponder;
- (void)_restoreFlattenedContentLayers;
- (void)_restoreScrollPointForce:(bool)arg1;
- (void)_restoreViewportSettingsWithSize:(struct CGSize { double x1; double x2; })arg1;
- (void)_runLoadBlock:(id)arg1;
- (void)_saveStateToHistoryItem:(id)arg1;
- (id)_scriptingInfoForForm:(id)arg1;
- (id)_scriptingInfoForLink:(id)arg1;
- (void)_scrollRectToVisible:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 animated:(bool)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_selectionClipRect;
- (void)_selectionLayoutChangedByScrolling:(bool)arg1;
- (void)_sendMouseMoveAndAttemptClick:(id)arg1;
- (void)_setAcceptsFirstResponder:(bool)arg1;
- (void)_setDocumentScale:(float)arg1;
- (void)_setDocumentType:(int)arg1;
- (void)_setDocumentType:(int)arg1 overrideCustomConfigurations:(bool)arg2 viewportArguments:(id)arg3;
- (void)_setFont:(id)arg1;
- (void)_setParentTextView:(id)arg1;
- (void)_setSubviewCachesNeedUpdate:(bool)arg1;
- (void)_setTextColor:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_shortcutPresentationRect;
- (bool)_shouldFlattenContentLayersForRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (bool)_shouldResetForNewPage;
- (bool)_shouldUpdateSubviewCachesForPlugins;
- (void)_showDataDetectorsSheet;
- (void)_showImageSheet;
- (void)_showLinkSheet;
- (void)_showPendingContentLayers;
- (void)_showTextStyleOptions:(id)arg1;
- (void)_singleTapRecognized:(id)arg1;
- (id)_supportedPasteboardTypesForCurrentSelection;
- (void)_syntheticMouseEventNotHandledAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)_targetURL;
- (id)_textSelectingContainer;
- (void)_twoFingerDoubleTapRecognized:(id)arg1;
- (void)_twoFingerPanRecognized:(id)arg1;
- (void)_undoManagerDidRedo:(id)arg1;
- (void)_undoManagerDidUndo:(id)arg1;
- (void)_updateFixedPositionContent;
- (void)_updateFixedPositionedObjectsLayoutRectUsingWebThread:(bool)arg1 synchronize:(bool)arg2;
- (void)_updateFixedPositioningObjectsLayoutAfterScroll;
- (void)_updateFixedPositioningObjectsLayoutAfterVisibleGeometryChange;
- (void)_updateFixedPositioningObjectsLayoutDuringScroll;
- (void)_updateScrollViewBoundaryZoomScales;
- (void)_updateSize;
- (void)_updateSubviewCaches;
- (void)_updateWebKitExposedScrollViewRect;
- (void)_webthread_webView:(id)arg1 attachRootLayer:(id)arg2;
- (double)_zoomedDocumentScale;
- (void)action:(id)arg1 didDismissAlertController:(id)arg2;
- (void)actionDidFinish;
- (void)addInputString:(id)arg1;
- (void)addInputString:(id)arg1 withFlags:(unsigned long long)arg2;
- (id)approximateNodeAtViewportLocation:(struct CGPoint { double x1; double x2; }*)arg1;
- (id)asText;
- (void)assistFormNode:(id)arg1;
- (void)attemptClick:(id)arg1;
- (id)automaticallySelectedOverlay;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })autoscrollContentFrame;
- (struct CGPoint { double x1; double x2; })autoscrollContentOffset;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })autoscrollDragFrame;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (bool)becomeFirstResponder;
- (bool)becomesEditableWithGestures;
- (id)beginPrintModeForFrame:(id)arg1 withSize:(struct CGSize { double x1; double x2; })arg2 startOffset:(double)arg3 minimumLayoutWidth:(double)arg4 maximumLayoutWidth:(double)arg5 tileClippedContent:(bool)arg6;
- (id)beginPrintModeForFrame:(id)arg1 withWidth:(double)arg2 height:(double)arg3 startOffset:(double)arg4 shrinkToFit:(bool)arg5 tileClippedContent:(bool)arg6;
- (id)beginPrintModeWithSize:(struct CGSize { double x1; double x2; })arg1 startOffset:(double)arg2 minimumLayoutWidth:(double)arg3 maximumLayoutWidth:(double)arg4 tileClippedContent:(bool)arg5;
- (id)beginPrintModeWithWidth:(double)arg1 height:(double)arg2 startOffset:(double)arg3 shrinkToFit:(bool)arg4;
- (id)beginPrintModeWithWidth:(double)arg1 height:(double)arg2 startOffset:(double)arg3 shrinkToFit:(bool)arg4 tileClippedContent:(bool)arg5;
- (void)beginSelectionChange;
- (id)beginningOfDocument;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (bool)canResignFirstResponder;
- (void)cancelAutoscroll;
- (void)cancelInteraction;
- (void)cancelInteractionWithImmediateDisplay:(bool)arg1;
- (bool)cancelMouseTracking;
- (bool)cancelTouchTracking;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })caretInsets;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForVisiblePosition:(id)arg1;
- (unsigned short)characterAfterCaretSelection;
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (id)checkSpellingOfString:(id)arg1;
- (void)clearInteractionTimer;
- (void)clearMarkedText;
- (void)clearRangedSelectionInitialExtent;
- (void)clearSelection;
- (bool)clearWKFirstResponder;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })closestCaretRectInMarkedTextRangeForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (void)collapseSelection;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (void)completeInteraction;
- (void)confirmMarkedText:(id)arg1;
- (bool)considerHeightForDoubleTap;
- (struct CGPoint { double x1; double x2; })constrainedPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)containsOnlySelectableElements;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })contentFrameForView:(id)arg1;
- (id)contentView;
- (void)continueInteractionWithLocation:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertCaretRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromFrame:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toFrame:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPointToSelectedFrameCoordinates:(struct CGPoint { double x1; double x2; })arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 fromFrame:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 toFrame:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })convertRectFromSelectedFrameCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)copy:(id)arg1;
- (struct CGImage { }*)createSnapshotWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (double)currentDocumentScale;
- (void)cut:(id)arg1;
- (unsigned long long)dataDetectorTypes;
- (void)dealloc;
- (void)decreaseSize:(id)arg1;
- (id)deepestNodeAtViewportLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)deferInteraction;
- (void)deferredBecomeFirstResponder;
- (id)delegate;
- (void)deleteBackward;
- (void)deleteFromInput;
- (void)deleteFromInputWithFlags:(unsigned long long)arg1;
- (bool)detectsPhoneNumbers;
- (int)deviceOrientation;
- (id)dictationInterpretations;
- (id)dictationResultMetadataForRange:(id)arg1;
- (void)didEndScroll;
- (void)didEndZoom;
- (bool)didFirstVisuallyNonEmptyLayout;
- (void)didMoveToSuperview;
- (void)didRemovePlugInView:(id)arg1;
- (void)didRotateInteractionSheet;
- (void)didZoom;
- (void)disableClearsOnInsertion;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })documentBounds;
- (int)documentType;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })doubleTapRect;
- (bool)doubleTapRectIsReplaced;
- (struct { double x1; double x2; double x3; })doubleTapScalesForSize:(struct CGSize { double x1; double x2; })arg1;
- (void)drawPage:(unsigned long long)arg1 withPaginationInfo:(id)arg2;
- (unsigned long long)effectiveDataDetectorTypes;
- (id)enclosingScrollView;
- (id)endOfDocument;
- (void)endPrintMode;
- (void)endSelectionChange;
- (void)ensureSelection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })exposedScrollViewRect;
- (void)extendCurrentSelection:(int)arg1;
- (void)fileUploadPanelDidDismiss:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (id)fontForCaretSelection;
- (void)forceLayout;
- (id)formElement;
- (void)forwardInvocation:(id)arg1;
- (bool)fragmentContainsRichContent:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })frameForDictationResultPlaceholder:(id)arg1;
- (bool)gestureRecognizer:(id)arg1 canBePreventedByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 canPreventGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (long long)getPasteboardChangeCount;
- (long long)getPasteboardItemsCount;
- (void)handleKeyWebEvent:(id)arg1;
- (bool)hasContent;
- (bool)hasDrawnTiles;
- (bool)hasEditableSelection;
- (bool)hasMarkedText;
- (bool)hasPlugInSubviews;
- (bool)hasRangedSelection;
- (bool)hasRichlyEditableSelection;
- (bool)hasSelection;
- (bool)hasSimpleTextOnlyStructure;
- (bool)hasText;
- (void)hideTapHighlight;
- (void)highlightApproximateNodeAndDisplayInfoSheet;
- (void)highlightApproximateNodeInverted:(bool)arg1;
- (id)hostViewForSheet:(id)arg1;
- (id)implementationWebView;
- (bool)inPopover;
- (void)increaseSize:(id)arg1;
- (id)initSimpleHTMLDocumentWithStyle:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 preferences:(id)arg3 groupName:(id)arg4;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithWebView:(id)arg1 frame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })initialPresentationRectInHostViewForSheet:(id)arg1;
- (float)initialScale;
- (id)inputDelegate;
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (id)insertDictationResultPlaceholder;
- (void)insertText:(id)arg1;
- (void)installGestureRecognizers;
- (id)interactionAssistant;
- (id)interactionDelegate;
- (id)interactionElement;
- (struct CGPoint { double x1; double x2; })interactionLocation;
- (bool)isCaretInEmptyParagraph;
- (bool)isClassicViewportMode;
- (bool)isDoubleTapEnabled;
- (bool)isEditable;
- (bool)isEditing;
- (bool)isEditingSingleLineElement;
- (bool)isInInteraction;
- (bool)isInPrintMode;
- (bool)isInsideRichlyEditableTextWidget;
- (bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;
- (bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;
- (bool)isShowingFullScreenPlugInUI;
- (bool)isStandaloneEditableView;
- (bool)isUnperturbedDictationResultMarker:(id)arg1;
- (bool)isWidgetEditingView;
- (bool)keyboardInput:(id)arg1 shouldInsertText:(id)arg2 isMarkedText:(bool)arg3;
- (bool)keyboardInput:(id)arg1 shouldReplaceTextInRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2 replacementText:(id)arg3;
- (bool)keyboardInputChanged:(id)arg1;
- (void)keyboardInputChangedSelection:(id)arg1;
- (bool)keyboardInputShouldDelete:(id)arg1;
- (void)layoutSubviews;
- (void)loadData:(id)arg1 MIMEType:(id)arg2 textEncodingName:(id)arg3 baseURL:(id)arg4;
- (void)loadHTMLString:(id)arg1 baseURL:(id)arg2;
- (void)loadRequest:(id)arg1;
- (bool)loadsSynchronously;
- (void)makeTextWritingDirectionLeftToRight:(id)arg1;
- (void)makeTextWritingDirectionRightToLeft:(id)arg1;
- (bool)makeWKFirstResponder;
- (id)markedTextRange;
- (id)markedTextStyle;
- (double)maximumDoubleTapScale;
- (float)maximumScale;
- (bool)mediaPlaybackAllowsAirPlay;
- (id)metadataDictionariesForDictationResults;
- (id)methodSignatureForSelector:(SEL)arg1;
- (id)mf_URLsForAttachmentsInRange:(id)arg1;
- (float)minimumScale;
- (float)minimumScaleForMinimumSize:(struct CGSize { double x1; double x2; })arg1;
- (double)minimumScaleForSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)mouseEventsChangeSelection;
- (bool)needsScrollNotifications;
- (struct CGImage { }*)newSnapshotWithRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)nextUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (unsigned long long)offsetInMarkedTextForSelection:(id)arg1;
- (void)paste:(id)arg1;
- (void)performClick:(id)arg1;
- (void)performInteractionSelector:(SEL)arg1 afterDelay:(double)arg2;
- (bool)performsTwoStepPaste:(id)arg1;
- (bool)playsNicelyWithGestures;
- (id)positionAtStartOrEndOfWord:(id)arg1;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })presentationRectInHostViewForSheet:(id)arg1;
- (id)rangeByExtendingCurrentSelection:(int)arg1;
- (id)rangeByMovingCurrentSelection:(int)arg1;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;
- (id)rangeOfEnclosingWord:(id)arg1;
- (id)rangeToRestoreAfterDictation;
- (id)readDataFromPasteboard:(id)arg1 withIndex:(long long)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectOfInterestForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)rectsForNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)redrawScaledDocument;
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(bool)arg2;
- (unsigned long long)renderTreeSize;
- (unsigned long long)renderTreeSizeThresholdForReset;
- (void)replace:(id)arg1;
- (void)replaceCurrentWordWithText:(id)arg1;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)replaceSelectionWithWebArchive:(id)arg1 selectReplacement:(bool)arg2 smartReplace:(bool)arg3;
- (bool)requiresKeyEvents;
- (void)resetInteraction;
- (void)resetTilingAfterLoadComplete;
- (bool)resignFirstResponder;
- (void)revealedSelectionByScrollingWebFrame:(id)arg1;
- (void)saveStateToCurrentHistoryItem;
- (id)scriptingInfoWithChildren;
- (void)scrollSelectionToVisible:(bool)arg1;
- (void)scrollViewWasRemoved;
- (void)select:(id)arg1;
- (void)selectAll;
- (void)selectAll:(id)arg1;
- (void)selectWord;
- (id)selectedDOMRange;
- (id)selectedTextRange;
- (long long)selectionAffinity;
- (bool)selectionAtDocumentStart;
- (bool)selectionAtWordStart;
- (long long)selectionBaseWritingDirection;
- (void)selectionChanged;
- (void)selectionChanged:(id)arg1;
- (long long)selectionGranularity;
- (bool)selectionIsCaretInDisplayBlockElementAtOffset:(int)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectionRange;
- (id)selectionRects;
- (id)selectionRectsForDOMRange:(id)arg1;
- (id)selectionRectsForRange:(id)arg1;
- (int)selectionState;
- (id)selectionView;
- (void)sendOrientationEventForOrientation:(long long)arg1;
- (void)sendScrollEventIfNecessary;
- (void)sendScrollEventIfNecessaryWasUserScroll:(bool)arg1;
- (void)sendScrollWheelEvents;
- (void)setAllowsDataDetectorsSheet:(bool)arg1;
- (void)setAllowsImageSheet:(bool)arg1;
- (void)setAllowsLinkSheet:(bool)arg1;
- (void)setAllowsUserScaling:(bool)arg1 forDocumentTypes:(int)arg2;
- (void)setAutoresizes:(bool)arg1;
- (void)setAutoscrollContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setBaseWritingDirection:(long long)arg1;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setBecomesEditableWithGestures:(bool)arg1;
- (void)setBottomBufferHeight:(double)arg1;
- (void)setCaretChangeListener:(id)arg1;
- (void)setCaretInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)setContinuousSpellCheckingEnabled:(bool)arg1;
- (void)setDataDetectorTypes:(unsigned long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDetectsPhoneNumbers:(bool)arg1;
- (void)setDoubleTapEnabled:(bool)arg1;
- (void)setDrawsBackground:(bool)arg1;
- (void)setExposedScrollViewRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setIgnoresFocusingMouse:(bool)arg1;
- (void)setIgnoresKeyEvents:(bool)arg1;
- (void)setIgnoresViewportOverflowWhenAutoresizing:(bool)arg1;
- (void)setInitialScale:(float)arg1 forDocumentTypes:(int)arg2;
- (void)setInputDelegate:(id)arg1;
- (void)setInteractionAssistantGestureRecognizers;
- (void)setInteractionDelegate:(id)arg1;
- (void)setIsStandaloneEditableView:(bool)arg1;
- (void)setIsWidgetEditingView:(bool)arg1;
- (void)setLoadsSynchronously:(bool)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setMaximumScale:(float)arg1 forDocumentTypes:(int)arg2;
- (void)setMediaPlaybackAllowsAirPlay:(bool)arg1;
- (void)setMinimumScale:(float)arg1 forDocumentTypes:(int)arg2;
- (void)setMinimumSize:(struct CGSize { double x1; double x2; })arg1;
- (void)setMinimumSize:(struct CGSize { double x1; double x2; })arg1 updateCurrentViewportConfigurationSize:(bool)arg2;
- (void)setOpaque:(bool)arg1;
- (void)setPaused:(bool)arg1;
- (void)setPaused:(bool)arg1 withEvents:(bool)arg2;
- (void)setRangeToRestoreAfterDictation:(id)arg1;
- (void)setRangedSelectionBaseToCurrentSelection;
- (void)setRangedSelectionBaseToCurrentSelectionEnd;
- (void)setRangedSelectionBaseToCurrentSelectionStart;
- (bool)setRangedSelectionExtentPoint:(struct CGPoint { double x1; double x2; })arg1 baseIsStart:(bool)arg2;
- (void)setRangedSelectionExtentPoint:(struct CGPoint { double x1; double x2; })arg1 baseIsStart:(bool)arg2 allowFlipping:(bool)arg3;
- (void)setRangedSelectionInitialExtentToCurrentSelectionEnd;
- (void)setRangedSelectionInitialExtentToCurrentSelectionStart;
- (void)setRangedSelectionWithExtentPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setRenderTreeSizeThresholdForReset:(unsigned long long)arg1;
- (void)setSelectedDOMRange:(id)arg1 affinity:(int)arg2;
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(bool)arg2;
- (void)setSelectedTextRange:(id)arg1;
- (void)setSelectedTextRange:(id)arg1 withAffinityDownstream:(bool)arg2;
- (void)setSelectionAffinity:(long long)arg1;
- (void)setSelectionGranularity:(long long)arg1;
- (void)setSelectionToEnd;
- (void)setSelectionToStart;
- (void)setSelectionWithFirstPoint:(struct CGPoint { double x1; double x2; })arg1 secondPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)setSelectionWithPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)setShouldIgnoreCustomViewport:(bool)arg1;
- (void)setShouldOnlyRecognizeGesturesOnActiveElements:(bool)arg1;
- (void)setSizeUpdatesSuspended:(bool)arg1;
- (void)setSmoothsFonts:(bool)arg1;
- (void)setStandaloneEditingElement:(id)arg1;
- (void)setSuppressesIncrementalRendering:(bool)arg1;
- (void)setText:(id)arg1;
- (void)setTileUpdatesDisabled:(bool)arg1;
- (void)setTilingArea:(int)arg1;
- (void)setUpdatesScrollView:(bool)arg1;
- (void)setUsePreTimberlineTransparencyBehavior;
- (void)setUserStyleSheet:(id)arg1;
- (void)setViewportSize:(struct CGSize { double x1; double x2; })arg1 forDocumentTypes:(int)arg2;
- (bool)shouldIgnoreCustomViewport;
- (bool)shouldOnlyRecognizeGesturesOnActiveElements;
- (bool)shouldSelectionAssistantReceiveDoubleTapAtPoint:(struct CGPoint { double x1; double x2; })arg1 forScale:(double)arg2;
- (void)showPlaybackTargetPicker:(bool)arg1 fromRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)sizeUpdatesSuspended;
- (void)smartExtendRangedSelection:(int)arg1;
- (id)standaloneEditingElement;
- (bool)startActionSheet;
- (void)startAutoscroll:(struct CGPoint { double x1; double x2; })arg1;
- (void)startInteractionWithLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)stopLoading:(id)arg1;
- (id)subviews;
- (id)superviewForSheet;
- (id)supportedPasteboardTypesForCurrentSelection;
- (bool)supportsTwoFingerScrollingAtTouchLocation:(struct CGPoint { double x1; double x2; })arg1 andLocation:(struct CGPoint { double x1; double x2; })arg2;
- (bool)suppressesIncrementalRendering;
- (void)takeTraitsFrom:(id)arg1;
- (void)tapInteractionWithLocation:(struct CGPoint { double x1; double x2; })arg1;
- (id)text;
- (id)textColorForCaretSelection;
- (id)textFormElement;
- (id)textInDOMRange:(id)arg1;
- (id)textInRange:(id)arg1;
- (id)textInputTraits;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;
- (void)toggleBaseWritingDirection;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)tokenizer;
- (id)undoManager;
- (id)undoManagerForWebView:(id)arg1;
- (void)unmarkText;
- (void)updateInteractionElements;
- (bool)updateKeyboardStateOnResponderChanges;
- (void)updateSelection;
- (bool)updatesScrollView;
- (void)useSelectionAssistantWithMode:(int)arg1;
- (void)validateInteractionWithLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)viewportHandler:(id)arg1 didChangeViewportSize:(struct CGSize { double x1; double x2; })arg2;
- (void)viewportHandlerDidChangeScales:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleBounds;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleContentFrame;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleContentRect;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })visibleFrame;
- (bool)wantsMinimalUI;
- (id)webSelectionAssistant;
- (void)webThreadWebViewDidLayout:(id)arg1 byScrolling:(bool)arg2;
- (id)webView;
- (void)webView:(id)arg1 didChangeLocationWithinPageForFrame:(id)arg2;
- (void)webView:(id)arg1 didCommitLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFailLoadWithError:(id)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2;
- (void)webView:(id)arg1 didFirstVisuallyNonEmptyLayoutInFrame:(id)arg2;
- (void)webView:(id)arg1 didHideFullScreenForPlugInView:(id)arg2;
- (void)webView:(id)arg1 didObserveDeferredContentChange:(int)arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 didReceiveViewportArguments:(id)arg2;
- (void)webView:(id)arg1 needsScrollNotifications:(id)arg2 forFrame:(id)arg3;
- (id)webView:(id)arg1 plugInViewWithArguments:(id)arg2 fromPlugInPackage:(id)arg3;
- (void)webView:(id)arg1 restoreStateFromHistoryItem:(id)arg2 forFrame:(id)arg3 force:(bool)arg4;
- (void)webView:(id)arg1 runOpenPanelForFileButtonWithResultListener:(id)arg2 allowMultipleFiles:(bool)arg3 acceptMIMETypes:(id)arg4;
- (void)webView:(id)arg1 saveStateToHistoryItem:(id)arg2 forFrame:(id)arg3;
- (bool)webView:(id)arg1 shouldScrollToPoint:(struct CGPoint { double x1; double x2; })arg2 forFrame:(id)arg3;
- (void)webView:(id)arg1 willAddPlugInView:(id)arg2;
- (void)webView:(id)arg1 willShowFullScreenForPlugInView:(id)arg2;
- (void)webViewDidCommitCompositingLayerChanges:(id)arg1;
- (void)webViewDidDrawTiles:(id)arg1;
- (void)webViewDidEndOverflowScroll:(id)arg1;
- (void)webViewDidPreventDefaultForEvent:(id)arg1;
- (void)webViewDidReceiveMobileDocType:(id)arg1;
- (void)webViewDidRestoreFromPageCache:(id)arg1;
- (void)webViewDidStartOverflowScroll:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })webViewFrameForUIFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)webVisiblePositionForPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)willInteractWithLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)willMoveToSuperview:(id)arg1;
- (void)willRotateInteractionSheet;
- (void)willStartScroll;
- (void)willStartScrollToTop;
- (void)willStartZoom;
- (void)willZoomToLocation:(struct CGPoint { double x1; double x2; })arg1 atScale:(double)arg2 forDuration:(double)arg3;
- (void)willZoomToMinimumScale;
- (id)wordAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (int)wordOffsetInRange:(id)arg1;
- (void)writeDataToPasteboard:(id)arg1;
- (double)zoomedDocumentScale;

@end
