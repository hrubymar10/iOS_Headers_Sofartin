/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/UIKit.framework/UIKit
 */

@interface UIDatePicker : UIControl <NSCoding, UIPickerViewScrollTesting> {
    _UIDatePickerView *_pickerView;
    bool _useCurrentDateDuringDecoding;
}

@property(getter=_usesModernStyle,setter=_setUsesModernStyle:,assign,readwrite) bool _usesModernStyle;
@property(getter=_allowsZeroCountDownDuration,setter=_setAllowsZeroCountDownDuration:,assign,readwrite) bool allowsZeroCountDownDuration;
@property(getter=_allowsZeroTimeInterval,setter=_setAllowsZeroTimeInterval:,assign,readwrite) bool allowsZeroTimeInterval;
@property(assign,copy) NSCalendar * calendar;
@property(getter=_contentWidth,assign,readonly) double contentWidth;
@property(assign,readwrite) double countDownDuration;
@property(assign,retain) NSDate * date;
@property(assign,readwrite) long long datePickerMode;
@property(getter=_dateUnderSelectionBar,assign,readonly) NSDate * dateUnderSelectionBar;
@property(getter=_drawsBackground,setter=_setDrawsBackground:,assign,readwrite) bool drawsBackground;
@property(getter=_highlightColor,setter=_setHighlightColor:,assign,retain) UIColor * highlightColor;
@property(getter=_isTimeIntervalMode,assign,readonly) bool isTimeIntervalMode;
@property(assign,retain) NSLocale * locale;
@property(assign,retain) NSDate * maximumDate;
@property(assign,retain) NSDate * minimumDate;
@property(assign,readwrite) long long minuteInterval;
@property(getter=_textColor,setter=_setTextColor:,assign,retain) UIColor * textColor;
@property(getter=_textShadowColor,setter=_setTextShadowColor:,assign,retain) UIColor * textShadowColor;
@property(assign,readwrite) double timeInterval;
@property(assign,retain) NSTimeZone * timeZone;
@property(getter=_useCurrentDateDuringDecoding,setter=_setUseCurrentDateDuringDecoding:,assign,readwrite) bool useCurrentDateDuringDecoding;
@property(getter=_usesBlackChrome,setter=_setUsesBlackChrome:,assign,readwrite) bool usesBlackChrome;

+ (Class)_pickerViewClass;

- (void)_UIAppearance_setBackgroundColor:(id)arg1;
- (bool)_allowsZeroCountDownDuration;
- (bool)_allowsZeroTimeInterval;
- (bool)_contentHuggingDefault_isUsuallyFixedHeight;
- (bool)_contentHuggingDefault_isUsuallyFixedWidth;
- (double)_contentWidth;
- (id)_dateUnderSelectionBar;
- (bool)_drawsBackground;
- (id)_highlightColor;
- (void)_insertPickerView;
- (struct CGSize { double x1; double x2; })_intrinsicSizeWithinSize:(struct CGSize { double x1; double x2; })arg1;
- (bool)_isTimeIntervalMode;
- (id)_labelTextForCalendarUnit:(unsigned long long)arg1;
- (id)_locale;
- (void)_performScrollTest:(id)arg1 withIterations:(long long)arg2 rowsToScroll:(long long)arg3 inComponent:(long long)arg4;
- (void)_populateArchivedSubviews:(id)arg1;
- (id)_selectedTextForCalendarUnit:(unsigned long long)arg1;
- (void)_setAllowsZeroCountDownDuration:(bool)arg1;
- (void)_setAllowsZeroTimeInterval:(bool)arg1;
- (void)_setDrawsBackground:(bool)arg1;
- (void)_setHidesLabels:(bool)arg1;
- (void)_setHighlightColor:(id)arg1;
- (void)_setHighlightsToday:(bool)arg1;
- (void)_setLocale:(id)arg1;
- (void)_setTextColor:(id)arg1;
- (void)_setTextShadowColor:(id)arg1;
- (void)_setUseCurrentDateDuringDecoding:(bool)arg1;
- (void)_setUsesBlackChrome:(bool)arg1;
- (void)_setUsesModernStyle:(bool)arg1;
- (id)_textColor;
- (id)_textShadowColor;
- (bool)_useCurrentDateDuringDecoding;
- (bool)_usesBlackChrome;
- (bool)_usesModernStyle;
- (void)awakeFromNib;
- (id)calendar;
- (double)countDownDuration;
- (id)date;
- (id)dateComponents;
- (long long)datePickerMode;
- (void)encodeWithCoder:(id)arg1;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (int)hour;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)invalidateIntrinsicContentSize;
- (id)locale;
- (id)maximumDate;
- (id)minimumDate;
- (int)minute;
- (long long)minuteInterval;
- (int)second;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setCalendar:(id)arg1;
- (void)setCountDownDuration:(double)arg1;
- (void)setDate:(id)arg1;
- (void)setDate:(id)arg1 animate:(bool)arg2;
- (void)setDate:(id)arg1 animated:(bool)arg2;
- (void)setDateComponents:(id)arg1;
- (void)setDatePickerMode:(long long)arg1;
- (void)setDelegate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setHighlightsToday:(bool)arg1;
- (void)setLocale:(id)arg1;
- (void)setMaximumDate:(id)arg1;
- (void)setMinimumDate:(id)arg1;
- (void)setMinuteInterval:(long long)arg1;
- (void)setStaggerTimeIntervals:(bool)arg1;
- (void)setTimeInterval:(double)arg1;
- (void)setTimeZone:(id)arg1;
- (struct CGSize { double x1; double x2; })sizeThatFits:(struct CGSize { double x1; double x2; })arg1;
- (double)timeInterval;
- (id)timeZone;

@end
