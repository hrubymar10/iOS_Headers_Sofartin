/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/HealthKit.framework/HealthKit
 */

@interface HKActivityCache : HKSample <HDCoding, NSCopying> {
    long long _activeEnergyBurnedAnchor;
    double _activeHours;
    long long _activeHoursAnchor;
    double _briskMinutes;
    long long _briskMinutesAnchor;
    long long _cacheIndex;
    NSDateComponents *_dateComponents;
    HKQuantity *_energyBurned;
    HKQuantity *_energyBurnedGoal;
    long long _energyBurnedGoalAnchor;
    NSDate *_energyBurnedGoalDate;
    unsigned long long _knownFields;
    long long _stepCount;
    long long _stepCountAnchor;
    HKQuantity *_walkingAndRunningDistance;
    long long _walkingAndRunningDistanceAnchor;
    long long _workoutAnchor;
}

@property(assign,readwrite) long long activeEnergyBurnedAnchor;
@property(assign,readwrite) double activeHours;
@property(assign,readwrite) long long activeHoursAnchor;
@property(assign,readonly) double activeHoursGoal;
@property(assign,readonly) double activeHoursGoalPercentage;
@property(assign,readwrite) double briskMinutes;
@property(assign,readwrite) long long briskMinutesAnchor;
@property(assign,readonly) double briskMinutesGoal;
@property(assign,readonly) double briskMinutesGoalPercentage;
@property(setter=_setCacheIndex:,assign,readwrite) long long cacheIndex;
@property(assign,readonly) NSDateComponents * dateComponents;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,retain) HKQuantity * energyBurned;
@property(assign,retain) HKQuantity * energyBurnedGoal;
@property(assign,readwrite) long long energyBurnedGoalAnchor;
@property(assign,readonly) NSDate * energyBurnedGoalDate;
@property(assign,readonly) double energyBurnedGoalPercentage;
@property(assign,readonly) bool hasActiveHours;
@property(assign,readonly) bool hasActiveHoursGoal;
@property(assign,readonly) bool hasActiveHoursGoalPercentage;
@property(assign,readonly) bool hasBriskMinutes;
@property(assign,readonly) bool hasBriskMinutesGoal;
@property(assign,readonly) bool hasBriskMinutesGoalPercentage;
@property(assign,readonly) bool hasDateComponents;
@property(assign,readonly) bool hasEnergyBurned;
@property(assign,readonly) bool hasEnergyBurnedGoal;
@property(assign,readonly) bool hasEnergyBurnedGoalPercentage;
@property(assign,readonly) bool hasStepCount;
@property(assign,readonly) bool hasWalkingAndRunningDistance;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) unsigned long long knownFields;
@property(assign,readwrite) long long stepCount;
@property(assign,readwrite) long long stepCountAnchor;
@property(assign,readonly) Class superclass;
@property(assign,retain) HKQuantity * walkingAndRunningDistance;
@property(assign,readwrite) long long walkingAndRunningDistanceAnchor;
@property(assign,readwrite) long long workoutAnchor;

+ (id)_activityCacheWithUUID:(id)arg1 metadata:(id)arg2 sourceBundleIdentifier:(id)arg3 creationDate:(id)arg4 startDate:(id)arg5 endDate:(id)arg6 cacheIndex:(long long)arg7 energyBurned:(id)arg8 briskMinutes:(double)arg9 activeHours:(double)arg10 stepCount:(long long)arg11 walkingAndRunningDistance:(id)arg12 energyBurnedGoal:(id)arg13;
+ (id)_activityCacheWithUUID:(id)arg1 metadata:(id)arg2 sourceBundleIdentifier:(id)arg3 creationDate:(id)arg4 startDate:(id)arg5 endDate:(id)arg6 cacheIndex:(long long)arg7 energyBurned:(id)arg8 walkingAndRunningDistance:(id)arg9 energyBurnedGoal:(id)arg10;
+ (bool)_isConcreteObjectClass;
+ (id)_newActivityCacheWithStartDate:(id)arg1 endDate:(id)arg2 dateComponents:(id)arg3 energyBurned:(id)arg4 briskMinutes:(double)arg5 activeHours:(double)arg6 energyBurnedGoal:(id)arg7 stepCount:(long long)arg8 walkingAndRunningDistance:(id)arg9 metadata:(id)arg10;
+ (id)_newActivityCacheWithStartDate:(id)arg1 endDate:(id)arg2 dateComponents:(id)arg3 energyBurned:(id)arg4 energyBurnedGoal:(id)arg5 walkingAndRunningDistance:(id)arg6 metadata:(id)arg7;
+ (id)_newActivityCacheWithUUID:(id)arg1 startDate:(id)arg2 endDate:(id)arg3 dateComponents:(id)arg4;
+ (id)createWithCodable:(id)arg1;
+ (bool)supportsSecureCoding;

- (void).cxx_destruct;
- (double)_energyBurnedGoalInKilocalories;
- (double)_energyBurnedInKilocalories;
- (bool)_isEqualToActivityCache:(id)arg1;
- (long long)_minAnchor;
- (void)_setActiveEnergyBurnedAnchor:(long long)arg1;
- (void)_setActiveHours:(double)arg1;
- (void)_setActiveHoursAnchor:(long long)arg1;
- (void)_setAllAnchors:(long long)arg1;
- (void)_setBriskMinutes:(double)arg1;
- (void)_setBriskMinutesAnchor:(long long)arg1;
- (void)_setCacheIndex:(long long)arg1;
- (void)_setEnergyBurned:(id)arg1;
- (void)_setEnergyBurnedGoal:(id)arg1;
- (void)_setEnergyBurnedGoal:(id)arg1 date:(id)arg2;
- (void)_setEnergyBurnedGoalAnchor:(long long)arg1;
- (void)_setEnergyBurnedGoalDateOnly:(id)arg1;
- (void)_setEnergyBurnedGoalOnly:(id)arg1;
- (void)_setKnownFields:(unsigned long long)arg1;
- (void)_setStepCount:(long long)arg1;
- (void)_setStepCountAnchor:(long long)arg1;
- (void)_setWalkingAndRunningDistance:(id)arg1;
- (void)_setWalkingAndRunningDistanceAnchor:(long long)arg1;
- (void)_setWorkoutAnchor:(long long)arg1;
- (id)_valueDescription;
- (double)_walkingAndRunningDistanceInMeters;
- (long long)activeEnergyBurnedAnchor;
- (double)activeHours;
- (long long)activeHoursAnchor;
- (double)activeHoursGoal;
- (double)activeHoursGoalPercentage;
- (bool)addCodableRepresentationToCollectionForJournal:(id)arg1;
- (bool)addCodableRepresentationToCollectionForSync:(id)arg1;
- (double)briskMinutes;
- (long long)briskMinutesAnchor;
- (double)briskMinutesGoal;
- (double)briskMinutesGoalPercentage;
- (long long)cacheIndex;
- (id)codableRepresentationForJournal;
- (id)codableRepresentationForSync;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dateComponents;
- (void)encodeWithCoder:(id)arg1;
- (id)energyBurned;
- (id)energyBurnedGoal;
- (long long)energyBurnedGoalAnchor;
- (id)energyBurnedGoalDate;
- (double)energyBurnedGoalPercentage;
- (bool)hasActiveHours;
- (bool)hasActiveHoursGoal;
- (bool)hasActiveHoursGoalPercentage;
- (bool)hasBriskMinutes;
- (bool)hasBriskMinutesGoal;
- (bool)hasBriskMinutesGoalPercentage;
- (bool)hasDateComponents;
- (bool)hasEnergyBurned;
- (bool)hasEnergyBurnedGoal;
- (bool)hasEnergyBurnedGoalPercentage;
- (bool)hasStepCount;
- (bool)hasWalkingAndRunningDistance;
- (id)initWithCoder:(id)arg1;
- (unsigned long long)knownFields;
- (void)reset;
- (long long)stepCount;
- (long long)stepCountAnchor;
- (id)walkingAndRunningDistance;
- (long long)walkingAndRunningDistanceAnchor;
- (long long)workoutAnchor;

@end
