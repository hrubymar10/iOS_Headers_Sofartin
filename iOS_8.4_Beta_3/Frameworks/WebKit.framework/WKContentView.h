/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKContentView : UIView <UIGestureRecognizerDelegate, UITextInputPrivate, UIWKInteractionViewProtocol, UIWebFormAccessoryDelegate, UIWebTouchEventsGestureRecognizerDelegate, WKActionSheetAssistantDelegate, WKFileUploadPanelDelegate> {
    struct RetainPtr<WKActionSheetAssistant> { 
        void *m_ptr; 
    } _actionSheetAssistant;
    struct RetainPtr<WKAirPlayRoutePicker> { 
        void *m_ptr; 
    } _airPlayRoutePicker;
    struct AssistedNodeInformation { 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } elementRect; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } selectionRect; 
        double minimumScaleFactor; 
        double maximumScaleFactor; 
        double nodeFontSize; 
        bool hasNextNode; 
        bool hasPreviousNode; 
        bool isAutocorrect; 
        bool isMultiSelect; 
        bool isReadOnly; 
        bool allowsUserScaling; 
        bool insideFixedPosition; 
        int autocapitalizeType; 
        int elementType; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } formAction; 
        struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow> { 
            struct OptionItem {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } selectOptions; 
        int selectedIndex; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } value; 
        double valueAsNumber; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
    } _assistedNodeInformation;
    /* Warning: unhandled struct encoding: '{WKAutoCorrectionData="fontName"{String="m_impl"{RefPtr<WTF::StringImpl>="m_ptr"^{StringImpl}}}"fontSize"d"fontTraits"Q"textFirstRect"{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}"textLastRect"{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}"autocorrectionHandler"@?"autocorrectionContextHandler"@?}' */ struct WKAutoCorrectionData { 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } fontName; 
        double fontSize; 
        unsigned long long fontTraits; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } textFirstRect; 
        struct CGRect { 
            struct CGPoint { 
                double x; 
                double y; 
            } origin; 
            struct CGSize { 
                double width; 
                double height; 
            } size; 
        } textLastRect; 
        id autocorrectionHandler; 
    } _autocorrectionData;
    struct RetainPtr<WKBrowsingContextController> { 
        void *m_ptr; 
    } _browsingContextController;
    bool _canSendTouchEventsAsynchronously;
    bool _didAccessoryTabInitiateFocus;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    } _doubleTapGestureRecognizer;
    struct RetainPtr<WKFileUploadPanel> { 
        void *m_ptr; 
    } _fileUploadPanel;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _fixedClippingView;
    struct RetainPtr<UIWebFormAccessory> { 
        void *m_ptr; 
    } _formAccessoryView;
    struct RetainPtr<WKFormInputSession> { 
        void *m_ptr; 
    } _formInputSession;
    bool _hasTapHighlightForPotentialTap;
    bool _hasValidPositionInformation;
    bool _highlightLongPressCanClick;
    struct RetainPtr<_UIWebHighlightLongPressGestureRecognizer> { 
        void *m_ptr; 
    } _highlightLongPressGestureRecognizer;
    struct RetainPtr<_UIHighlightView> { 
        void *m_ptr; 
    } _highlightView;
    struct HistoricalVelocityData { 
        unsigned int m_historySize; 
        unsigned int m_latestDataIndex; 
        double m_lastAppendTimestamp; 
        struct Data { 
            double timestamp; 
            struct CGPoint { 
                double x; 
                double y; 
            } position; 
            double scale; 
        } m_history[3]; 
    } _historicalKinematicData;
    <UITextInputDelegate> *_inputDelegate;
    struct RetainPtr<NSObject<WKFormPeripheral> > { 
        void *m_ptr; 
    } _inputPeripheral;
    struct RetainPtr<WKInspectorHighlightView> { 
        void *m_ptr; 
    } _inspectorHighlightView;
    struct RetainPtr<WKInspectorIndicationView> { 
        void *m_ptr; 
    } _inspectorIndicationView;
    bool _inspectorNodeSearchEnabled;
    struct RetainPtr<WKInspectorNodeSearchGestureRecognizer> { 
        void *m_ptr; 
    } _inspectorNodeSearchGestureRecognizer;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _interactionViewsContainerView;
    bool _isBackground;
    bool _isEditable;
    bool _isTapHighlightIDValid;
    struct CGPoint { 
        double x; 
        double y; 
    } _lastInteractionLocation;
    struct WKSelectionDrawingInfo { 
        int type; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } caretRect; 
        struct Vector<WebCore::SelectionRect, 0, WTF::CrashOnOverflow> { 
            struct SelectionRect {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } selectionRects; 
    } _lastSelectionDrawingInfo;
    unsigned long long _latestTapHighlightID;
    struct RetainPtr<UILongPressGestureRecognizer> { 
        void *m_ptr; 
    } _longPressGestureRecognizer;
    struct RetainPtr<NSString> { 
        void *m_ptr; 
    } _markedText;
    struct RefPtr<WebKit::WebPageProxy> { 
        struct WebPageProxy {} *m_ptr; 
    } _page;
    struct unique_ptr<WebKit::PageClientImpl, std::__1::default_delete<WebKit::PageClientImpl> > { 
        struct __compressed_pair<WebKit::PageClientImpl *, std::__1::default_delete<WebKit::PageClientImpl> > { 
            struct PageClientImpl {} *__first_; 
        } __ptr_; 
    } _pageClient;
    struct InteractionInformationAtPosition { 
        struct IntPoint { 
            int m_x; 
            int m_y; 
        } point; 
        bool nodeAtPositionIsAssistedNode; 
        bool isSelectable; 
        bool isNearMarkedText; 
        bool touchCalloutEnabled; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } clickableElementName; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } url; 
        struct String { 
            struct RefPtr<WTF::StringImpl> { 
                struct StringImpl {} *m_ptr; 
            } m_impl; 
        } title; 
        struct IntRect { 
            struct IntPoint { 
                int m_x; 
                int m_y; 
            } m_location; 
            struct IntSize { 
                int m_width; 
                int m_height; 
            } m_size; 
        } bounds; 
        struct RefPtr<WebKit::ShareableBitmap> { 
            struct ShareableBitmap {} *m_ptr; 
        } image; 
    } _positionInformation;
    bool _potentialTapInProgress;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _rootContentView;
    bool _selectionNeedsUpdate;
    bool _shouldRestoreSelection;
    bool _showingTextStyleOptions;
    struct RetainPtr<WKSyntheticClickTapGestureRecognizer> { 
        void *m_ptr; 
    } _singleTapGestureRecognizer;
    struct unique_ptr<WebKit::SmartMagnificationController, std::__1::default_delete<WebKit::SmartMagnificationController> > { 
        struct __compressed_pair<WebKit::SmartMagnificationController *, std::__1::default_delete<WebKit::SmartMagnificationController> > { 
            struct SmartMagnificationController {} *__first_; 
        } __ptr_; 
    } _smartMagnificationController;
    struct TapHighlightInformation { 
        struct Color { 
            unsigned int m_color; 
            bool m_valid; 
        } color; 
        struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow> { 
            struct FloatQuad {} *m_buffer; 
            unsigned int m_capacity; 
            unsigned int m_size; 
        } quads; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } topLeftRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } topRightRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } bottomLeftRadius; 
        struct IntSize { 
            int m_width; 
            int m_height; 
        } bottomRightRadius; 
    } _tapHighlightInformation;
    struct RetainPtr<UIWKTextInteractionAssistant> { 
        void *m_ptr; 
    } _textSelectionAssistant;
    struct RetainPtr<UIWebTouchEventsGestureRecognizer> { 
        void *m_ptr; 
    } _touchEventGestureRecognizer;
    struct RetainPtr<UITextInputTraits> { 
        void *m_ptr; 
    } _traits;
    struct RetainPtr<UITapGestureRecognizer> { 
        void *m_ptr; 
    } _twoFingerDoubleTapGestureRecognizer;
    struct RetainPtr<NSUndoManager> { 
        void *m_ptr; 
    } _undoManager;
    bool _usingGestureForSelection;
    struct RetainPtr<UIWKSelectionAssistant> { 
        void *m_ptr; 
    } _webSelectionAssistant;
    WKWebView *_webView;
}

@property (nonatomic) bool acceptsEmoji;
@property (nonatomic) bool acceptsFloatingKeyboard;
@property (nonatomic) bool acceptsSplitKeyboard;
@property (nonatomic, readonly) const struct AssistedNodeInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_2_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_2_1_2; } x2; double x3; double x4; double x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; int x13; int x14; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_15_1_1; } x15; /* Warning: unhandled struct encoding: '{Vector<WebKit::OptionItem' */ struct x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; void*x35; void*x36; void*x37; void*x38; void*x39; void*x40; void*x41; struct { unsigned int delegateRespondsToFieldEditorDidChange : 1; unsigned int delegateRespondsToShouldInsertText : 1; unsigned int delegateRespondsToShouldReplaceWithText : 1; unsigned int suppressScrollToSelection : 1; unsigned int clearOnNextEdit : 1; } x42; void*x43; void*x44; void*x45; void*x46; void*x47; void*x48; void*x49; void*x50; void*x51; void*x52; void*x53; void*x54; void*x55; void*x56; void*x57; void*x58; short x59; void*x60; void*x61; void*x62; const void*x63; void*x64; void*x65; BOOL x66; void*x67; void*x68; void*x69; void*x70; void*x71; struct x72; void*x73; void*x74; void*x75; int x76; void*x77; in void*x78; void*x79; void*x80; void*x81; void*x82; void*x83; void*x84; void*x85; void*x86; void*x87; void*x88; void*x89; void*x90; float x91; void*x92; long x93; void*x94; out void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; short x110; void*x111; void*x112; void*x113; const void*x114; void*x115; void*x116; BOOL x117; void*x118; void*x119; void*x120; void*x121; void*x122; struct x123; void*x124; void*x125; void*x126; float x127; void*x128; long x129; void*x130; out void*x131; void*x132; void*x133; void*x134; void*x135; void*x136; void*x137; void*x138; void*x139; void*x140; void*x141; void*x142; void*x143; void*x144; void*x145; void*x146; void*x147; void*x148; void*x149; void*x150; void*x151; void*x152; void*x153; void*x154; void*x155; float x156; void*x157; long x158; void*x159; out void*x160; void*x161; void*x162; void*x163; void*x164; void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; float x185; void*x186; long x187; void*x188; out void*x189; void*x190; void*x191; void*x192; void*x193; void*x194; void*x195; void*x196; void*x197; void*x198; void*x199; void*x200; void*x201; void*x202; void*x203; void*x204; void*x205; void*x206; void*x207; void*x208; void*x209; void*x210; void*x211; void*x212; void*x213; float x214; void*x215; long x216; void*x217; out void*x218; void*x219; void*x220; void*x221; void*x222; void*x223; void*x224; void*x225; void*x226; void*x227; void*x228; void*x229; void*x230; void*x231; void*x232; void*x233; void*x234; void*x235; void*x236; void*x237; void*x238; void*x239; void*x240; void*x241; void*x242; }*assistedNodeInformation; /* unknown property attribute:  WTF::CrashOnOverflow>=^{OptionItem}II}i{String={RefPtr<WTF::StringImpl>=^{StringImpl}}}d{String={RefPtr<WTF::StringImpl>=^{StringImpl}}}} */
@property (nonatomic) long long autocapitalizationType;
@property (nonatomic, copy) NSString *autocorrectionContext;
@property (nonatomic, readonly) const struct WKAutoCorrectionData { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_1_1_1; } x1; double x2; unsigned long long x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_5_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_5_1_2; } x5; id x6; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x7; id x8; void*x9; }*autocorrectionData;
@property (nonatomic) long long autocorrectionType;
@property (nonatomic, readonly) UITextPosition *beginningOfDocument;
@property (nonatomic, readonly) WKBrowsingContextController *browsingContextController;
@property (nonatomic) bool contentsIsSingleValue;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) bool deferBecomingResponder;
@property (readonly, copy) NSString *description;
@property (nonatomic) bool disablePrediction;
@property (nonatomic) bool displaySecureTextUsingPlainText;
@property (nonatomic) int emptyContentReturnKeyType;
@property (nonatomic) bool enablesReturnKeyAutomatically;
@property (nonatomic) bool enablesReturnKeyOnNonWhiteSpaceContent;
@property (nonatomic, readonly) UITextPosition *endOfDocument;
@property (nonatomic) bool forceEnableDictation;
@property (nonatomic, readonly) UIWebFormAccessory *formAccessoryView;
@property (readonly) unsigned long long hash;
@property (nonatomic) <UITextInputDelegate> *inputDelegate;
@property (nonatomic, retain) UIColor *insertionPointColor;
@property (nonatomic) unsigned long long insertionPointWidth;
@property (nonatomic, readonly) UITextInteractionAssistant *interactionAssistant;
@property (nonatomic, readonly) bool isAssistingNode;
@property (nonatomic, readonly) bool isBackground;
@property (nonatomic, readonly) bool isEditable;
@property (nonatomic) bool isSingleLineDocument;
@property (nonatomic) long long keyboardAppearance;
@property (nonatomic) long long keyboardType;
@property (nonatomic, readonly) struct CGPoint { double x1; double x2; } lastInteractionLocation;
@property (nonatomic) bool learnsCorrections;
@property (nonatomic, readonly) UITextRange *markedTextRange;
@property (nonatomic, copy) NSDictionary *markedTextStyle;
@property (nonatomic, readonly) struct WebPageProxy { int (**x1)(); id x2; int (**x3)(); int (**x4)(); int (**x5)(); struct PageClient {} *x6; /* Warning: unhandled struct encoding: '{unique_ptr<API::LoaderClient' */ struct x7; void*x8; void*x9; void*x10; void*x11; void*x12; void*x13; void*x14; void*x15; void*x16; void*x17; void*x18; void*x19; void*x20; void*x21; void*x22; void*x23; void*x24; void*x25; void*x26; void*x27; void*x28; void*x29; void*x30; void*x31; void*x32; void*x33; void*x34; unsigned short x35; void*x36; short x37; void*x38; void*x39; void*x40; void*x41; unsigned long x42; int x43; unsigned int x44/* : ? */; const void*x45; const void*x46; void*x47; void*x48; const int x49; void x50; void*x51; void*x52; void*x53; void*x54; const void*x55; void*x56; void*x57; void*x58; out const void*x59; short x60; void*x61; unsigned char x62; out void*x63; void*x64; void*x65; in int x66; out in unsigned short x67; void*x68; in BOOL x69; void*x70; float x71; const void*x72; void*x73; void*x74; void*x75; out const void*x76; void*x77; unsigned char x78; out void*x79; void*x80; void*x81; in int x82; out in unsigned short x83; void*x84; in BOOL x85; void*x86; void*x87; void*x88; void*x89; void*x90; void*x91; void*x92; void*x93; void*x94; void*x95; void*x96; void*x97; void*x98; void*x99; void*x100; void*x101; void*x102; void*x103; void*x104; void*x105; void*x106; void*x107; void*x108; void*x109; void*x110; void*x111; unsigned short x112; void*x113; short x114; void*x115; void*x116; void*x117; void*x118; unsigned long x119; int x120; unsigned int x121/* : ? */; const void*x122; const void*x123; void*x124; void*x125; const int x126; void x127; void*x128; void*x129; void*x130; void*x131; const void*x132; void*x133; void*x134; void*x135; out const void*x136; short x137; void*x138; unsigned int x139; long doublex140; unsigned short x141; void*x142; out void*x143; in double x144; void*x145; void*x146; int x147; out in void*x148; float x149; const void*x150; void*x151; void*x152; void*x153; out const void*x154; void*x155; unsigned int x156; long doublex157; unsigned short x158; void*x159; out void*x160; in double x161; void*x162; void*x163; int x164; out in void*x165; void*x166; void*x167; void*x168; void*x169; void*x170; void*x171; void*x172; void*x173; void*x174; void*x175; void*x176; void*x177; void*x178; void*x179; void*x180; void*x181; void*x182; void*x183; void*x184; void*x185; void*x186; void*x187; void*x188; void*x189; void*x190; unsigned short x191; void*x192; short x193; void*x194; void*x195; void*x196; void*x197; unsigned long x198; int x199; unsigned int x200/* : ? */; const void*x201; const void*x202; void*x203; void*x204; const int x205; void x206; void*x207; void*x208; void*x209; void*x210; const void*x211; void*x212; void*x213; void*x214; out const void*x215; short x216; void*x217; unsigned short x218; void*x219; unsigned int x220/* : ? */; void*x221; void*x222; BOOL x223; void*x224; short x225; void*x226; float x227; const void*x228; void*x229; void*x230; void*x231; out const void*x232; void*x233; unsigned short x234; void*x235; unsigned int x236/* : ? */; void*x237; void*x238; BOOL x239; void*x240; short x241; void*x242; void*x243; void*x244; void*x245; void*x246; void*x247; void*x248; void*x249; void*x250; void*x251; void*x252; void*x253; void*x254; void*x255; void*x256; void*x257; void*x258; void*x259; void*x260; void*x261; void*x262; void*x263; void*x264; void*x265; id x266; void*x267; void*x268; void*x269; void*x270; void*x271; void*x272; void*x273; void*x274; void*x275; unsigned short x276; void*x277; short x278; void*x279; void*x280; void*x281; void*x282; unsigned long x283; int x284; unsigned int x285/* : ? */; const void*x286; const void*x287; void*x288; void*x289; const int x290; void x291; void*x292; void*x293; void*x294; void*x295; const void*x296; void*x297; void*x298; void*x299; out const void*x300; short x301; void*x302; void*x303; void*x304; out void*x305; out unsigned long x306; int x307; unsigned int x308/* : ? */; const void*x309; const void*x310; void*x311; float x312; const void*x313; void*x314; void*x315; void*x316; out const void*x317; void*x318; void*x319; void*x320; out void*x321; out unsigned long x322; int x323; unsigned int x324/* : ? */; const void*x325; const void*x326; void*x327; void*x328; void*x329; void*x330; void*x331; void*x332; void*x333; void*x334; void*x335; void*x336; void*x337; void*x338; void*x339; void*x340; void*x341; void*x342; void*x343; void*x344; void*x345; void*x346; void*x347; void*x348; void*x349; void*x350; void*x351; void*x352; void*x353; unsigned short x354; void*x355; short x356; void*x357; void*x358; void*x359; void*x360; unsigned long x361; int x362; unsigned int x363/* : ? */; const void*x364; const void*x365; void*x366; void*x367; const int x368; void x369; void*x370; void*x371; void*x372; void*x373; const void*x374; void*x375; void*x376; void*x377; out const void*x378; short x379; void*x380; unsigned short x381; void*x382; out const void*x383; void*x384; int x385; void*x386; void*x387; unsigned int x388; void*x389; float x390; const void*x391; void*x392; void*x393; void*x394; out const void*x395; void*x396; unsigned short x397; void*x398; out const void*x399; void*x400; int x401; void*x402; void*x403; unsigned int x404; void*x405; void*x406; void*x407; void*x408; void*x409; void*x410; void*x411; void*x412; void*x413; void*x414; void*x415; void*x416; void*x417; void*x418; void*x419; void*x420; void*x421; void*x422; void*x423; void*x424; void*x425; void*x426; void*x427; void*x428; void*x429; void*x430; void*x431; void*x432; void*x433; void*x434; unsigned char x435; void*x436; unsigned short x437; void*x438; short x439; void*x440; void*x441; void*x442; void*x443; unsigned long x444; int x445; unsigned int x446/* : ? */; const void*x447; const void*x448; void*x449; void*x450; const int x451; void x452; void*x453; void*x454; void*x455; void*x456; const void*x457; void*x458; void*x459; void*x460; out const void*x461; short x462; void*x463; int x464; void*x465; out const void*x466; unsigned int x467; void*x468; void*x469; out const void*x470; void*x471; float x472; const void*x473; void*x474; void*x475; void*x476; out const void*x477; void*x478; int x479; void*x480; out const void*x481; unsigned int x482; void*x483; void*x484; out const void*x485; void*x486; void*x487; void*x488; void*x489; void*x490; void*x491; void*x492; void*x493; void*x494; void*x495; void*x496; void*x497; void*x498; void*x499; void*x500; void*x501; void*x502; void*x503; void*x504; void*x505; void*x506; char *x507; void*x508; void*x509; void*x510; void*x511; void*x512; void*x513; void*x514; void*x515; unsigned short x516; void*x517; short x518; void*x519; void*x520; void*x521; void*x522; unsigned long x523; int x524; unsigned int x525/* : ? */; const void*x526; const void*x527; void*x528; void*x529; const int x530; void x531; void*x532; void*x533; void*x534; void*x535; const void*x536; void*x537; void*x538; void*x539; out const void*x540; short x541; void*x542; void*x543; out void*x544; void*x545; const long x546; out void*x547; unsigned char x548; out const void*x549; void*x550; float x551; const void*x552; void*x553; void*x554; void*x555; out const void*x556; void*x557; void*x558; out void*x559; void*x560; const long x561; out void*x562; unsigned char x563; out const void*x564; void*x565; void*x566; void*x567; void*x568; void*x569; void*x570; void*x571; void*x572; void*x573; void*x574; void*x575; void*x576; void*x577; void*x578; void*x579; void*x580; void*x581; void*x582; void*x583; void*x584; void*x585; void*x586; void*x587; void*x588; void*x589; void*x590; void*x591; void*x592; char *x593; void*x594; void*x595; void*x596; const in int x597; in void*x598; SEL x599; void*x600; void*x601; in const void*x602; BOOL x603; out void*x604; in int x605; void*x606; void*x607; double x608; void*x609; float x610; int x611; long x612; void*x613; const void*x614; void*x615; void*x616; void*x617; void*x618; SEL x619; void*x620; void*x621; void*x622; void*x623; void*x624; void*x625; short x626; int x627; in void*x628; void*x629; void*x630; void x631; out int x632; double x633; char *x634; void*x635; void*x636; char *x637; void*x638; void*x639; void x640; out int x641; double x642; char *x643; void*x644; void*x645; void*x646; void*x647; void*x648; void*x649; void*x650; void*x651; void*x652; void*x653; void*x654; void*x655; void*x656; void*x657; void*x658; void*x659; void*x660; void*x661; void*x662; void*x663; void*x664; void*x665; void*x666; void*x667; id x668; void*x669; void*x670; void*x671; void*x672; void*x673; void*x674; void*x675; unsigned char x676; void*x677; unsigned short x678; void*x679; short x680; void*x681; void*x682; void*x683; void*x684; unsigned long x685; int x686; unsigned int x687/* : ? */; const void*x688; const void*x689; void*x690; void*x691; const int x692; void x693; void*x694; void*x695; void*x696; void*x697; const void*x698; void*x699; void*x700; void*x701; out const void*x702; short x703; void*x704; int x705; void*x706; out const void*x707; unsigned int x708; void*x709; void*x710; out const void*x711; void*x712; float x713; const void*x714; void*x715; void*x716; void*x717; out const void*x718; void*x719; int x720; void*x721; out const void*x722; unsigned int x723; void*x724; void*x725; out const void*x726; void*x727; void*x728; void*x729; void*x730; void*x731; void*x732; void*x733; void*x734; void*x735; void*x736; void*x737; void*x738; void*x739; void*x740; void*x741; void*x742; void*x743; void*x744; void*x745; void*x746; void*x747; void*x748; void*x749; void*x750; void*x751; void*x752; void*x753; void*x754; void*x755; void*x756; unsigned short x757; void*x758; short x759; void*x760; void*x761; void*x762; void*x763; unsigned long x764; int x765; unsigned int x766/* : ? */; const void*x767; const void*x768; void*x769; void*x770; const int x771; void x772; void*x773; void*x774; void*x775; void*x776; const void*x777; void*x778; void*x779; void*x780; out const void*x781; short x782; void*x783; void*x784; void*x785; void*x786; long x787; void*x788; void*x789; long doublex790; void*x791; void*x792; void*x793; out in void*x794; float x795; const void*x796; void*x797; void*x798; void*x799; out const void*x800; void*x801; void*x802; void*x803; void*x804; long x805; void*x806; void*x807; long doublex808; void*x809; void*x810; void*x811; out in void*x812; void*x813; void*x814; void*x815; void*x816; void*x817; void*x818; void*x819; void*x820; void*x821; void*x822; void*x823; void*x824; void*x825; void*x826; void*x827; void*x828; void*x829; id x830; void*x831; void*x832; void*x833; void*x834; void*x835; void*x836; void*x837; void*x838; void*x839; unsigned short x840; void*x841; short x842; void*x843; void*x844; void*x845; void*x846; unsigned long x847; int x848; unsigned int x849/* : ? */; const void*x850; const void*x851; void*x852; void*x853; const int x854; void x855; void*x856; void*x857; void*x858; void*x859; const void*x860; void*x861; void*x862; void*x863; out const void*x864; short x865; void*x866; unsigned short x867; void*x868; out const void*x869; short x870; void*x871; out const void*x872; out void*x873; void*x874; void*x875; float x876; const void*x877; void*x878; void*x879; void*x880; out const void*x881; void*x882; unsigned short x883; void*x884; out const void*x885; short x886; void*x887; out const void*x888; out void*x889; void*x890; void*x891; void*x892; void*x893; void*x894; void*x895; void*x896; void*x897; void*x898; void*x899; void*x900; void*x901; void*x902; void*x903; void*x904; void*x905; void*x906; void*x907; long long x908; void*x909; void*x910; void*x911; void*x912; void*x913; void*x914; void*x915; void*x916; unsigned short x917; void*x918; short x919; void*x920; void*x921; void*x922; void*x923; unsigned long x924; int x925; unsigned int x926/* : ? */; const void*x927; const void*x928; void*x929; void*x930; const int x931; void x932; void*x933; void*x934; void*x935; void*x936; const void*x937; void*x938; void*x939; void*x940; out const void*x941; short x942; void*x943; int x944; void*x945; void*x946; in void*x947; short x948; unsigned short x949; void*x950; out const void*x951; void*x952; unsigned int x953; void*x954; float x955; const void*x956; void*x957; void*x958; void*x959; out const void*x960; void*x961; int x962; void*x963; void*x964; in void*x965; short x966; unsigned short x967; void*x968; out const void*x969; void*x970; unsigned int x971; void*x972; void*x973; void*x974; void*x975; void*x976; void*x977; void*x978; void*x979; void*x980; void*x981; void*x982; void*x983; void*x984; void*x985; void*x986; void*x987; void*x988; void*x989; void*x990; void*x991; void*x992; void*x993; void*x994; void*x995; void*x996; void*x997; unsigned short x998; void*x999; short x1000; void*x1001; void*x1002; void*x1003; void*x1004; unsigned long x1005; int x1006; unsigned int x1007/* : ? */; const void*x1008; const void*x1009; void*x1010; void*x1011; const int x1012; void x1013; void*x1014; void*x1015; void*x1016; void*x1017; const void*x1018; void*x1019; void*x1020; void*x1021; out const void*x1022; short x1023; void*x1024; unsigned short x1025; void*x1026; unsigned int x1027/* : ? */; void*x1028; void*x1029; BOOL x1030; void*x1031; short x1032; void*x1033; float x1034; const void*x1035; void*x1036; void*x1037; void*x1038; out const void*x1039; void*x1040; unsigned short x1041; void*x1042; unsigned int x1043/* : ? */; void*x1044; void*x1045; BOOL x1046; void*x1047; short x1048; void*x1049; void*x1050; void*x1051; void*x1052; void*x1053; void*x1054; void*x1055; void*x1056; void*x1057; void*x1058; void*x1059; void*x1060; void*x1061; void*x1062; void*x1063; void*x1064; void*x1065; void*x1066; void*x1067; void*x1068; void*x1069; void*x1070; void*x1071; void*x1072; void*x1073; void*x1074; void*x1075; void*x1076; void*x1077; void*x1078; void*x1079; void*x1080; void*x1081; void*x1082; unsigned short x1083; void*x1084; short x1085; void*x1086; void*x1087; void*x1088; void*x1089; unsigned long x1090; int x1091; unsigned int x1092/* : ? */; const void*x1093; const void*x1094; void*x1095; void*x1096; const int x1097; void x1098; void*x1099; void*x1100; void*x1101; void*x1102; const void*x1103; void*x1104; void*x1105; void*x1106; out const void*x1107; short x1108; void*x1109; void*x1110; void*x1111; double x1112; int x1113; void*x1114; void*x1115; long x1116; void*x1117; void*x1118; void*x1119; const void*x1120; unsigned int x1121; void*x1122; float x1123; const void*x1124; void*x1125; void*x1126; void*x1127; out const void*x1128; void*x1129; void*x1130; void*x1131; double x1132; int x1133; void*x1134; void*x1135; long x1136; void*x1137; void*x1138; void*x1139; const void*x1140; unsigned int x1141; void*x1142; void*x1143; void*x1144; void*x1145; void*x1146; void*x1147; void*x1148; void*x1149; void*x1150; void*x1151; void*x1152; void*x1153; void*x1154; void*x1155; void*x1156; void*x1157; void*x1158; void*x1159; void*x1160; void*x1161; void*x1162; void*x1163; void*x1164; void*x1165; in void*x1166; void*x1167; void*x1168; void*x1169; void*x1170; void*x1171; void*x1172; void*x1173; void*x1174; void*x1175; out void*x1176; const void*x1177; int x1178; void*x1179; void*x1180; void*x1181; void*x1182; void*x1183; void*x1184; void*x1185; int x1186; void*x1187; out void*x1188; in void*x1189; oneway void*x1190; int x1191; void*x1192; void*x1193; void*x1194; void*x1195; void*x1196; unsigned char x1197; void*x1198; out void*x1199; in void*x1200; void*x1201; void*x1202; const void*x1203; out void*x1204; long x1205; void*x1206; long x1207; void*x1208; void*x1209; void*x1210; const void*x1211; long doublex1212; void*x1213; void*x1214; void*x1215; long x1216; void*x1217; void*x1218; void*x1219; void*x1220; void*x1221; void*x1222; void*x1223; void*x1224; void*x1225; void*x1226; void*x1227; void*x1228; void*x1229; void*x1230; void*x1231; char *x1232; void*x1233; void*x1234; void*x1235; void*x1236; void*x1237; void*x1238; void*x1239; void*x1240; void*x1241; void*x1242; void*x1243; void*x1244; void*x1245; void*x1246; void*x1247; void*x1248; void*x1249; void*x1250; unsigned short x1251; void*x1252; short x1253; void*x1254; void*x1255; void*x1256; void*x1257; unsigned long x1258; int x1259; unsigned int x1260/* : ? */; const void*x1261; const void*x1262; void*x1263; void*x1264; const int x1265; void x1266; void*x1267; void*x1268; void*x1269; void*x1270; const void*x1271; void*x1272; void*x1273; void*x1274; out const void*x1275; short x1276; void*x1277; int x1278; const void*x1279; const void*x1280; float x1281; float x1282; int x1283; BOOL x1284; void*x1285; float x1286; const void*x1287; void*x1288; void*x1289; void*x1290; out const void*x1291; void*x1292; int x1293; const void*x1294; const void*x1295; float x1296; float x1297; int x1298; BOOL x1299; void*x1300; void*x1301; void*x1302; void*x1303; void*x1304; void*x1305; void*x1306; void*x1307; void*x1308; void*x1309; void*x1310; void*x1311; void*x1312; void*x1313; void*x1314; void*x1315; void*x1316; void*x1317; void*x1318; void*x1319; void*x1320; void*x1321; void*x1322; void*x1323; void*x1324; void*x1325; void*x1326; void*x1327; void*x1328; void*x1329; void*x1330; void*x1331; char *x1332; void*x1333; void*x1334; void*x1335; const in int x1336; in void*x1337; SEL x1338; void*x1339; void*x1340; in const void*x1341; BOOL x1342; out void*x1343; in int x1344; void*x1345; void*x1346; double x1347; void*x1348; float x1349; int x1350; long x1351; void*x1352; const void*x1353; void*x1354; void*x1355; void*x1356; void*x1357; SEL x1358; void*x1359; void*x1360; void*x1361; void*x1362; void*x1363; void*x1364; short x1365; int x1366; in void*x1367; void*x1368; void*x1369; void x1370; out int x1371; double x1372; char *x1373; void*x1374; void*x1375; char *x1376; void*x1377; void*x1378; void x1379; out int x1380; double x1381; char *x1382; void*x1383; void*x1384; void*x1385; void*x1386; void*x1387; void*x1388; void*x1389; void*x1390; void*x1391; void*x1392; void*x1393; void*x1394; void*x1395; void*x1396; void*x1397; void*x1398; void*x1399; void*x1400; void*x1401; void*x1402; void*x1403; void*x1404; void*x1405; void*x1406; void*x1407; void*x1408; void*x1409; void*x1410; void*x1411; void*x1412; void*x1413; void*x1414; void*x1415; unsigned short x1416; void*x1417; short x1418; void*x1419; void*x1420; void*x1421; void*x1422; unsigned long x1423; int x1424; unsigned int x1425/* : ? */; const void*x1426; const void*x1427; void*x1428; void*x1429; const int x1430; void x1431; void*x1432; void*x1433; void*x1434; void*x1435; const void*x1436; void*x1437; void*x1438; void*x1439; out const void*x1440; short x1441; void*x1442; unsigned short x1443; void*x1444; out const void*x1445; void*x1446; int x1447; void*x1448; void*x1449; unsigned int x1450; void*x1451; float x1452; const void*x1453; void*x1454; void*x1455; void*x1456; out const void*x1457; void*x1458; unsigned short x1459; void*x1460; out const void*x1461; void*x1462; int x1463; void*x1464; void*x1465; unsigned int x1466; void*x1467; void*x1468; void*x1469; void*x1470; void*x1471; void*x1472; void*x1473; void*x1474; void*x1475; void*x1476; void*x1477; void*x1478; void*x1479; void*x1480; void*x1481; void*x1482; void*x1483; void*x1484; void*x1485; void*x1486; void*x1487; void*x1488; void*x1489; void*x1490; void*x1491; void*x1492; void*x1493; void*x1494; void*x1495; void*x1496; void*x1497; void*x1498; unsigned short x1499; void*x1500; short x1501; void*x1502; void*x1503; void*x1504; void*x1505; unsigned long x1506; int x1507; unsigned int x1508/* : ? */; const void*x1509; const void*x1510; void*x1511; void*x1512; const int x1513; void x1514; void*x1515; void*x1516; void*x1517; void*x1518; const void*x1519; void*x1520; void*x1521; void*x1522; out const void*x1523; short x1524; void*x1525; void*x1526; void*x1527; void*x1528; void*x1529; unsigned char x1530; void*x1531; in void*x1532; void*x1533; const void*x1534; unsigned int x1535; void*x1536; float x1537; const void*x1538; void*x1539; void*x1540; void*x1541; out const void*x1542; void*x1543; void*x1544; void*x1545; void*x1546; void*x1547; unsigned char x1548; void*x1549; in void*x1550; void*x1551; const void*x1552; unsigned int x1553; void*x1554; void*x1555; void*x1556; void*x1557; void*x1558; void*x1559; void*x1560; void*x1561; void*x1562; void*x1563; void*x1564; void*x1565; void*x1566; void*x1567; void*x1568; void*x1569; void*x1570; void*x1571; void*x1572; void*x1573; void*x1574; void*x1575; void*x1576; void*x1577; void*x1578; void*x1579; void*x1580; void*x1581; unsigned short x1582; void*x1583; short x1584; void*x1585; void*x1586; void*x1587; void*x1588; unsigned long x1589; int x1590; unsigned int x1591/* : ? */; const void*x1592; const void*x1593; void*x1594; void*x1595; const int x1596; void x1597; void*x1598; void*x1599; void*x1600; void*x1601; const void*x1602; void*x1603; void*x1604; void*x1605; out const void*x1606; short x1607; void*x1608; void*x1609; void*x1610; short x1611; int x1612; BOOL x1613; unsigned long x1614; int x1615; unsigned int x1616/* : ? */; const void*x1617; const void*x1618; void*x1619; float x1620; const void*x1621; void*x1622; void*x1623; void*x1624; out const void*x1625; void*x1626; void*x1627; void*x1628; short x1629; int x1630; BOOL x1631; unsigned long x1632; int x1633; unsigned int x1634/* : ? */; const void*x1635; const void*x1636; void*x1637; void*x1638; void*x1639; void*x1640; void*x1641; void*x1642; void*x1643; void*x1644; void*x1645; void*x1646; void*x1647; void*x1648; void*x1649; void*x1650; void*x1651; void*x1652; void*x1653; void*x1654; void*x1655; void*x1656; void*x1657; void*x1658; void*x1659; void*x1660; void*x1661; void*x1662; unsigned int x1663; void*x1664; unsigned short x1665; void*x1666; short x1667; void*x1668; void*x1669; void*x1670; void*x1671; unsigned long x1672; int x1673; unsigned int x1674/* : ? */; const void*x1675; const void*x1676; void*x1677; void*x1678; const int x1679; void x1680; void*x1681; void*x1682; void*x1683; void*x1684; const void*x1685; void*x1686; void*x1687; void*x1688; out const void*x1689; short x1690; void*x1691; void*x1692; void*x1693; long x1694; void*x1695; BOOL x1696; BOOL x1697; out void*x1698; in void*x1699; void*x1700; unsigned int x1701; void*x1702; float x1703; const void*x1704; void*x1705; void*x1706; void*x1707; out const void*x1708; void*x1709; void*x1710; void*x1711; long x1712; void*x1713; BOOL x1714; BOOL x1715; out void*x1716; in void*x1717; void*x1718; unsigned int x1719; void*x1720; void*x1721; void*x1722; void*x1723; void*x1724; void*x1725; void*x1726; void*x1727; void*x1728; void*x1729; void*x1730; void*x1731; void*x1732; void*x1733; void*x1734; void*x1735; void*x1736; void*x1737; void*x1738; void*x1739; void*x1740; void*x1741; void*x1742; void*x1743; unsigned short x1744; void*x1745; short x1746; void*x1747; void*x1748; void*x1749; void*x1750; unsigned long x1751; int x1752; unsigned int x1753/* : ? */; const void*x1754; const void*x1755; void*x1756; void*x1757; const int x1758; void x1759; void*x1760; void*x1761; void*x1762; void*x1763; const void*x1764; void*x1765; void*x1766; void*x1767; out const void*x1768; short x1769; void*x1770; void*x1771; int x1772; void*x1773; in void*x1774; short x1775; short x1776; void*x1777; unsigned int x1778; void*x1779; float x1780; const void*x1781; void*x1782; void*x1783; void*x1784; out const void*x1785; void*x1786; void*x1787; int x1788; void*x1789; in void*x1790; short x1791; short x1792; void*x1793; unsigned int x1794; void*x1795; void*x1796; void*x1797; void*x1798; void*x1799; void*x1800; void*x1801; void*x1802; void*x1803; void*x1804; void*x1805; void*x1806; void*x1807; void*x1808; void*x1809; void*x1810; void*x1811; void*x1812; void*x1813; void*x1814; void*x1815; void*x1816; void*x1817; void*x1818; void*x1819; void*x1820; void*x1821; void*x1822; void*x1823; void*x1824; void*x1825; void*x1826; void*x1827; void*x1828; unsigned short x1829; void*x1830; short x1831; void*x1832; void*x1833; void*x1834; void*x1835; unsigned long x1836; int x1837; unsigned int x1838/* : ? */; const void*x1839; const void*x1840; void*x1841; void*x1842; const int x1843; void x1844; void*x1845; void*x1846; void*x1847; void*x1848; const void*x1849; void*x1850; void*x1851; void*x1852; out const void*x1853; short x1854; void*x1855; unsigned int x1856; void*x1857; void*x1858; void*x1859; void*x1860; unsigned char x1861; void*x1862; void*x1863; void*x1864; void*x1865; const void*x1866; void*x1867; float x1868; const void*x1869; void*x1870; void*x1871; void*x1872; out const void*x1873; void*x1874; unsigned int x1875; void*x1876; void*x1877; void*x1878; void*x1879; unsigned char x1880; void*x1881; void*x1882; void*x1883; void*x1884; const void*x1885; void*x1886; void*x1887; void*x1888; void*x1889; void*x1890; void*x1891; void*x1892; void*x1893; void*x1894; void*x1895; void*x1896; void*x1897; void*x1898; void*x1899; void*x1900; void*x1901; void*x1902; void*x1903; void*x1904; void*x1905; void*x1906; void*x1907; void*x1908; void*x1909; void*x1910; void*x1911; void*x1912; void*x1913; unsigned short x1914; void*x1915; short x1916; void*x1917; void*x1918; void*x1919; void*x1920; unsigned long x1921; int x1922; unsigned int x1923/* : ? */; const void*x1924; const void*x1925; void*x1926; void*x1927; const int x1928; void x1929; void*x1930; void*x1931; void*x1932; void*x1933; const void*x1934; void*x1935; void*x1936; void*x1937; out const void*x1938; short x1939; void*x1940; bycopy float x1941; float x1942; int x1943; BOOL x1944; void*x1945; unsigned int x1946; void*x1947; void*x1948; out const void*x1949; void*x1950; float x1951; const void*x1952; void*x1953; void*x1954; void*x1955; out const void*x1956; void*x1957; bycopy float x1958; float x1959; int x1960; BOOL x1961; void*x1962; unsigned int x1963; void*x1964; void*x1965; out const void*x1966; void*x1967; void*x1968; void*x1969; void*x1970; void*x1971; void*x1972; void*x1973; void*x1974; void*x1975; void*x1976; void*x1977; void*x1978; void*x1979; void*x1980; void*x1981; void*x1982; void*x1983; void*x1984; void*x1985; void*x1986; void*x1987; void*x1988; void*x1989; void*x1990; void*x1991; void*x1992; void*x1993; void*x1994; unsigned short x1995; void*x1996; short x1997; void*x1998; void*x1999; void*x2000; void*x2001; unsigned long x2002; int x2003; unsigned int x2004/* : ? */; const void*x2005; const void*x2006; void*x2007; void*x2008; const int x2009; void x2010; void*x2011; void*x2012; void*x2013; void*x2014; const void*x2015; void*x2016; void*x2017; void*x2018; out const void*x2019; short x2020; void*x2021; int x2022; const void*x2023; const void*x2024; float x2025; float x2026; int x2027; BOOL x2028; long doublex2029; void*x2030; void x2031; int x2032; BOOL x2033; void*x2034; void*x2035; float x2036; const void*x2037; void*x2038; void*x2039; void*x2040; out const void*x2041; void*x2042; int x2043; const void*x2044; const void*x2045; float x2046; float x2047; int x2048; BOOL x2049; long doublex2050; void*x2051; void x2052; int x2053; BOOL x2054; void*x2055; void*x2056; void*x2057; void*x2058; void*x2059; void*x2060; void*x2061; void*x2062; void*x2063; void*x2064; void*x2065; void*x2066; void x2067; void*x2068; void*x2069; void*x2070; void*x2071; void*x2072; void*x2073; void*x2074; void*x2075; unsigned short x2076; void*x2077; short x2078; void*x2079; void*x2080; void*x2081; void*x2082; unsigned long x2083; int x2084; unsigned int x2085/* : ? */; const void*x2086; const void*x2087; void*x2088; void*x2089; const int x2090; void x2091; void*x2092; void*x2093; void*x2094; void*x2095; const void*x2096; void*x2097; void*x2098; void*x2099; out const void*x2100; short x2101; void*x2102; unsigned short x2103; void*x2104; unsigned int x2105/* : ? */; void*x2106; void*x2107; BOOL x2108; void*x2109; short x2110; void*x2111; float x2112; const void*x2113; void*x2114; void*x2115; void*x2116; out const void*x2117; void*x2118; unsigned short x2119; void*x2120; unsigned int x2121/* : ? */; void*x2122; void*x2123; BOOL x2124; void*x2125; short x2126; void*x2127; void*x2128; void*x2129; void*x2130; void*x2131; void*x2132; void*x2133; void*x2134; void*x2135; void*x2136; void*x2137; void*x2138; void*x2139; void*x2140; void*x2141; void*x2142; void*x2143; void*x2144; void*x2145; void*x2146; void*x2147; void*x2148; void*x2149; void*x2150; void*x2151; void*x2152; void*x2153; void*x2154; void*x2155; void*x2156; void*x2157; void*x2158; void*x2159; void*x2160; char *x2161; void*x2162; void*x2163; void*x2164; const in int x2165; in void*x2166; SEL x2167; void*x2168; void*x2169; in const void*x2170; BOOL x2171; out void*x2172; in int x2173; void*x2174; void*x2175; double x2176; void*x2177; float x2178; int x2179; long x2180; void*x2181; const void*x2182; void*x2183; void*x2184; void*x2185; void*x2186; SEL x2187; void*x2188; void*x2189; void*x2190; void*x2191; void*x2192; void*x2193; short x2194; int x2195; in void*x2196; void*x2197; void*x2198; void x2199; out int x2200; double x2201; char *x2202; void*x2203; void*x2204; char *x2205; void*x2206; void*x2207; void x2208; out int x2209; double x2210; char *x2211; void*x2212; void*x2213; void*x2214; void*x2215; void*x2216; void*x2217; void*x2218; void*x2219; void*x2220; void*x2221; void*x2222; void*x2223; void*x2224; void*x2225; void*x2226; void*x2227; void*x2228; void*x2229; void*x2230; void*x2231; void*x2232; void*x2233; void*x2234; void*x2235; void*x2236; void*x2237; void*x2238; void*x2239; void*x2240; void*x2241; void*x2242; void*x2243; void*x2244; void*x2245; unsigned short x2246; void*x2247; short x2248; void*x2249; void*x2250; void*x2251; void*x2252; unsigned long x2253; int x2254; unsigned int x2255/* : ? */; const void*x2256; const void*x2257; void*x2258; void*x2259; const int x2260; void x2261; void*x2262; void*x2263; void*x2264; void*x2265; const void*x2266; void*x2267; void*x2268; void*x2269; out const void*x2270; short x2271; void*x2272; void*x2273; void*x2274; out void*x2275; in double x2276; void*x2277; void*x2278; int x2279; out in void*x2280; float x2281; const void*x2282; void*x2283; void*x2284; void*x2285; out const void*x2286; void*x2287; void*x2288; void*x2289; out void*x2290; in double x2291; void*x2292; void*x2293; int x2294; out in void*x2295; void*x2296; void*x2297; void*x2298; void*x2299; void*x2300; void*x2301; void*x2302; void*x2303; void*x2304; void*x2305; void*x2306; void*x2307; void*x2308; void*x2309; void*x2310; void*x2311; void*x2312; void*x2313; void*x2314; void*x2315; void*x2316; void*x2317; void*x2318; void*x2319; void*x2320; void*x2321; void*x2322; unsigned short x2323; void*x2324; short x2325; void*x2326; void*x2327; void*x2328; void*x2329; unsigned long x2330; int x2331; unsigned int x2332/* : ? */; const void*x2333; const void*x2334; void*x2335; void*x2336; const int x2337; void x2338; void*x2339; void*x2340; void*x2341; void*x2342; const void*x2343; void*x2344; void*x2345; void*x2346; out const void*x2347; short x2348; void*x2349; void*x2350; void*x2351; void*x2352; void*x2353; unsigned char x2354; void*x2355; in void*x2356; void*x2357; const void*x2358; unsigned int x2359; void*x2360; float x2361; const void*x2362; void*x2363; void*x2364; void*x2365; out const void*x2366; void*x2367; void*x2368; void*x2369; void*x2370; void*x2371; unsigned char x2372; void*x2373; in void*x2374; void*x2375; const void*x2376; unsigned int x2377; void*x2378; void*x2379; void*x2380; void*x2381; void*x2382; void*x2383; void*x2384; void*x2385; void*x2386; void*x2387; void*x2388; void*x2389; void*x2390; void*x2391; unsigned int x2392; void*x2393; oneway void*x2394; int x2395; void*x2396; void*x2397; void*x2398; void*x2399; void*x2400; unsigned char x2401; void*x2402; out void*x2403; in void*x2404; void*x2405; void*x2406; const void*x2407; out void*x2408; long x2409; void*x2410; long x2411; void*x2412; void*x2413; void*x2414; const void*x2415; unsigned int x2416; void*x2417; in void*x2418; void*x2419; void*x2420; void*x2421; void*x2422; const void*x2423; void*x2424; void*x2425; BOOL x2426; void*x2427; void*x2428; void*x2429; int x2430; void*x2431; void x2432; void*x2433; void*x2434; void*x2435; void*x2436; void*x2437; const void*x2438; void*x2439; void*x2440; in void*x2441; short x2442; void*x2443; int x2444; void*x2445; void*x2446; void*x2447; int x2448; void*x2449; out void*x2450; in void*x2451; int x2452; void*x2453; in void*x2454; void*x2455; void*x2456; void*x2457; void*x2458; void*x2459; void*x2460; char *x2461; void*x2462; void*x2463; void*x2464; void*x2465; void*x2466; void*x2467; void*x2468; void*x2469; void*x2470; void*x2471; void*x2472; void*x2473; void*x2474; void*x2475; void*x2476; void*x2477; void*x2478; id x2479; void*x2480; void*x2481; void*x2482; void*x2483; void*x2484; void*x2485; void*x2486; void*x2487; unsigned short x2488; void*x2489; short x2490; void*x2491; void*x2492; void*x2493; void*x2494; unsigned long x2495; int x2496; unsigned int x2497/* : ? */; const void*x2498; const void*x2499; void*x2500; void*x2501; const int x2502; void x2503; void*x2504; void*x2505; void*x2506; void*x2507; const void*x2508; void*x2509; void*x2510; void*x2511; out const void*x2512; short x2513; void*x2514; unsigned short x2515; void*x2516; out const void*x2517; void*x2518; int x2519; void*x2520; void*x2521; unsigned int x2522; void*x2523; float x2524; const void*x2525; void*x2526; void*x2527; void*x2528; out const void*x2529; void*x2530; unsigned short x2531; void*x2532; out const void*x2533; void*x2534; int x2535; void*x2536; void*x2537; unsigned int x2538; void*x2539; void*x2540; void*x2541; void*x2542; void*x2543; void*x2544; void*x2545; void*x2546; void*x2547; void*x2548; void*x2549; void*x2550; void*x2551; void*x2552; void*x2553; void*x2554; void*x2555; void*x2556; void*x2557; void*x2558; void*x2559; void*x2560; void*x2561; void*x2562; void*x2563; void*x2564; void*x2565; void*x2566; void*x2567; void*x2568; void*x2569; void*x2570; unsigned short x2571; void*x2572; short x2573; void*x2574; void*x2575; void*x2576; void*x2577; unsigned long x2578; int x2579; unsigned int x2580/* : ? */; const void*x2581; const void*x2582; void*x2583; void*x2584; const int x2585; void x2586; void*x2587; void*x2588; void*x2589; void*x2590; const void*x2591; void*x2592; void*x2593; void*x2594; out const void*x2595; short x2596; void*x2597; void*x2598; void*x2599; void*x2600; void*x2601; out void*x2602; in double x2603; void*x2604; void*x2605; int x2606; out in void*x2607; float x2608; const void*x2609; void*x2610; void*x2611; void*x2612; out const void*x2613; void*x2614; void*x2615; void*x2616; void*x2617; void*x2618; out void*x2619; in double x2620; void*x2621; void*x2622; int x2623; out in void*x2624; void*x2625; void*x2626; void*x2627; void*x2628; void*x2629; void*x2630; void*x2631; void*x2632; void*x2633; void*x2634; void*x2635; void*x2636; void*x2637; void*x2638; void*x2639; void*x2640; void*x2641; void*x2642; void*x2643; void*x2644; void*x2645; void*x2646; void*x2647; void*x2648; void*x2649; short x2650; long x2651; int x2652; double x2653; void*x2654; void*x2655; out out void*x2656; void*x2657; const void*x2658; const out void*x2659; bycopy const int x2660; void*x2661; in void*x2662; void*x2663; void*x2664; int x2665; out in SEL x2666; void*x2667; out bycopy const int x2668; void*x2669; in void*x2670; void*x2671; void*x2672; int x2673; out in SEL x2674; short x2675; void*x2676; void*x2677; const void*x2678; unsigned short x2679; in void*x2680; void*x2681; short x2682; void*x2683; out void*x2684; SEL x2685; void*x2686; in double x2687; unsigned short x2688; in void*x2689; void*x2690; short x2691; void*x2692; out void*x2693; SEL x2694; double x2695; void*x2696; const void*x2697; void*x2698; int x2699; out in SEL x2700; void*x2701; void*x2702; void*x2703; void*x2704; void*x2705; void*x2706; void*x2707; void*x2708; void*x2709; void*x2710; void*x2711; void*x2712; void*x2713; void*x2714; void*x2715; void*x2716; void*x2717; void*x2718; void*x2719; unsigned short x2720; void*x2721; short x2722; void*x2723; void*x2724; void*x2725; void*x2726; unsigned long x2727; int x2728; unsigned int x2729/* : ? */; const void*x2730; const void*x2731; void*x2732; void*x2733; const int x2734; void x2735; void*x2736; void*x2737; void*x2738; void*x2739; const void*x2740; void*x2741; void*x2742; void*x2743; out const void*x2744; short x2745; void*x2746; unsigned short x2747; void*x2748; out const void*x2749; void*x2750; int x2751; void*x2752; void*x2753; unsigned int x2754; void*x2755; float x2756; const void*x2757; void*x2758; void*x2759; void*x2760; out const void*x2761; void*x2762; unsigned short x2763; void*x2764; out const void*x2765; void*x2766; int x2767; void*x2768; void*x2769; unsigned int x2770; void*x2771; void*x2772; void*x2773; void*x2774; void*x2775; void*x2776; void*x2777; void*x2778; void*x2779; void*x2780; void*x2781; void*x2782; void*x2783; void*x2784; void*x2785; void*x2786; void*x2787; void*x2788; void*x2789; void*x2790; void*x2791; void*x2792; void*x2793; void*x2794; void*x2795; void*x2796; void*x2797; void*x2798; void*x2799; void*x2800; void*x2801; void*x2802; void*x2803; int x2804; long x2805; long x2806; unsigned char x2807; void*x2808; void*x2809; in void*x2810; void*x2811; void*x2812; out unsigned short x2813; int x2814; void*x2815; void*x2816; SEL x2817; out const int x2818; void*x2819; in void*x2820; void*x2821; void*x2822; int x2823; out in SEL x2824; short x2825; BOOL x2826; const void*x2827; void*x2828; in SEL x2829; void*x2830; int x2831; void*x2832; void*x2833; void*x2834; const void*x2835; in short x2836; int x2837; void*x2838; int x2839; out in unsigned char x2840; out out const double x2841; int x2842; in void*x2843; void*x2844; out const SEL x2845; void*x2846; void*x2847; void*x2848; void*x2849; void*x2850; void*x2851; void*x2852; void*x2853; void*x2854; void*x2855; void*x2856; void*x2857; void*x2858; void*x2859; void*x2860; void*x2861; void*x2862; void*x2863; void*x2864; void*x2865; void*x2866; void*x2867; void*x2868; void*x2869; void*x2870; void*x2871; void*x2872; void*x2873; void*x2874; void*x2875; void*x2876; void*x2877; void*x2878; void*x2879; unsigned short x2880; void*x2881; short x2882; void*x2883; void*x2884; void*x2885; void*x2886; unsigned long x2887; int x2888; unsigned int x2889/* : ? */; const void*x2890; const void*x2891; void*x2892; void*x2893; const int x2894; void x2895; void*x2896; void*x2897; void*x2898; void*x2899; const void*x2900; void*x2901; void*x2902; void*x2903; out const void*x2904; short x2905; void*x2906; bycopy float x2907; float x2908; int x2909; BOOL x2910; void*x2911; unsigned int x2912; void*x2913; void*x2914; out const void*x2915; void*x2916; float x2917; const void*x2918; void*x2919; void*x2920; void*x2921; out const void*x2922; void*x2923; bycopy float x2924; float x2925; int x2926; BOOL x2927; void*x2928; unsigned int x2929; void*x2930; void*x2931; out const void*x2932; void*x2933; void*x2934; void*x2935; void*x2936; void*x2937; void*x2938; void*x2939; void*x2940; void*x2941; void*x2942; void*x2943; void*x2944; void*x2945; void*x2946; void*x2947; void*x2948; void*x2949; void*x2950; void*x2951; void*x2952; void*x2953; void*x2954; void*x2955; void*x2956; void*x2957; void*x2958; unsigned char x2959; void*x2960; unsigned short x2961; void*x2962; short x2963; void*x2964; void*x2965; void*x2966; void*x2967; unsigned long x2968; int x2969; unsigned int x2970/* : ? */; const void*x2971; const void*x2972; void*x2973; void*x2974; const int x2975; void x2976; void*x2977; void*x2978; void*x2979; void*x2980; const void*x2981; void*x2982; void*x2983; void*x2984; out const void*x2985; short x2986; void*x2987; int x2988; void*x2989; out const void*x2990; unsigned int x2991; void*x2992; void*x2993; out const void*x2994; void*x2995; float x2996; const void*x2997; void*x2998; void*x2999; void*x3000; out const void*x3001; void*x3002; int x3003; void*x3004; out const void*x3005; unsigned int x3006; void*x3007; void*x3008; out const void*x3009; void*x3010; void*x3011; void*x3012; void*x3013; void*x3014; void*x3015; void*x3016; void*x3017; void*x3018; void*x3019; void*x3020; void*x3021; void*x3022; void*x3023; void*x3024; void*x3025; void*x3026; void*x3027; void*x3028; void*x3029; void*x3030; void*x3031; void*x3032; void*x3033; void*x3034; void*x3035; void*x3036; void*x3037; unsigned char x3038; void*x3039; unsigned short x3040; void*x3041; short x3042; void*x3043; void*x3044; void*x3045; void*x3046; unsigned long x3047; int x3048; unsigned int x3049/* : ? */; const void*x3050; const void*x3051; void*x3052; void*x3053; const int x3054; void x3055; void*x3056; void*x3057; void*x3058; void*x3059; const void*x3060; void*x3061; void*x3062; void*x3063; out const void*x3064; short x3065; void*x3066; int x3067; void*x3068; out const void*x3069; unsigned int x3070; void*x3071; void*x3072; out const void*x3073; void*x3074; float x3075; const void*x3076; void*x3077; void*x3078; void*x3079; out const void*x3080; void*x3081; int x3082; void*x3083; out const void*x3084; unsigned int x3085; void*x3086; void*x3087; out const void*x3088; void*x3089; void*x3090; void*x3091; void*x3092; void*x3093; void*x3094; void*x3095; void*x3096; void*x3097; void*x3098; void*x3099; void*x3100; void*x3101; void*x3102; void*x3103; void*x3104; void*x3105; void*x3106; void*x3107; void*x3108; void*x3109; void*x3110; void*x3111; void*x3112; void*x3113; void*x3114; void*x3115; void*x3116; unsigned char x3117; void*x3118; unsigned short x3119; void*x3120; short x3121; void*x3122; void*x3123; void*x3124; void*x3125; unsigned long x3126; int x3127; unsigned int x3128/* : ? */; const void*x3129; const void*x3130; void*x3131; void*x3132; const int x3133; void x3134; void*x3135; void*x3136; void*x3137; void*x3138; const void*x3139; void*x3140; void*x3141; void*x3142; out const void*x3143; short x3144; void*x3145; int x3146; void*x3147; out const void*x3148; unsigned int x3149; void*x3150; void*x3151; out const void*x3152; void*x3153; float x3154; const void*x3155; void*x3156; void*x3157; void*x3158; out const void*x3159; void*x3160; int x3161; void*x3162; out const void*x3163; unsigned int x3164; void*x3165; void*x3166; out const void*x3167; void*x3168; void*x3169; void*x3170; void*x3171; void*x3172; void*x3173; void*x3174; void*x3175; void*x3176; void*x3177; void*x3178; void*x3179; void*x3180; void*x3181; void*x3182; void*x3183; void*x3184; void*x3185; void*x3186; void*x3187; void*x3188; void*x3189; void*x3190; void*x3191; void*x3192; void*x3193; void*x3194; void*x3195; void*x3196; unsigned short x3197; void*x3198; short x3199; void*x3200; void*x3201; void*x3202; void*x3203; unsigned long x3204; int x3205; unsigned int x3206/* : ? */; const void*x3207; const void*x3208; void*x3209; void*x3210; const int x3211; void x3212; void*x3213; void*x3214; void*x3215; void*x3216; const void*x3217; void*x3218; void*x3219; void*x3220; out const void*x3221; short x3222; void*x3223; oneway out int x3224; BOOL x3225; void*x3226; void*x3227; void*x3228; void*x3229; out short x3230; void*x3231; float x3232; const void*x3233; void*x3234; void*x3235; void*x3236; out const void*x3237; void*x3238; oneway out int x3239; BOOL x3240; void*x3241; void*x3242; void*x3243; void*x3244; out short x3245; void*x3246; void*x3247; void*x3248; void*x3249; void*x3250; void*x3251; void*x3252; void*x3253; void*x3254; void*x3255; void*x3256; void*x3257; void*x3258; void*x3259; void*x3260; void*x3261; void*x3262; void*x3263; void*x3264; void*x3265; void*x3266; void*x3267; void*x3268; void*x3269; void*x3270; void*x3271; void*x3272; void*x3273; void*x3274; void*x3275; unsigned char x3276; void*x3277; unsigned short x3278; void*x3279; short x3280; void*x3281; void*x3282; void*x3283; void*x3284; unsigned long x3285; int x3286; unsigned int x3287/* : ? */; const void*x3288; const void*x3289; void*x3290; void*x3291; const int x3292; void x3293; void*x3294; void*x3295; void*x3296; void*x3297; const void*x3298; void*x3299; void*x3300; void*x3301; out const void*x3302; short x3303; void*x3304; int x3305; void*x3306; out const void*x3307; unsigned int x3308; void*x3309; void*x3310; out const void*x3311; void*x3312; float x3313; const void*x3314; void*x3315; void*x3316; void*x3317; out const void*x3318; void*x3319; int x3320; void*x3321; out const void*x3322; unsigned int x3323; void*x3324; void*x3325; out const void*x3326; void*x3327; void*x3328; void*x3329; void*x3330; void*x3331; void*x3332; void*x3333; void*x3334; void*x3335; void*x3336; void*x3337; void*x3338; void*x3339; void*x3340; void*x3341; void*x3342; void*x3343; void*x3344; void*x3345; void*x3346; void*x3347; void*x3348; void*x3349; void*x3350; void*x3351; void*x3352; void*x3353; void*x3354; void*x3355; void x3356; void*x3357; void*x3358; id x3359; void*x3360; SEL x3361; void*x3362; id x3363; void*x3364; void*x3365; unsigned short x3366; void*x3367; void*x3368; void*x3369; void*x3370; double x3371; void*x3372; const void*x3373; void*x3374; void*x3375; id x3376; void*x3377; inout unsigned short x3378; void*x3379; const void*x3380; void*x3381; void*x3382; void*x3383; void*x3384; bool x3385; void*x3386; void*x3387; bool x3388; void*x3389; void*x3390; id x3391; void*x3392; void*x3393; unsigned short x3394; void*x3395; bycopy unsigned int x3396/* : ? */; void*x3397; void*x3398; BOOL x3399; void*x3400; void*x3401; void*x3402; void*x3403; id x3404; void*x3405; void*x3406; void x3407; id x3408; void*x3409; id x3410; void*x3411; void*x3412; void*x3413; void*x3414; void*x3415; void*x3416; void*x3417; void*x3418; void*x3419; void*x3420; void*x3421; void*x3422; void*x3423; void*x3424; void*x3425; void*x3426; void*x3427; void*x3428; void*x3429; void*x3430; void*x3431; void*x3432; void*x3433; void*x3434; void*x3435; void*x3436; void*x3437; void*x3438; void*x3439; void*x3440; void*x3441; void*x3442; void*x3443; void*x3444; void*x3445; id x3446; void*x3447; unsigned short x3448; void*x3449; short x3450; void*x3451; void*x3452; void*x3453; void*x3454; unsigned long x3455; int x3456; unsigned int x3457/* : ? */; const void*x3458; const void*x3459; void*x3460; void*x3461; const void*x3462; void*x3463; void*x3464; void*x3465; out const void*x3466; short x3467; void*x3468; double x3469; double x3470; const void*x3471; short x3472; short x3473; bool x3474; out out void*x3475; void*x3476; unsigned int x3477; void*x3478; float x3479; const void*x3480; void*x3481; void*x3482; void*x3483; out const void*x3484; void*x3485; double x3486; double x3487; const void*x3488; short x3489; short x3490; bool x3491; out out void*x3492; void*x3493; unsigned int x3494; void*x3495; void*x3496; void*x3497; void*x3498; void*x3499; void*x3500; void*x3501; void*x3502; void*x3503; void*x3504; void*x3505; void*x3506; void*x3507; void*x3508; void*x3509; void*x3510; void*x3511; void*x3512; void*x3513; unsigned int x3514; void*x3515; void*x3516; void*x3517; void*x3518; void*x3519; unsigned int x3520/* : ? */; void*x3521; void*x3522; void*x3523; out void*x3524; void*x3525; void*x3526; BOOL x3527; void*x3528; void*x3529; void*x3530; void*x3531; void*x3532; void x3533; void*x3534; void*x3535; void*x3536; in void*x3537; void*x3538; void*x3539; short x3540; void*x3541; void*x3542; void*x3543; void*x3544; void*x3545; short x3546; void*x3547; void*x3548; void*x3549; void*x3550; void*x3551; const void*x3552; void*x3553; void*x3554; void*x3555; void*x3556; void*x3557; void*x3558; BOOL x3559; void*x3560; out void*x3561; void*x3562; void*x3563; in void*x3564; int x3565; void*x3566; void*x3567; void*x3568; void*x3569; void*x3570; const void*x3571; long doublex3572; void*x3573; void*x3574; void*x3575; long x3576; void*x3577; void*x3578; void*x3579; void*x3580; void*x3581; void*x3582; void*x3583; void*x3584; void*x3585; void*x3586; void*x3587; void*x3588; void*x3589; void*x3590; void*x3591; char *x3592; void*x3593; void*x3594; void*x3595; void*x3596; void*x3597; void*x3598; void*x3599; void*x3600; void*x3601; void*x3602; void*x3603; void*x3604; void*x3605; void*x3606; void*x3607; void*x3608; void*x3609; void*x3610; void*x3611; void*x3612; void*x3613; void*x3614; void*x3615; void*x3616; void*x3617; unsigned short x3618; void*x3619; short x3620; void*x3621; void*x3622; void*x3623; void*x3624; unsigned long x3625; int x3626; unsigned int x3627/* : ? */; const void*x3628; const void*x3629; void*x3630; void*x3631; const int x3632; void x3633; void*x3634; void*x3635; void*x3636; void*x3637; const void*x3638; void*x3639; void*x3640; void*x3641; out const void*x3642; short x3643; void*x3644; bycopy float x3645; float x3646; int x3647; BOOL x3648; void*x3649; unsigned int x3650; void*x3651; void*x3652; out const void*x3653; void*x3654; float x3655; const void*x3656; void*x3657; void*x3658; void*x3659; out const void*x3660; void*x3661; bycopy float x3662; float x3663; int x3664; BOOL x3665; void*x3666; unsigned int x3667; void*x3668; void*x3669; out const void*x3670; void*x3671; void*x3672; void*x3673; void*x3674; void*x3675; void*x3676; void*x3677; void*x3678; void*x3679; void*x3680; void*x3681; void*x3682; void*x3683; void*x3684; void*x3685; void*x3686; void*x3687; void*x3688; void*x3689; void*x3690; void*x3691; void*x3692; void*x3693; void*x3694; void*x3695; void*x3696; void*x3697; void*x3698; unsigned short x3699; void*x3700; short x3701; void*x3702; void*x3703; void*x3704; void*x3705; unsigned long x3706; int x3707; unsigned int x3708/* : ? */; const void*x3709; const void*x3710; void*x3711; void*x3712; const int x3713; void x3714; void*x3715; void*x3716; void*x3717; void*x3718; const void*x3719; void*x3720; void*x3721; void*x3722; out const void*x3723; short x3724; void*x3725; unsigned short x3726; void*x3727; unsigned int x3728/* : ? */; void*x3729; void*x3730; BOOL x3731; void*x3732; short x3733; void*x3734; float x3735; const void*x3736; void*x3737; void*x3738; void*x3739; out const void*x3740; void*x3741; unsigned short x3742; void*x3743; unsigned int x3744/* : ? */; void*x3745; void*x3746; BOOL x3747; void*x3748; short x3749; void*x3750; void*x3751; void*x3752; void*x3753; void*x3754; void*x3755; void*x3756; void*x3757; void*x3758; void*x3759; void*x3760; void*x3761; void*x3762; void*x3763; void*x3764; void*x3765; void*x3766; void*x3767; void*x3768; void*x3769; void*x3770; void*x3771; void*x3772; void*x3773; void*x3774; void*x3775; void*x3776; void*x3777; void*x3778; void*x3779; void*x3780; void*x3781; void*x3782; void*x3783; char *x3784; void*x3785; void*x3786; void*x3787; const in int x3788; in void*x3789; SEL x3790; void*x3791; void*x3792; in const void*x3793; BOOL x3794; out void*x3795; in int x3796; void*x3797; void*x3798; double x3799; void*x3800; float x3801; int x3802; long x3803; void*x3804; const void*x3805; void*x3806; void*x3807; void*x3808; void*x3809; SEL x3810; void*x3811; void*x3812; void*x3813; void*x3814; void*x3815; void*x3816; short x3817; int x3818; in void*x3819; void*x3820; void*x3821; void x3822; out int x3823; double x3824; char *x3825; void*x3826; void*x3827; char *x3828; void*x3829; void*x3830; void x3831; out int x3832; double x3833; char *x3834; void*x3835; void*x3836; void*x3837; void*x3838; void*x3839; void*x3840; void*x3841; void*x3842; void*x3843; void*x3844; void*x3845; void*x3846; void*x3847; void*x3848; void*x3849; void*x3850; void*x3851; void*x3852; void*x3853; void*x3854; void*x3855; void*x3856; void*x3857; void*x3858; id x3859; void*x3860; void*x3861; void*x3862; void*x3863; void*x3864; void*x3865; void*x3866; void*x3867; void*x3868; unsigned short x3869; void*x3870; short x3871; void*x3872; void*x3873; void*x3874; void*x3875; unsigned long x3876; int x3877; unsigned int x3878/* : ? */; const void*x3879; const void*x3880; void*x3881; void*x3882; const int x3883; void x3884; void*x3885; void*x3886; void*x3887; void*x3888; const void*x3889; void*x3890; void*x3891; void*x3892; out const void*x3893; short x3894; void*x3895; bycopy float x3896; float x3897; int x3898; BOOL x3899; void*x3900; unsigned int x3901; void*x3902; void*x3903; out const void*x3904; void*x3905; float x3906; const void*x3907; void*x3908; void*x3909; void*x3910; out const void*x3911; void*x3912; bycopy float x3913; float x3914; int x3915; BOOL x3916; void*x3917; unsigned int x3918; void*x3919; void*x3920; out const void*x3921; void*x3922; void*x3923; void*x3924; void*x3925; void*x3926; void*x3927; void*x3928; void*x3929; void*x3930; void*x3931; void*x3932; void*x3933; void*x3934; void*x3935; void*x3936; void*x3937; void*x3938; void*x3939; void*x3940; void*x3941; void*x3942; void*x3943; void*x3944; void*x3945; void*x3946; void*x3947; void*x3948; void*x3949; unsigned short x3950; void*x3951; short x3952; void*x3953; void*x3954; void*x3955; void*x3956; unsigned long x3957; int x3958; unsigned int x3959/* : ? */; const void*x3960; const void*x3961; void*x3962; void*x3963; const int x3964; void x3965; void*x3966; void*x3967; void*x3968; void*x3969; const void*x3970; void*x3971; void*x3972; void*x3973; out const void*x3974; short x3975; void*x3976; void*x3977; void*x3978; short x3979; int x3980; BOOL x3981; unsigned short x3982; void*x3983; out const void*x3984; void*x3985; unsigned int x3986; void*x3987; float x3988; const void*x3989; void*x3990; void*x3991; void*x3992; out const void*x3993; void*x3994; void*x3995; void*x3996; short x3997; int x3998; BOOL x3999; unsigned short x4000; void*x4001; out const void*x4002; void*x4003; unsigned int x4004; void*x4005; void*x4006; void*x4007; void*x4008; void*x4009; void*x4010; void*x4011; void*x4012; void*x4013; void*x4014; void*x4015; void*x4016; void*x4017; void*x4018; void*x4019; void*x4020; void*x4021; void*x4022; void*x4023; void*x4024; void*x4025; void*x4026; void*x4027; void*x4028; void*x4029; void*x4030; void*x4031; void*x4032; unsigned short x4033; void*x4034; short x4035; void*x4036; void*x4037; void*x4038; void*x4039; unsigned long x4040; int x4041; unsigned int x4042/* : ? */; const void*x4043; const void*x4044; void*x4045; void*x4046; const int x4047; void x4048; void*x4049; void*x4050; void*x4051; void*x4052; const void*x4053; void*x4054; void*x4055; void*x4056; out const void*x4057; short x4058; void*x4059; void*x4060; void*x4061; short x4062; int x4063; BOOL x4064; unsigned long x4065; int x4066; unsigned int x4067/* : ? */; const void*x4068; const void*x4069; void*x4070; float x4071; const void*x4072; void*x4073; void*x4074; void*x4075; out const void*x4076; void*x4077; void*x4078; void*x4079; short x4080; int x4081; BOOL x4082; unsigned long x4083; int x4084; unsigned int x4085/* : ? */; const void*x4086; const void*x4087; void*x4088; void*x4089; void*x4090; void*x4091; void*x4092; void*x4093; void*x4094; void*x4095; void*x4096; void*x4097; void*x4098; void*x4099; void*x4100; void*x4101; void*x4102; void*x4103; void*x4104; void*x4105; void*x4106; void*x4107; void*x4108; void*x4109; void*x4110; void*x4111; void*x4112; void*x4113; unsigned long x4114; void*x4115; void*x4116; out short x4117; int x4118; void*x4119; int x4120; out in void*x4121; void*x4122; void*x4123; double x4124; void*x4125; const oneway int x4126; void*x4127; void*x4128; SEL x4129; void*x4130; in double x4131; void*x4132; out out void*x4133; void*x4134; const oneway int x4135; void*x4136; void*x4137; SEL x4138; out void*x4139; void*x4140; short x4141; int x4142; double x4143; void*x4144; unsigned char x4145; out in void*x4146; void*x4147; in void*x4148; oneway int x4149; void*x4150; void*x4151; void*x4152; out const unsigned int x4153; in void*x4154; void*x4155; const float x4156; void*x4157; BOOL x4158; void*x4159; bycopy const int x4160; void*x4161; in void*x4162; void*x4163; void*x4164; int x4165; out in SEL x4166; void*x4167; void*x4168; void*x4169; void*x4170; void*x4171; void*x4172; void*x4173; void*x4174; void*x4175; void*x4176; void*x4177; void*x4178; void*x4179; void*x4180; void*x4181; void*x4182; void*x4183; void*x4184; void*x4185; void*x4186; void*x4187; unsigned short x4188; void*x4189; short x4190; void*x4191; void*x4192; void*x4193; void*x4194; unsigned long x4195; int x4196; unsigned int x4197/* : ? */; const void*x4198; const void*x4199; void*x4200; void*x4201; const int x4202; void x4203; void*x4204; void*x4205; void*x4206; void*x4207; const void*x4208; void*x4209; void*x4210; void*x4211; out const void*x4212; short x4213; void*x4214; void*x4215; int x4216; void*x4217; in void*x4218; short x4219; short x4220; void*x4221; unsigned int x4222; void*x4223; float x4224; const void*x4225; void*x4226; void*x4227; void*x4228; out const void*x4229; void*x4230; void*x4231; int x4232; void*x4233; in void*x4234; short x4235; short x4236; void*x4237; unsigned int x4238; void*x4239; void*x4240; void*x4241; void*x4242; void*x4243; void*x4244; void*x4245; void*x4246; void*x4247; void*x4248; void*x4249; void*x4250; void*x4251; void*x4252; void*x4253; void*x4254; void*x4255; void*x4256; void*x4257; void*x4258; void*x4259; void*x4260; void*x4261; void*x4262; void*x4263; void*x4264; char *x4265; void*x4266; void*x4267; void*x4268; void*x4269; void*x4270; unsigned char x4271; void*x4272; unsigned short x4273; void*x4274; short x4275; void*x4276; void*x4277; void*x4278; void*x4279; unsigned long x4280; int x4281; unsigned int x4282/* : ? */; const void*x4283; const void*x4284; void*x4285; void*x4286; const int x4287; void x4288; void*x4289; void*x4290; void*x4291; void*x4292; const void*x4293; void*x4294; void*x4295; void*x4296; out const void*x4297; short x4298; void*x4299; int x4300; void*x4301; out const void*x4302; unsigned int x4303; void*x4304; void*x4305; out const void*x4306; void*x4307; float x4308; const void*x4309; void*x4310; void*x4311; void*x4312; out const void*x4313; void*x4314; int x4315; void*x4316; out const void*x4317; unsigned int x4318; void*x4319; void*x4320; out const void*x4321; void*x4322; void*x4323; void*x4324; void*x4325; void*x4326; void*x4327; void*x4328; void*x4329; void*x4330; void*x4331; void*x4332; void*x4333; void*x4334; void*x4335; void*x4336; void*x4337; void*x4338; void*x4339; void*x4340; void*x4341; void*x4342; void*x4343; void*x4344; void*x4345; void*x4346; void*x4347; void*x4348; void*x4349; void*x4350; void*x4351; unsigned short x4352; void*x4353; short x4354; void*x4355; void*x4356; void*x4357; void*x4358; unsigned long x4359; int x4360; unsigned int x4361/* : ? */; const void*x4362; const void*x4363; void*x4364; void*x4365; const int x4366; void x4367; void*x4368; void*x4369; void*x4370; void*x4371; const void*x4372; void*x4373; void*x4374; void*x4375; out const void*x4376; short x4377; void*x4378; void*x4379; int x4380; void*x4381; in void*x4382; short x4383; short x4384; void*x4385; unsigned int x4386; void*x4387; float x4388; const void*x4389; void*x4390; void*x4391; void*x4392; out const void*x4393; void*x4394; void*x4395; int x4396; void*x4397; in void*x4398; short x4399; short x4400; void*x4401; unsigned int x4402; void*x4403; void*x4404; void*x4405; void*x4406; void*x4407; void*x4408; void*x4409; void*x4410; void*x4411; void*x4412; void*x4413; void*x4414; void*x4415; void*x4416; void*x4417; void*x4418; void*x4419; void*x4420; void*x4421; void*x4422; void*x4423; void*x4424; void*x4425; void*x4426; id x4427; void*x4428; void*x4429; void*x4430; void*x4431; void*x4432; void*x4433; void*x4434; unsigned char x4435; void*x4436; unsigned short x4437; void*x4438; short x4439; void*x4440; void*x4441; void*x4442; void*x4443; unsigned long x4444; int x4445; unsigned int x4446/* : ? */; const void*x4447; const void*x4448; void*x4449; void*x4450; const int x4451; void x4452; void*x4453; void*x4454; void*x4455; void*x4456; const void*x4457; void*x4458; void*x4459; void*x4460; out const void*x4461; short x4462; void*x4463; unsigned short x4464; void*x4465; long x4466; void*x4467; short x4468; void*x4469; bool x4470; out void*x4471; const double x4472; void*x4473; float x4474; const void*x4475; void*x4476; void*x4477; void*x4478; out const void*x4479; void*x4480; unsigned short x4481; void*x4482; long x4483; void*x4484; short x4485; void*x4486; bool x4487; out void*x4488; const double x4489; void*x4490; void*x4491; void*x4492; void*x4493; void*x4494; void*x4495; void*x4496; void*x4497; void*x4498; void*x4499; void*x4500; void*x4501; void*x4502; void*x4503; void*x4504; void*x4505; void*x4506; void*x4507; void*x4508; void*x4509; void*x4510; void*x4511; void*x4512; void*x4513; void*x4514; void*x4515; void*x4516; void*x4517; void*x4518; unsigned short x4519; void*x4520; short x4521; void*x4522; void*x4523; void*x4524; void*x4525; unsigned long x4526; int x4527; unsigned int x4528/* : ? */; const void*x4529; const void*x4530; void*x4531; void*x4532; const int x4533; void x4534; void*x4535; void*x4536; void*x4537; void*x4538; const void*x4539; void*x4540; void*x4541; void*x4542; out const void*x4543; short x4544; void*x4545; unsigned short x4546; void*x4547; out const void*x4548; void*x4549; int x4550; void*x4551; void*x4552; unsigned int x4553; void*x4554; float x4555; const void*x4556; void*x4557; void*x4558; void*x4559; out const void*x4560; void*x4561; unsigned short x4562; void*x4563; out const void*x4564; void*x4565; int x4566; void*x4567; void*x4568; unsigned int x4569; void*x4570; void*x4571; void*x4572; void*x4573; void*x4574; void*x4575; void*x4576; void*x4577; void*x4578; void*x4579; void*x4580; void*x4581; void*x4582; void*x4583; void*x4584; void*x4585; void*x4586; void*x4587; void*x4588; void*x4589; void*x4590; void*x4591; void*x4592; void*x4593; void*x4594; void*x4595; void*x4596; void*x4597; void*x4598; void*x4599; void*x4600; void*x4601; unsigned short x4602; void*x4603; short x4604; void*x4605; void*x4606; void*x4607; void*x4608; unsigned long x4609; int x4610; unsigned int x4611/* : ? */; const void*x4612; const void*x4613; void*x4614; void*x4615; const int x4616; void x4617; void*x4618; void*x4619; void*x4620; void*x4621; const void*x4622; void*x4623; void*x4624; void*x4625; out const void*x4626; short x4627; void*x4628; void*x4629; void*x4630; void*x4631; void*x4632; unsigned char x4633; void*x4634; in void*x4635; void*x4636; const void*x4637; unsigned int x4638; void*x4639; float x4640; const void*x4641; void*x4642; void*x4643; void*x4644; out const void*x4645; void*x4646; void*x4647; void*x4648; void*x4649; void*x4650; unsigned char x4651; void*x4652; in void*x4653; void*x4654; const void*x4655; unsigned int x4656; void*x4657; void*x4658; void*x4659; void*x4660; void*x4661; void*x4662; void*x4663; void*x4664; void*x4665; void*x4666; void*x4667; void*x4668; void*x4669; void*x4670; void*x4671; void*x4672; void*x4673; void*x4674; void*x4675; void*x4676; void*x4677; void*x4678; void*x4679; void*x4680; void*x4681; void*x4682; void*x4683; void*x4684; char *x4685; void*x4686; void*x4687; void*x4688; const in int x4689; in void*x4690; SEL x4691; void*x4692; void*x4693; in const void*x4694; BOOL x4695; out void*x4696; in int x4697; void*x4698; void*x4699; double x4700; void*x4701; float x4702; int x4703; long x4704; void*x4705; const void*x4706; void*x4707; void*x4708; void*x4709; void*x4710; SEL x4711; void*x4712; void*x4713; void*x4714; void*x4715; void*x4716; void*x4717; short x4718; int x4719; in void*x4720; void*x4721; void*x4722; void x4723; out int x4724; double x4725; char *x4726; void*x4727; void*x4728; char *x4729; void*x4730; void*x4731; void x4732; out int x4733; double x4734; char *x4735; void*x4736; void*x4737; void*x4738; void*x4739; void*x4740; void*x4741; void*x4742; void*x4743; void*x4744; void*x4745; void*x4746; void*x4747; void*x4748; void*x4749; void*x4750; void*x4751; void*x4752; void*x4753; void*x4754; void*x4755; void*x4756; void*x4757; void*x4758; void*x4759; void*x4760; void*x4761; void*x4762; void*x4763; void*x4764; void*x4765; void*x4766; void*x4767; void*x4768; void*x4769; unsigned short x4770; void*x4771; short x4772; void*x4773; void*x4774; void*x4775; void*x4776; unsigned long x4777; int x4778; unsigned int x4779/* : ? */; const void*x4780; const void*x4781; void*x4782; void*x4783; const int x4784; void x4785; void*x4786; void*x4787; void*x4788; void*x4789; const void*x4790; void*x4791; void*x4792; void*x4793; out const void*x4794; short x4795; void*x4796; bool x4797; void*x4798; short x4799; void*x4800; bool x4801; out void*x4802; const double x4803; void*x4804; float x4805; const void*x4806; void*x4807; void*x4808; void*x4809; out const void*x4810; void*x4811; bool x4812; void*x4813; short x4814; void*x4815; bool x4816; out void*x4817; const double x4818; void*x4819; void*x4820; void*x4821; void*x4822; void*x4823; void*x4824; void*x4825; void*x4826; void*x4827; void*x4828; void*x4829; void*x4830; void*x4831; void*x4832; void*x4833; void*x4834; void*x4835; void*x4836; void*x4837; void*x4838; void*x4839; void*x4840; void*x4841; void*x4842; void*x4843; void*x4844; void*x4845; void*x4846; void*x4847; void*x4848; void*x4849; void*x4850; void*x4851; void*x4852; unsigned short x4853; void*x4854; short x4855; void*x4856; void*x4857; void*x4858; void*x4859; unsigned long x4860; int x4861; unsigned int x4862/* : ? */; const void*x4863; const void*x4864; void*x4865; void*x4866; const int x4867; void x4868; void*x4869; void*x4870; void*x4871; void*x4872; const void*x4873; void*x4874; void*x4875; void*x4876; out const void*x4877; short x4878; void*x4879; bycopy float x4880; float x4881; int x4882; BOOL x4883; void*x4884; unsigned int x4885; void*x4886; void*x4887; out const void*x4888; void*x4889; float x4890; const void*x4891; void*x4892; void*x4893; void*x4894; out const void*x4895; void*x4896; bycopy float x4897; float x4898; int x4899; BOOL x4900; void*x4901; unsigned int x4902; void*x4903; void*x4904; out const void*x4905; void*x4906; void*x4907; void*x4908; void*x4909; void*x4910; void*x4911; void*x4912; void*x4913; void*x4914; void*x4915; void*x4916; void*x4917; void*x4918; void*x4919; void*x4920; void*x4921; void*x4922; void*x4923; void*x4924; void*x4925; void*x4926; void*x4927; void*x4928; void*x4929; void*x4930; void*x4931; unsigned char x4932; void*x4933; unsigned short x4934; void*x4935; short x4936; void*x4937; void*x4938; void*x4939; void*x4940; unsigned long x4941; int x4942; unsigned int x4943/* : ? */; const void*x4944; const void*x4945; void*x4946; void*x4947; const int x4948; void x4949; void*x4950; void*x4951; void*x4952; void*x4953; const void*x4954; void*x4955; void*x4956; void*x4957; out const void*x4958; short x4959; void*x4960; int x4961; void*x4962; out const void*x4963; unsigned int x4964; void*x4965; void*x4966; out const void*x4967; void*x4968; float x4969; const void*x4970; void*x4971; void*x4972; void*x4973; out const void*x4974; void*x4975; int x4976; void*x4977; out const void*x4978; unsigned int x4979; void*x4980; void*x4981; out const void*x4982; void*x4983; void*x4984; void*x4985; void*x4986; void*x4987; void*x4988; void*x4989; void*x4990; void*x4991; void*x4992; void*x4993; void*x4994; void*x4995; void*x4996; void*x4997; void*x4998; void*x4999; void*x5000; void*x5001; void*x5002; void*x5003; void*x5004; void*x5005; void*x5006; void*x5007; void*x5008; void*x5009; void*x5010; id x5011; void*x5012; unsigned short x5013; void*x5014; short x5015; void*x5016; void*x5017; void*x5018; void*x5019; unsigned long x5020; int x5021; unsigned int x5022/* : ? */; const void*x5023; const void*x5024; void*x5025; void*x5026; const void*x5027; void*x5028; void*x5029; void*x5030; out const void*x5031; short x5032; void*x5033; short x5034; short x5035; void*x5036; void*x5037; short x5038; unsigned long x5039; int x5040; unsigned int x5041/* : ? */; const void*x5042; const void*x5043; void*x5044; float x5045; const void*x5046; void*x5047; void*x5048; void*x5049; out const void*x5050; void*x5051; short x5052; short x5053; void*x5054; void*x5055; short x5056; unsigned long x5057; int x5058; unsigned int x5059/* : ? */; const void*x5060; const void*x5061; void*x5062; void*x5063; void*x5064; void*x5065; void*x5066; void*x5067; void*x5068; void*x5069; void*x5070; void*x5071; void*x5072; void*x5073; void*x5074; void*x5075; void*x5076; void*x5077; void*x5078; void*x5079; void*x5080; void*x5081; void*x5082; void*x5083; void*x5084; void*x5085; void*x5086; void*x5087; void*x5088; void*x5089; void*x5090; void*x5091; void*x5092; unsigned char x5093; void*x5094; unsigned short x5095; void*x5096; short x5097; void*x5098; void*x5099; void*x5100; void*x5101; unsigned long x5102; int x5103; unsigned int x5104/* : ? */; const void*x5105; const void*x5106; void*x5107; void*x5108; const int x5109; void x5110; void*x5111; void*x5112; void*x5113; void*x5114; const void*x5115; void*x5116; void*x5117; void*x5118; out const void*x5119; short x5120; void*x5121; unsigned char x5122; out const void*x5123; void*x5124; void*x5125; BOOL x5126; void*x5127; in void*x5128; short x5129; void*x5130; float x5131; const void*x5132; void*x5133; void*x5134; void*x5135; out const void*x5136; void*x5137; unsigned char x5138; out const void*x5139; void*x5140; void*x5141; BOOL x5142; void*x5143; in void*x5144; short x5145; void*x5146; void*x5147; void*x5148; void*x5149; void*x5150; void*x5151; void*x5152; void*x5153; void*x5154; void*x5155; void*x5156; void*x5157; void*x5158; void*x5159; void*x5160; void*x5161; void*x5162; void*x5163; void*x5164; void*x5165; void*x5166; void*x5167; void*x5168; void*x5169; void*x5170; void*x5171; void*x5172; void*x5173; bool x5174; void*x5175; BOOL x5176; out in void*x5177; void*x5178; int x5179; in void*x5180; double x5181; void*x5182; void*x5183; short x5184; void*x5185; void*x5186; const void*x5187; void*x5188; void*x5189; BOOL x5190; out void*x5191; in int x5192; void*x5193; void*x5194; const short x5195; unsigned short x5196; void*x5197; out void*x5198; long x5199; double x5200; void*x5201; void*x5202; short x5203; void*x5204; void*x5205; BOOL x5206; void*x5207; void*x5208; void*x5209; short x5210; void*x5211; void*x5212; const void*x5213; unsigned short x5214; void*x5215; const void x5216; void*x5217; const unsigned int x5218; in short x5219; void*x5220; const void*x5221; BOOL x5222; void*x5223; int x5224; out in short x5225; void*x5226; void*x5227; void*x5228; void*x5229; void*x5230; void*x5231; void*x5232; void*x5233; void*x5234; void*x5235; void*x5236; void*x5237; void*x5238; void*x5239; void*x5240; void*x5241; void*x5242; void*x5243; void*x5244; void*x5245; void*x5246; id x5247; void*x5248; void*x5249; void*x5250; void*x5251; void*x5252; void*x5253; void*x5254; unsigned char x5255; void*x5256; unsigned short x5257; void*x5258; short x5259; void*x5260; void*x5261; void*x5262; void*x5263; unsigned long x5264; int x5265; unsigned int x5266/* : ? */; const void*x5267; const void*x5268; void*x5269; void*x5270; const int x5271; void x5272; void*x5273; void*x5274; void*x5275; void*x5276; const void*x5277; void*x5278; void*x5279; void*x5280; out const void*x5281; short x5282; void*x5283; void*x5284; void*x5285; short x5286; short x5287; void*x5288; int x5289; void*x5290; unsigned char x5291; out const void*x5292; void*x5293; float x5294; const void*x5295; void*x5296; void*x5297; void*x5298; out const void*x5299; void*x5300; void*x5301; void*x5302; short x5303; short x5304; void*x5305; int x5306; void*x5307; unsigned char x5308; out const void*x5309; void*x5310; void*x5311; void*x5312; void*x5313; void*x5314; void*x5315; void*x5316; void*x5317; void*x5318; void*x5319; void*x5320; void*x5321; void*x5322; void*x5323; void*x5324; void*x5325; void*x5326; void*x5327; void*x5328; void*x5329; void*x5330; void*x5331; void*x5332; void*x5333; void*x5334; void*x5335; void*x5336; void*x5337; unsigned char x5338; void*x5339; unsigned short x5340; void*x5341; short x5342; void*x5343; void*x5344; void*x5345; void*x5346; unsigned long x5347; int x5348; unsigned int x5349/* : ? */; const void*x5350; const void*x5351; void*x5352; void*x5353; const int x5354; void x5355; void*x5356; void*x5357; void*x5358; void*x5359; const void*x5360; void*x5361; void*x5362; void*x5363; out const void*x5364; short x5365; void*x5366; void*x5367; const void*x5368; float x5369; void*x5370; const void*x5371; in BOOL x5372; void*x5373; short x5374; void*x5375; float x5376; const void*x5377; void*x5378; void*x5379; void*x5380; out const void*x5381; void*x5382; void*x5383; const void*x5384; float x5385; void*x5386; const void*x5387; in BOOL x5388; void*x5389; short x5390; void*x5391; void*x5392; void*x5393; void*x5394; void*x5395; void*x5396; void*x5397; void*x5398; void*x5399; void*x5400; void*x5401; void*x5402; void*x5403; void*x5404; void*x5405; void*x5406; void*x5407; void*x5408; void*x5409; void*x5410; void*x5411; void*x5412; void*x5413; void*x5414; void*x5415; void*x5416; void*x5417; void*x5418; void*x5419; void*x5420; unsigned short x5421; void*x5422; short x5423; void*x5424; void*x5425; void*x5426; void*x5427; unsigned long x5428; int x5429; unsigned int x5430/* : ? */; const void*x5431; const void*x5432; void*x5433; void*x5434; const int x5435; void x5436; void*x5437; void*x5438; void*x5439; void*x5440; const void*x5441; void*x5442; void*x5443; void*x5444; out const void*x5445; short x5446; void*x5447; bycopy float x5448; float x5449; int x5450; BOOL x5451; void*x5452; unsigned int x5453; void*x5454; void*x5455; out const void*x5456; void*x5457; float x5458; const void*x5459; void*x5460; void*x5461; void*x5462; out const void*x5463; void*x5464; bycopy float x5465; float x5466; int x5467; BOOL x5468; void*x5469; unsigned int x5470; void*x5471; void*x5472; out const void*x5473; void*x5474; void*x5475; void*x5476; void*x5477; void*x5478; void*x5479; void*x5480; void*x5481; void*x5482; void*x5483; void*x5484; void*x5485; void*x5486; void*x5487; void*x5488; void*x5489; void*x5490; void*x5491; void*x5492; void*x5493; void*x5494; void*x5495; void*x5496; void*x5497; void*x5498; void*x5499; void*x5500; void*x5501; unsigned short x5502; void*x5503; short x5504; void*x5505; void*x5506; void*x5507; void*x5508; unsigned long x5509; int x5510; unsigned int x5511/* : ? */; const void*x5512; const void*x5513; void*x5514; void*x5515; const int x5516; void x5517; void*x5518; void*x5519; void*x5520; void*x5521; const void*x5522; void*x5523; void*x5524; void*x5525; out const void*x5526; short x5527; void*x5528; bycopy float x5529; float x5530; int x5531; BOOL x5532; void*x5533; unsigned int x5534; void*x5535; void*x5536; out const void*x5537; void*x5538; float x5539; const void*x5540; void*x5541; void*x5542; void*x5543; out const void*x5544; void*x5545; bycopy float x5546; float x5547; int x5548; BOOL x5549; void*x5550; unsigned int x5551; void*x5552; void*x5553; out const void*x5554; void*x5555; void*x5556; void*x5557; void*x5558; void*x5559; void*x5560; void*x5561; void*x5562; void*x5563; void*x5564; void*x5565; void*x5566; void*x5567; void*x5568; void*x5569; void*x5570; void*x5571; void*x5572; void*x5573; void*x5574; void*x5575; void*x5576; void*x5577; void*x5578; void*x5579; void*x5580; void*x5581; void*x5582; unsigned short x5583; void*x5584; short x5585; void*x5586; void*x5587; void*x5588; void*x5589; unsigned long x5590; int x5591; unsigned int x5592/* : ? */; const void*x5593; const void*x5594; void*x5595; void*x5596; const int x5597; void x5598; void*x5599; void*x5600; void*x5601; void*x5602; const void*x5603; void*x5604; void*x5605; void*x5606; out const void*x5607; short x5608; void*x5609; unsigned short x5610; void*x5611; unsigned int x5612/* : ? */; void*x5613; void*x5614; BOOL x5615; void*x5616; short x5617; void*x5618; float x5619; const void*x5620; void*x5621; void*x5622; void*x5623; out const void*x5624; void*x5625; unsigned short x5626; void*x5627; unsigned int x5628/* : ? */; void*x5629; void*x5630; BOOL x5631; void*x5632; short x5633; void*x5634; void*x5635; void*x5636; void*x5637; void*x5638; void*x5639; void*x5640; void*x5641; void*x5642; void*x5643; void*x5644; void*x5645; void*x5646; void*x5647; void*x5648; void*x5649; void*x5650; void*x5651; void*x5652; void*x5653; void*x5654; void*x5655; void*x5656; void*x5657; void*x5658; void*x5659; void*x5660; void*x5661; void*x5662; void*x5663; void*x5664; void*x5665; void*x5666; void*x5667; unsigned short x5668; void*x5669; short x5670; void*x5671; void*x5672; void*x5673; void*x5674; unsigned long x5675; int x5676; unsigned int x5677/* : ? */; const void*x5678; const void*x5679; void*x5680; void*x5681; const int x5682; void x5683; void*x5684; void*x5685; void*x5686; void*x5687; const void*x5688; void*x5689; void*x5690; void*x5691; out const void*x5692; short x5693; void*x5694; bool x5695; void*x5696; long x5697; long x5698; void*x5699; void*x5700; int x5701; in bool x5702; out void*x5703; const double x5704; void*x5705; float x5706; const void*x5707; void*x5708; void*x5709; void*x5710; out const void*x5711; void*x5712; bool x5713; void*x5714; long x5715; long x5716; void*x5717; void*x5718; int x5719; in bool x5720; out void*x5721; const double x5722; void*x5723; void*x5724; void*x5725; void*x5726; void*x5727; void*x5728; void*x5729; void*x5730; void*x5731; void*x5732; void*x5733; void*x5734; void*x5735; void*x5736; void*x5737; void*x5738; id x5739; void*x5740; void*x5741; void*x5742; void*x5743; void*x5744; void*x5745; void*x5746; unsigned char x5747; void*x5748; unsigned short x5749; void*x5750; short x5751; void*x5752; void*x5753; void*x5754; void*x5755; unsigned long x5756; int x5757; unsigned int x5758/* : ? */; const void*x5759; const void*x5760; void*x5761; void*x5762; const int x5763; void x5764; void*x5765; void*x5766; void*x5767; void*x5768; const void*x5769; void*x5770; void*x5771; void*x5772; out const void*x5773; short x5774; void*x5775; int x5776; void*x5777; out const void*x5778; unsigned int x5779; void*x5780; void*x5781; out const void*x5782; void*x5783; float x5784; const void*x5785; void*x5786; void*x5787; void*x5788; out const void*x5789; void*x5790; int x5791; void*x5792; out const void*x5793; unsigned int x5794; void*x5795; void*x5796; out const void*x5797; void*x5798; void*x5799; void*x5800; void*x5801; void*x5802; void*x5803; void*x5804; void*x5805; void*x5806; void*x5807; void*x5808; void*x5809; void*x5810; void*x5811; void*x5812; void*x5813; void*x5814; void*x5815; void*x5816; void*x5817; void*x5818; void*x5819; void*x5820; void*x5821; void*x5822; void*x5823; void*x5824; void*x5825; void*x5826; void*x5827; unsigned short x5828; void*x5829; short x5830; void*x5831; void*x5832; void*x5833; void*x5834; unsigned long x5835; int x5836; unsigned int x5837/* : ? */; const void*x5838; const void*x5839; void*x5840; void*x5841; const int x5842; void x5843; void*x5844; void*x5845; void*x5846; void*x5847; const void*x5848; void*x5849; void*x5850; void*x5851; out const void*x5852; short x5853; void*x5854; unsigned int x5855; void*x5856; void*x5857; void*x5858; void*x5859; unsigned char x5860; void*x5861; void*x5862; void*x5863; void*x5864; const void*x5865; void*x5866; float x5867; const void*x5868; void*x5869; void*x5870; void*x5871; out const void*x5872; void*x5873; unsigned int x5874; void*x5875; void*x5876; void*x5877; void*x5878; unsigned char x5879; void*x5880; void*x5881; void*x5882; void*x5883; const void*x5884; void*x5885; void*x5886; void*x5887; void*x5888; void*x5889; void*x5890; void*x5891; void*x5892; void*x5893; void*x5894; short x5895; void*x5896; void*x5897; void*x5898; const void*x5899; void*x5900; void*x5901; BOOL x5902; void*x5903; void*x5904; void*x5905; void*x5906; void*x5907; void*x5908; void*x5909; unsigned int x5910; void*x5911; bycopy void*x5912; float x5913; void*x5914; float x5915; void*x5916; short x5917; void*x5918; void*x5919; void*x5920; void*x5921; void*x5922; void*x5923; void*x5924; struct x5925; void*x5926; void*x5927; void*x5928; double x5929; void*x5930; out void*x5931; void*x5932; void*x5933; unsigned int x5934/* : ? */; void*x5935; long x5936; void*x5937; void*x5938; void*x5939; void*x5940; void*x5941; void*x5942; void*x5943; void*x5944; void*x5945; void*x5946; void*x5947; void*x5948; void*x5949; double x5950; void*x5951; out void*x5952; void*x5953; void*x5954; unsigned int x5955/* : ? */; void*x5956; long x5957; void*x5958; void*x5959; void*x5960; void*x5961; void*x5962; void*x5963; void*x5964; void*x5965; void*x5966; void*x5967; void*x5968; void*x5969; void*x5970; }*page; /* unknown property attribute:  WebKit::WebPreferencesStore::Value>}iiii}}IB} */
@property (nonatomic, readonly) const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_10_1_1; } x10; }*positionInformation;
@property (nonatomic, copy) NSString *responseContext;
@property (nonatomic) bool returnKeyGoesToNextResponder;
@property (nonatomic) long long returnKeyType;
@property (getter=isSecureTextEntry, nonatomic) bool secureTextEntry;
@property (copy) UITextRange *selectedTextRange;
@property (nonatomic) long long selectionAffinity;
@property (nonatomic, retain) UIColor *selectionBarColor;
@property (nonatomic, retain) UIImage *selectionDragDotImage;
@property (nonatomic) long long selectionGranularity;
@property (nonatomic, retain) UIColor *selectionHighlightColor;
@property (nonatomic) int shortcutConversionType;
@property (getter=isShowingInspectorIndication, nonatomic) bool showingInspectorIndication;
@property (nonatomic) long long spellCheckingType;
@property (readonly) Class superclass;
@property (nonatomic) bool suppressReturnKeyStyling;
@property (nonatomic, readonly) UIView *textInputView;
@property (nonatomic) int textLoupeVisibility;
@property (nonatomic) int textSelectionBehavior;
@property (nonatomic) id textSuggestionDelegate;
@property (nonatomic) struct __CFCharacterSet { }*textTrimmingSet;
@property (nonatomic, readonly) <UITextInputTokenizer> *tokenizer;
@property (nonatomic) bool useInterfaceLanguageForLocalization;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_accessibilityRegisterUIProcessTokens;
- (SEL)_actionForLongPress;
- (void)_addDefaultGestureRecognizers;
- (void)_addShortcut:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationDidEnterBackground:(id)arg1;
- (void)_applicationWillEnterForeground:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)_attemptClickAtLocation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_cancelInteraction;
- (void)_cancelLongPressGestureRecognizer;
- (unsigned int)_characterBeforeCaretSelection;
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;
- (void)_commitPotentialTapFailed;
- (struct unique_ptr<WebKit::DrawingAreaProxy, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct __compressed_pair<WebKit::DrawingAreaProxy *, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct DrawingAreaProxy {} *x_1_1_1; } x1; })_createDrawingAreaProxy;
- (void)_decidePolicyForGeolocationRequestFromOrigin:(struct WebSecurityOrigin { int (**x1)(); id x2; struct RefPtr<WebCore::SecurityOrigin> { struct SecurityOrigin {} *x_3_1_1; } x3; }*)arg1 frame:(struct WebFrameProxy { int (**x1)(); id x2; struct WebPageProxy {} *x3; struct FrameLoadState { int x_4_1_1; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_2_2_1; } x_4_1_2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_3_2_1; } x_4_1_3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_4_2_1; } x_4_1_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_5_2_1; } x_4_1_5; } x4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_5_1_1; } x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; bool x7; struct RefPtr<WebKit::WebCertificateInfo> { struct WebCertificateInfo {} *x_8_1_1; } x8; struct RefPtr<WebKit::WebFrameListenerProxy> { struct WebFrameListenerProxy {} *x_9_1_1; } x9; unsigned long long x10; struct unique_ptr<WebCore::ContentFilter, std::__1::default_delete<WebCore::ContentFilter> > { struct __compressed_pair<WebCore::ContentFilter *, std::__1::default_delete<WebCore::ContentFilter> > { struct ContentFilter {} *x_1_2_1; } x_11_1_1; } x11; }*)arg2 request:(struct GeolocationPermissionRequestProxy { int (**x1)(); id x2; struct GeolocationPermissionRequestManagerProxy {} *x3; unsigned long long x4; }*)arg3;
- (void)_define:(id)arg1;
- (void)_didCommitLayerTree:(const struct RemoteLayerTreeTransaction { unsigned long long x1; struct Vector<WTF::RefPtr<WebKit::PlatformCALayerRemote>, 0, WTF::CrashOnOverflow> { struct RefPtr<WebKit::PlatformCALayerRemote> {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_3_1_1; } x3; struct Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties, 0, WTF::CrashOnOverflow> { struct LayerCreationProperties {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_5_1_1; unsigned int x_5_1_2; unsigned int x_5_1_3; } x5; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_8_1_1; unsigned int x_8_1_2; unsigned int x_8_1_3; } x8; struct IntSize { int x_9_1_1; int x_9_1_2; } x9; struct Color { unsigned int x_10_1_1; bool x_10_1_2; } x10; double x11; double x12; double x13; unsigned long long x14; unsigned long long x15; bool x16; bool x17; }*)arg1;
- (void)_didCommitLoadForMainFrame;
- (void)_didEndScrollingOrZooming;
- (void)_didGetTapHighlightForRequest:(unsigned long long)arg1 color:(const struct Color { unsigned int x1; bool x2; }*)arg2 quads:(const struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow> { struct FloatQuad {} *x1; unsigned int x2; unsigned int x3; }*)arg3 topLeftRadius:(const struct IntSize { int x1; int x2; }*)arg4 topRightRadius:(const struct IntSize { int x1; int x2; }*)arg5 bottomLeftRadius:(const struct IntSize { int x1; int x2; }*)arg6 bottomRightRadius:(const struct IntSize { int x1; int x2; }*)arg7;
- (void)_didHandleKeyEvent:(id)arg1;
- (void)_didRelaunchProcess;
- (void)_didScroll;
- (void)_didUpdateBlockSelectionWithTouch:(int)arg1 withFlags:(int)arg2 growThreshold:(double)arg3 shrinkThreshold:(double)arg4;
- (void)_disableInspectorNodeSearch;
- (void)_displayFormNodeInputView;
- (void)_doubleTapRecognized:(id)arg1;
- (void)_enableInspectorNodeSearch;
- (void)_finishInteraction;
- (void)_hideInspectorHighlight;
- (void)_highlightLongPressRecognized:(id)arg1;
- (void)_inspectorNodeSearchRecognized:(id)arg1;
- (bool)_interpretKeyEvent:(id)arg1 isCharEvent:(bool)arg2;
- (void)_longPressRecognized:(id)arg1;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })_markedTextNSRange;
- (id)_moveDown:(bool)arg1 withHistory:(id)arg2;
- (id)_moveLeft:(bool)arg1 withHistory:(id)arg2;
- (id)_moveRight:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToEndOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfDocument:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfLine:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfParagraph:(bool)arg1 withHistory:(id)arg2;
- (id)_moveToStartOfWord:(bool)arg1 withHistory:(id)arg2;
- (id)_moveUp:(bool)arg1 withHistory:(id)arg2;
- (void)_nextAccessoryTab:(id)arg1;
- (void)_overflowScrollingDidEnd;
- (void)_overflowScrollingWillBegin;
- (struct OpaqueWKPage { }*)_pageRef;
- (void)_positionInformationDidChange:(const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_10_1_1; } x10; }*)arg1;
- (void)_prevAccessoryTab:(id)arg1;
- (void)_processDidExit;
- (void)_promptForReplace:(id)arg1;
- (void)_reanalyze:(id)arg1;
- (void)_removeDefaultGestureRecognizers;
- (bool)_requiresKeyboardResetOnReload;
- (bool)_requiresKeyboardWhenFirstResponder;
- (void)_resetShowingTextStyle:(id)arg1;
- (bool)_scrollToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withOrigin:(struct CGPoint { double x1; double x2; })arg2 minimumScrollDistance:(double)arg3;
- (id)_scroller;
- (bool)_selectionAtDocumentStart;
- (void)_selectionChanged;
- (void)_setAcceleratedCompositingRootView:(id)arg1;
- (void)_setAccessibilityWebProcessToken:(id)arg1;
- (void)_showDataDetectorsSheet;
- (void)_showDictionary:(id)arg1;
- (void)_showImageSheet;
- (void)_showInspectorHighlight:(const struct Highlight { struct Color { unsigned int x_1_1_1; bool x_1_1_2; } x1; struct Color { unsigned int x_2_1_1; bool x_2_1_2; } x2; struct Color { unsigned int x_3_1_1; bool x_3_1_2; } x3; struct Color { unsigned int x_4_1_1; bool x_4_1_2; } x4; struct Color { unsigned int x_5_1_1; bool x_5_1_2; } x5; int x6; struct Vector<WebCore::FloatQuad, 0, WTF::CrashOnOverflow> { struct FloatQuad {} *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; bool x8; }*)arg1;
- (void)_showLinkSheet;
- (void)_showPlaybackTargetPicker:(bool)arg1 fromRect:(const struct IntRect { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; struct IntSize { int x_2_1_1; int x_2_1_2; } x2; }*)arg2;
- (void)_showRunOpenPanel:(struct WebOpenPanelParameters { }*)arg1 resultListener:(struct WebOpenPanelResultListenerProxy { }*)arg2;
- (void)_showTapHighlight;
- (void)_showTextStyleOptions:(id)arg1;
- (void)_singleTapCommited:(id)arg1;
- (void)_singleTapDidReset:(id)arg1;
- (void)_singleTapRecognized:(id)arg1;
- (void)_startAssistingKeyboard;
- (void)_startAssistingNode:(const struct AssistedNodeInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_2_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_2_1_2; } x2; double x3; double x4; double x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; int x13; int x14; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_15_1_1; } x15; struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow> { struct OptionItem {} *x_16_1_1; unsigned int x_16_1_2; unsigned int x_16_1_3; } x16; int x17; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_18_1_1; } x18; double x19; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_20_1_1; } x20; }*)arg1 userIsInteracting:(bool)arg2 blurPreviousNode:(bool)arg3 userObject:(id)arg4;
- (void)_stopAssistingKeyboard;
- (void)_stopAssistingNode;
- (void)_transliterateChinese:(id)arg1;
- (void)_twoFingerDoubleTapRecognized:(id)arg1;
- (void)_updateAccessory;
- (void)_updateChangedSelection;
- (void)_updateChangedSelection:(bool)arg1;
- (void)_updateForScreen:(id)arg1;
- (void)_updateTapHighlight;
- (void)_webTouchEvent:(const struct NativeWebTouchEvent { unsigned int x1; unsigned int x2; double x3; struct Vector<WebKit::WebPlatformTouchPoint, 0, WTF::CrashOnOverflow> { struct WebPlatformTouchPoint {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct IntPoint { int x_5_1_1; int x_5_1_2; } x5; bool x6; bool x7; float x8; float x9; }*)arg1 preventsNativeGestures:(bool)arg2;
- (void)_webTouchEventsRecognized:(id)arg1;
- (void)_willStartScrollingOrZooming;
- (void)_windowDidMoveToScreenNotification:(id)arg1;
- (void)_zoomOutWithOrigin:(struct CGPoint { double x1; double x2; })arg1;
- (void)_zoomToFocusRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 selectionRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 fontSize:(float)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 allowScaling:(bool)arg6 forceScroll:(bool)arg7;
- (bool)_zoomToRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 withOrigin:(struct CGPoint { double x1; double x2; })arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(double)arg6;
- (void)accessibilityRetrieveSpeakSelectionContent;
- (void)accessoryAutoFill;
- (void)accessoryClear;
- (void)accessoryDone;
- (void)accessoryTab:(bool)arg1;
- (struct RetainPtr<NSArray> { void *x1; })actionSheetAssistant:(id)arg1 decideActionsForElement:(id)arg2 defaultActions:(struct RetainPtr<NSArray> { void *x1; })arg3;
- (void)actionSheetAssistant:(id)arg1 openElementAtLocation:(struct CGPoint { double x1; double x2; })arg2;
- (void)actionSheetAssistant:(id)arg1 performAction:(int)arg2;
- (void)actionSheetAssistant:(id)arg1 willStartInteractionWithElement:(id)arg2;
- (void)actionSheetAssistantDidStopInteraction:(id)arg1;
- (void)applyAutocorrection:(id)arg1 toString:(id)arg2 withCompletionHandler:(id)arg3;
- (const struct AssistedNodeInformation { struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_1_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_1_1_2; } x1; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_2_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_2_1_2; } x2; double x3; double x4; double x5; bool x6; bool x7; bool x8; bool x9; bool x10; bool x11; bool x12; int x13; int x14; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_15_1_1; } x15; struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow> { struct OptionItem {} *x_16_1_1; unsigned int x_16_1_2; unsigned int x_16_1_3; } x16; int x17; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_18_1_1; } x18; double x19; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_20_1_1; } x20; }*)assistedNodeInformation;
- (struct Vector<WebKit::OptionItem, 0, WTF::CrashOnOverflow> { struct OptionItem {} *x1; unsigned int x2; unsigned int x3; }*)assistedNodeSelectOptions;
- (const struct WKAutoCorrectionData { struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_1_1_1; } x1; double x2; unsigned long long x3; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_4_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_4_1_2; } x4; struct CGRect { struct CGPoint { double x_1_2_1; double x_1_2_2; } x_5_1_1; struct CGSize { double x_2_2_1; double x_2_2_2; } x_5_1_2; } x5; id x6; /* Warning: Unrecognized filer type: '?' using 'void*' */ void*x7; id x8; void*x9; }*)autocorrectionData;
- (id)automaticallySelectedOverlay;
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;
- (bool)becomeFirstResponder;
- (void)beginSelectionChange;
- (id)beginningOfDocument;
- (id)browsingContextController;
- (bool)canBecomeFirstResponder;
- (bool)canPerformAction:(SEL)arg1 withSender:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (void)changeBlockSelectionWithTouchAt:(struct CGPoint { double x1; double x2; })arg1 withSelectionTouch:(long long)arg2 forHandle:(long long)arg3;
- (void)changeSelectionWithGestureAt:(struct CGPoint { double x1; double x2; })arg1 withGesture:(long long)arg2 withState:(long long)arg3;
- (void)changeSelectionWithTouchAt:(struct CGPoint { double x1; double x2; })arg1 withSelectionTouch:(long long)arg2 baseIsStart:(bool)arg3;
- (void)changeSelectionWithTouchesFrom:(struct CGPoint { double x1; double x2; })arg1 to:(struct CGPoint { double x1; double x2; })arg2 withGesture:(long long)arg3 withState:(long long)arg4;
- (unsigned short)characterBeforeCaretSelection;
- (id)characterRangeAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;
- (void)cleanupInteraction;
- (void)clearSelection;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { double x1; double x2; })arg1 withinRange:(id)arg2;
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;
- (void)copy:(id)arg1;
- (void)cut:(id)arg1;
- (void)dealloc;
- (void)deleteBackward;
- (void)didFinishScrolling;
- (void)didInterruptScrolling;
- (void)didMoveToWindow;
- (void)didUpdateVisibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 unobscuredRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2 unobscuredRectInScrollViewCoordinates:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3 scale:(double)arg4 minimumScale:(double)arg5 inStableState:(bool)arg6 isChangingObscuredInsetsInteractively:(bool)arg7;
- (void)didZoomToScale:(double)arg1;
- (id)endOfDocument;
- (void)endSelectionChange;
- (void)ensurePositionInformationIsUpToDate:(struct CGPoint { double x1; double x2; })arg1;
- (void)executeEditCommandWithCallback:(id)arg1;
- (void)fileUploadPanelDidDismiss:(id)arg1;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (id)fontForCaretSelection;
- (id)formAccessoryView;
- (bool)gestureRecognizer:(id)arg1 canBePreventedByGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 canPreventGestureRecognizer:(id)arg2;
- (bool)gestureRecognizer:(id)arg1 shouldRecognizeSimultaneouslyWithGestureRecognizer:(id)arg2;
- (bool)gestureRecognizerShouldBegin:(id)arg1;
- (void)handleKeyWebEvent:(id)arg1;
- (bool)hasContent;
- (bool)hasMarkedText;
- (bool)hasSelectablePositionAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (bool)hasSelection;
- (bool)hasText;
- (id)hitTest:(struct CGPoint { double x1; double x2; })arg1 withEvent:(id)arg2;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 context:(struct WebContext { int (**x1)(); id x2; int (**x3)(); struct MessageReceiverMap { struct HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<IPC::StringReference, WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> >, IPC::StringReference::Hash, WTF::HashMap<IPC::StringReference, IPC::MessageReceiver *, IPC::StringReference::Hash, WTF::HashTraits<IPC::StringReference>, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<IPC::StringReference> > { struct KeyValuePair<IPC::StringReference, IPC::MessageReceiver *> {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_1_2_1; } x_4_1_1; struct HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> > { struct HashTable<std::__1::pair<IPC::StringReference, unsigned long long>, WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> >, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashMap<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *, WTF::PairHash<IPC::StringReference, unsigned long long>, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> >, WTF::HashTraits<IPC::MessageReceiver *> >::KeyValuePairTraits, WTF::HashTraits<std::__1::pair<IPC::StringReference, unsigned long long> > > { struct KeyValuePair<std::__1::pair<IPC::StringReference, unsigned long long>, IPC::MessageReceiver *> {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_2_2_1; } x_4_1_2; } x4; int x5; unsigned int x6; struct Vector<WTF::RefPtr<WebKit::WebProcessProxy>, 0, WTF::CrashOnOverflow> { struct RefPtr<WebKit::WebProcessProxy> {} *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; bool x8; struct WebProcessProxy {} *x9; struct Ref<WebKit::WebPageGroup> { struct WebPageGroup {} *x_10_1_1; } x10; struct RefPtr<API::Object> { struct Object {} *x_11_1_1; } x11; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_12_1_1; } x12; struct WebContextInjectedBundleClient { struct WKContextInjectedBundleClientV1 { struct WKContextInjectedBundleClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); } x_13_1_1; } x13; struct WebContextClient { struct WKContextClientV1 { struct WKContextClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); int (*x_1_2_4)(); int (*x_1_2_5)(); } x_14_1_1; } x14; struct WebContextConnectionClient { struct WKContextConnectionClientV0 { struct WKContextConnectionClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); } x_15_1_1; } x15; struct unique_ptr<API::DownloadClient, std::__1::default_delete<API::DownloadClient> > { struct __compressed_pair<API::DownloadClient *, std::__1::default_delete<API::DownloadClient> > { struct DownloadClient {} *x_1_2_1; } x_16_1_1; } x16; struct unique_ptr<API::HistoryClient, std::__1::default_delete<API::HistoryClient> > { struct __compressed_pair<API::HistoryClient *, std::__1::default_delete<API::HistoryClient> > { struct HistoryClient {} *x_1_2_1; } x_17_1_1; } x17; struct RefPtr<WebKit::VisitedLinkProvider> { struct VisitedLinkProvider {} *x_18_1_1; } x18; bool x19; struct PlugInAutoStartProvider { struct WebContext {} *x_20_1_1; struct HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<WTF::String, WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> >, WTF::CaseFoldingHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::HashMap<unsigned int, double, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<double> > > > > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_2_2_1; } x_20_1_2; struct HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > > { struct HashTable<WebCore::SessionID, WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >, WTF::SessionIDHash, WTF::HashMap<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> >, WTF::SessionIDHash, WTF::HashTraits<WebCore::SessionID>, WTF::HashTraits<WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > >::KeyValuePairTraits, WTF::HashTraits<WebCore::SessionID> > { struct KeyValuePair<WebCore::SessionID, WTF::HashMap<unsigned int, WTF::String, WTF::IntHash<unsigned int>, WTF::HashTraits<unsigned int>, WTF::HashTraits<WTF::String> > > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_3_2_1; } x_20_1_3; struct Vector<WTF::String, 0, WTF::CrashOnOverflow> { struct String {} *x_4_2_1; unsigned int x_4_2_2; unsigned int x_4_2_3; } x_20_1_4; } x20; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_21_1_1; } x21; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_22_1_1; } x22; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_23_1_1; } x23; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_24_1_1; } x24; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_25_1_1; } x25; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_26_1_1; } x26; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_27_1_1; } x27; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_28_1_1; } x28; bool x29; bool x30; struct Vector<std::__1::pair<WTF::String, WTF::RefPtr<API::Object> >, 0, WTF::CrashOnOverflow> { struct pair<WTF::String, WTF::RefPtr<API::Object> > {} *x_31_1_1; unsigned int x_31_1_2; unsigned int x_31_1_3; } x31; int x32; bool x33; double x34; struct RefPtr<WebKit::WebIconDatabase> { struct WebIconDatabase {} *x_35_1_1; } x35; struct RefPtr<WebKit::StorageManager> { struct StorageManager {} *x_36_1_1; } x36; struct HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > > { struct HashTable<const char *, WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > >, WTF::PtrHash<const char *>, WTF::HashMap<const char *, WTF::RefPtr<WebKit::WebContextSupplement>, WTF::PtrHash<const char *>, WTF::HashTraits<const char *>, WTF::HashTraits<WTF::RefPtr<WebKit::WebContextSupplement> > >::KeyValuePairTraits, WTF::HashTraits<const char *> > { struct KeyValuePair<const char *, WTF::RefPtr<WebKit::WebContextSupplement> > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_37_1_1; } x37; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_38_1_1; } x38; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_39_1_1; } x39; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_40_1_1; } x40; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_41_1_1; } x41; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_42_1_1; } x42; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_43_1_1; } x43; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_44_1_1; } x44; bool x45; bool x46; bool x47; struct RefPtr<WebKit::NetworkProcessProxy> { struct NetworkProcessProxy {} *x_48_1_1; } x48; struct RefPtr<WebKit::DatabaseProcessProxy> { struct DatabaseProcessProxy {} *x_49_1_1; } x49; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GenericCallback<WebKit::ImmutableDictionary *> > > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_50_1_1; } x50; struct HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::StatisticsRequest> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::StatisticsRequest> > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_51_1_1; } x51; bool x52; struct RetainPtr<NSMutableDictionary> { void *x_53_1_1; } x53; }*)arg2 configuration:(struct WebPageConfiguration { struct WebPageGroup {} *x1; struct WebPreferences {} *x2; struct WebUserContentControllerProxy {} *x3; struct VisitedLinkProvider {} *x4; struct Session {} *x5; struct WebPageProxy {} *x6; struct HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> >, WTF::StringHash, WTF::HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_7_1_1; } x7; })arg3 webView:(id)arg4;
- (id)inputAccessoryView;
- (id)inputDelegate;
- (id)inputView;
- (void)insertText:(id)arg1;
- (id)interactionAssistant;
- (double)inverseScale;
- (bool)isAnyTouchOverActiveArea:(id)arg1;
- (bool)isAssistingNode;
- (bool)isBackground;
- (bool)isEditable;
- (bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;
- (bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;
- (bool)isReplaceAllowed;
- (bool)isShowingInspectorIndication;
- (id)keyCommands;
- (struct CGPoint { double x1; double x2; })lastInteractionLocation;
- (id)markedText;
- (id)markedTextRange;
- (id)markedTextStyle;
- (id)metadataDictionariesForDictationResults;
- (void)moveBackward:(unsigned int)arg1;
- (void)moveByOffset:(long long)arg1;
- (void)moveForward:(unsigned int)arg1;
- (id)nextUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (struct WebPageProxy { int (**x1)(); id x2; int (**x3)(); int (**x4)(); int (**x5)(); struct PageClient {} *x6; struct unique_ptr<API::LoaderClient, std::__1::default_delete<API::LoaderClient> > { struct __compressed_pair<API::LoaderClient *, std::__1::default_delete<API::LoaderClient> > { struct LoaderClient {} *x_1_2_1; } x_7_1_1; } x7; struct unique_ptr<API::PolicyClient, std::__1::default_delete<API::PolicyClient> > { struct __compressed_pair<API::PolicyClient *, std::__1::default_delete<API::PolicyClient> > { struct PolicyClient {} *x_1_2_1; } x_8_1_1; } x8; struct unique_ptr<API::FormClient, std::__1::default_delete<API::FormClient> > { struct __compressed_pair<API::FormClient *, std::__1::default_delete<API::FormClient> > { struct FormClient {} *x_1_2_1; } x_9_1_1; } x9; struct unique_ptr<API::UIClient, std::__1::default_delete<API::UIClient> > { struct __compressed_pair<API::UIClient *, std::__1::default_delete<API::UIClient> > { struct UIClient {} *x_1_2_1; } x_10_1_1; } x10; struct unique_ptr<API::FindClient, std::__1::default_delete<API::FindClient> > { struct __compressed_pair<API::FindClient *, std::__1::default_delete<API::FindClient> > { struct FindClient {} *x_1_2_1; } x_11_1_1; } x11; struct WebFindMatchesClient { struct WKPageFindMatchesClientV0 { struct WKPageFindMatchesClientBase { int x_1_3_1; void *x_1_3_2; } x_1_2_1; int (*x_1_2_2)(); int (*x_1_2_3)(); } x_12_1_1; } x12; struct unique_ptr<WebKit::DrawingAreaProxy, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct __compressed_pair<WebKit::DrawingAreaProxy *, std::__1::default_delete<WebKit::DrawingAreaProxy> > { struct DrawingAreaProxy {} *x_1_2_1; } x_13_1_1; } x13; struct unique_ptr<WebKit::RemoteScrollingCoordinatorProxy, std::__1::default_delete<WebKit::RemoteScrollingCoordinatorProxy> > { struct __compressed_pair<WebKit::RemoteScrollingCoordinatorProxy *, std::__1::default_delete<WebKit::RemoteScrollingCoordinatorProxy> > { struct RemoteScrollingCoordinatorProxy {} *x_1_2_1; } x_14_1_1; } x14; struct Ref<WebKit::WebProcessProxy> { struct WebProcessProxy {} *x_15_1_1; } x15; struct Ref<WebKit::WebPageGroup> { struct WebPageGroup {} *x_16_1_1; } x16; struct Ref<WebKit::WebPreferences> { struct WebPreferences {} *x_17_1_1; } x17; struct RefPtr<WebKit::WebUserContentControllerProxy> { struct WebUserContentControllerProxy {} *x_18_1_1; } x18; struct Ref<WebKit::VisitedLinkProvider> { struct VisitedLinkProvider {} *x_19_1_1; } x19; struct RefPtr<WebKit::WebFrameProxy> { struct WebFrameProxy {} *x_20_1_1; } x20; struct RefPtr<WebKit::WebFrameProxy> { struct WebFrameProxy {} *x_21_1_1; } x21; struct RefPtr<WebKit::WebFrameProxy> { struct WebFrameProxy {} *x_22_1_1; } x22; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_23_1_1; } x23; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_24_1_1; } x24; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_25_1_1; } x25; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_26_1_1; } x26; struct RefPtr<WebKit::WebInspectorProxy> { struct WebInspectorProxy {} *x_27_1_1; } x27; struct RefPtr<WebKit::WebVideoFullscreenManagerProxy> { struct WebVideoFullscreenManagerProxy {} *x_28_1_1; } x28; struct VisibleContentRectUpdateInfo { struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_1_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_1_2_2; } x_29_1_1; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_29_1_2; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_3_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_3_2_2; } x_29_1_3; struct FloatRect { struct FloatPoint { float x_1_3_1; float x_1_3_2; } x_4_2_1; struct FloatSize { float x_2_3_1; float x_2_3_2; } x_4_2_2; } x_29_1_4; double x_29_1_5; bool x_29_1_6; bool x_29_1_7; double x_29_1_8; double x_29_1_9; double x_29_1_10; double x_29_1_11; unsigned long long x_29_1_12; } x29; bool x30; unsigned long long x31; int x32; bool x33; bool x34; unsigned long long x35; unsigned long long x36; struct CallbackMap { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::CallbackBase>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::CallbackBase> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::CallbackBase> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::CallbackBase> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::CallbackBase>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::CallbackBase> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::CallbackBase> > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_1_2_1; } x_37_1_1; } x37; struct HashSet<unsigned long long, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long> > { struct HashTable<unsigned long long, unsigned long long, WTF::IdentityExtractor, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<unsigned long long> > { unsigned long long *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_38_1_1; } x38; struct HashSet<WebKit::WebEditCommandProxy *, WTF::PtrHash<WebKit::WebEditCommandProxy *>, WTF::HashTraits<WebKit::WebEditCommandProxy *> > { struct HashTable<WebKit::WebEditCommandProxy *, WebKit::WebEditCommandProxy *, WTF::IdentityExtractor, WTF::PtrHash<WebKit::WebEditCommandProxy *>, WTF::HashTraits<WebKit::WebEditCommandProxy *>, WTF::HashTraits<WebKit::WebEditCommandProxy *> > { struct WebEditCommandProxy {} **x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_39_1_1; } x39; struct HashSet<WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::String, WTF::IdentityExtractor, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct String {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_40_1_1; } x40; struct RefPtr<WebKit::WebPopupMenuProxy> { struct WebPopupMenuProxy {} *x_41_1_1; } x41; struct RefPtr<WebKit::WebOpenPanelResultListenerProxy> { struct WebOpenPanelResultListenerProxy {} *x_42_1_1; } x42; struct GeolocationPermissionRequestManagerProxy { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::GeolocationPermissionRequestProxy> > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_1_2_1; } x_43_1_1; struct WebPageProxy {} *x_43_1_2; } x43; struct NotificationPermissionRequestManagerProxy { struct HashMap<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::NotificationPermissionRequest> > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest> > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest>, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<WTF::RefPtr<WebKit::NotificationPermissionRequest> > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, WTF::RefPtr<WebKit::NotificationPermissionRequest> > {} *x_1_3_1; int x_1_3_2; int x_1_3_3; int x_1_3_4; int x_1_3_5; } x_1_2_1; } x_44_1_1; struct WebPageProxy {} *x_44_1_2; } x44; unsigned int x45; bool x46; struct unique_ptr<WebKit::ProcessThrottler::ForegroundActivityToken, std::__1::default_delete<WebKit::ProcessThrottler::ForegroundActivityToken> > { struct __compressed_pair<WebKit::ProcessThrottler::ForegroundActivityToken *, std::__1::default_delete<WebKit::ProcessThrottler::ForegroundActivityToken> > { struct ForegroundActivityToken {} *x_1_2_1; } x_47_1_1; } x47; struct Ref<WebKit::WebBackForwardList> { struct WebBackForwardList {} *x_48_1_1; } x48; bool x49; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_50_1_1; } x50; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_51_1_1; } x51; int x52; struct EditorState { bool x_53_1_1; bool x_53_1_2; bool x_53_1_3; bool x_53_1_4; bool x_53_1_5; bool x_53_1_6; bool x_53_1_7; bool x_53_1_8; bool x_53_1_9; bool x_53_1_10; int x_53_1_11; int x_53_1_12; int x_53_1_13; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_14_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_14_2_2; } x_53_1_14; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_15_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_15_2_2; } x_53_1_15; struct Vector<WebCore::SelectionRect, 0, WTF::CrashOnOverflow> { struct SelectionRect {} *x_16_2_1; unsigned int x_16_2_2; unsigned int x_16_2_3; } x_53_1_16; unsigned long long x_53_1_17; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_18_2_1; } x_53_1_18; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_19_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_19_2_2; } x_53_1_19; struct IntRect { struct IntPoint { int x_1_3_1; int x_1_3_2; } x_20_2_1; struct IntSize { int x_2_3_1; int x_2_3_2; } x_20_2_2; } x_53_1_20; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_21_2_1; } x_53_1_21; unsigned int x_53_1_22; } x53; double x54; double x55; double x56; float x57; float x58; float x59; int x60; bool x61; bool x62; struct Color { unsigned int x_63_1_1; bool x_63_1_2; } x63; struct Color { unsigned int x_64_1_1; bool x_64_1_2; } x64; bool x65; struct IntSize { int x_66_1_1; int x_66_1_2; } x66; bool x67; int x68; bool x69; double x70; double x71; bool x72; bool x73; bool x74; bool x75; bool x76; bool x77; struct ResourceRequest {} *x78; bool x79; int x80; unsigned long long x81; bool x82; bool x83; int x84; unsigned long long x85; struct Deque<WebKit::NativeWebKeyboardEvent, 0> { unsigned long long x_86_1_1; unsigned long long x_86_1_2; struct VectorBuffer<WebKit::NativeWebKeyboardEvent, 0> { struct NativeWebKeyboardEvent {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_86_1_3; } x86; struct Deque<WebKit::NativeWebWheelEvent, 0> { unsigned long long x_87_1_1; unsigned long long x_87_1_2; struct VectorBuffer<WebKit::NativeWebWheelEvent, 0> { struct NativeWebWheelEvent {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_87_1_3; } x87; struct Deque<std::__1::unique_ptr<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow>, std::__1::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow> > >, 0> { unsigned long long x_88_1_1; unsigned long long x_88_1_2; struct VectorBuffer<std::__1::unique_ptr<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow>, std::__1::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow> > >, 0> { struct unique_ptr<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow>, std::__1::default_delete<WTF::Vector<WebKit::NativeWebWheelEvent, 0, WTF::CrashOnOverflow> > > {} *x_3_2_1; unsigned int x_3_2_2; unsigned int x_3_2_3; } x_88_1_3; } x88; bool x89; struct unique_ptr<WebKit::NativeWebMouseEvent, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct __compressed_pair<WebKit::NativeWebMouseEvent *, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct NativeWebMouseEvent {} *x_1_2_1; } x_90_1_1; } x90; struct unique_ptr<WebKit::NativeWebMouseEvent, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct __compressed_pair<WebKit::NativeWebMouseEvent *, std::__1::default_delete<WebKit::NativeWebMouseEvent> > { struct NativeWebMouseEvent {} *x_1_2_1; } x_91_1_1; } x91; bool x92; unsigned long long x93; struct Ref<API::Session> { struct Session {} *x_94_1_1; } x94; bool x95; bool x96; bool x97; bool x98; long long x99; bool x100; unsigned int x101; bool x102; struct PageLoadState { struct Vector<WebKit::PageLoadState::Observer *, 0, WTF::CrashOnOverflow> { struct Observer {} **x_1_2_1; unsigned int x_1_2_2; unsigned int x_1_2_3; } x_103_1_1; struct WebPageProxy {} *x_103_1_2; struct Data { int x_3_2_1; bool x_3_2_2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_3_3_1; } x_3_2_3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_4_3_1; } x_3_2_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_5_3_1; } x_3_2_5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_6_3_1; } x_3_2_6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_7_3_1; } x_3_2_7; bool x_3_2_8; bool x_3_2_9; double x_3_2_10; bool x_3_2_11; } x_103_1_3; struct Data { int x_4_2_1; bool x_4_2_2; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_3_3_1; } x_4_2_3; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_4_3_1; } x_4_2_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_5_3_1; } x_4_2_5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_6_3_1; } x_4_2_6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_4_1; } x_7_3_1; } x_4_2_7; bool x_4_2_8; bool x_4_2_9; double x_4_2_10; bool x_4_2_11; } x_103_1_4; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_3_1; } x_5_2_1; } x_103_1_5; bool x_103_1_6; unsigned int x_103_1_7; } x103; bool x104; bool x105; bool x106; bool x107; bool x108; bool x109; bool x110; bool x111; bool x112; bool x113; bool x114; bool x115; bool x116; bool x117; bool x118; bool x119; bool x120; bool x121; unsigned int x122; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_123_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_123_1_2; } x123; unsigned long long x124; bool x125; bool x126; bool x127; struct IntSize { int x_128_1_1; int x_128_1_2; } x128; float x129; bool x130; bool x131; struct HashMap<WTF::String, WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WTF::String>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WTF::String> >, WTF::StringHash, WTF::HashMap<WTF::String, WTF::String, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::String> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WTF::String> {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_132_1_1; } x132; struct unique_ptr<WebCore::RunLoopObserver, std::__1::default_delete<WebCore::RunLoopObserver> > { struct __compressed_pair<WebCore::RunLoopObserver *, std::__1::default_delete<WebCore::RunLoopObserver> > { struct RunLoopObserver {} *x_1_2_1; } x_133_1_1; } x133; int x134; unsigned long long x135; struct HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> > { struct HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> >, WTF::StringHash, WTF::HashMap<WTF::String, WebKit::WebPreferencesStore::Value, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WebKit::WebPreferencesStore::Value> >::KeyValuePairTraits, WTF::HashTraits<WTF::String> > { struct KeyValuePair<WTF::String, WebKit::WebPreferencesStore::Value> {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_136_1_1; } x136; unsigned int x137; bool x138; }*)page;
- (void)paste:(id)arg1;
- (bool)pointIsInAssistedNode:(struct CGPoint { double x1; double x2; })arg1;
- (bool)pointIsNearMarkedText:(struct CGPoint { double x1; double x2; })arg1;
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;
- (const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_10_1_1; } x10; }*)positionInformation;
- (const struct InteractionInformationAtPosition { struct IntPoint { int x_1_1_1; int x_1_1_2; } x1; bool x2; bool x3; bool x4; bool x5; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_6_1_1; } x6; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_7_1_1; } x7; struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_2_1; } x_8_1_1; } x8; struct IntRect { struct IntPoint { int x_1_2_1; int x_1_2_2; } x_9_1_1; struct IntSize { int x_2_2_1; int x_2_2_2; } x_9_1_2; } x9; struct RefPtr<WebKit::ShareableBitmap> { struct ShareableBitmap {} *x_10_1_1; } x10; }*)positionInformationForActionSheetAssistant:(id)arg1;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;
- (id)previousUnperturbedDictationResultBoundaryFromPosition:(id)arg1;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectContainingCaretSelection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })rectForNSRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg1;
- (void)replace:(id)arg1;
- (void)replaceDictatedText:(id)arg1 withText:(id)arg2;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)replaceText:(id)arg1 withText:(id)arg2;
- (void)requestAutocorrectionContextWithCompletionHandler:(id)arg1;
- (void)requestAutocorrectionRectsForString:(id)arg1 withCompletionHandler:(id)arg2;
- (void)requestDictationContext:(id)arg1;
- (bool)requiresAccessoryView;
- (bool)requiresKeyEvents;
- (bool)resignFirstResponder;
- (void)scrollViewWillStartPanOrPinchGesture;
- (void)select:(id)arg1;
- (void)selectAll;
- (void)selectAll:(id)arg1;
- (void)selectWordBackward;
- (void)selectWordForReplacement;
- (id)selectedDOMRange;
- (id)selectedText;
- (id)selectedTextRange;
- (long long)selectionGranularity;
- (struct _NSRange { unsigned long long x1; unsigned long long x2; })selectionRange;
- (id)selectionRectsForRange:(id)arg1;
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;
- (void)setBottomBufferHeight:(double)arg1;
- (void)setInputDelegate:(id)arg1;
- (void)setMarkedText:(id)arg1;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(bool)arg2;
- (void)setSelectedTextRange:(id)arg1;
- (void)setShowingInspectorIndication:(bool)arg1;
- (void)setupInteraction;
- (bool)shouldIgnoreWebTouch;
- (id)supportedPasteboardTypesForCurrentSelection;
- (void)takeTraitsFrom:(id)arg1;
- (id)textColorForCaretSelection;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textFirstRect;
- (id)textInRange:(id)arg1;
- (id)textInputTraits;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })textLastRect;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)textStylingAtPosition:(id)arg1 inDirection:(long long)arg2;
- (void)toggleBoldface:(id)arg1;
- (void)toggleItalics:(id)arg1;
- (void)toggleUnderline:(id)arg1;
- (id)tokenizer;
- (id)undoManager;
- (void)unmarkText;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })unobscuredContentRect;
- (id)unscaledView;
- (void)updateFixedClippingView:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)updatePositionInformationForActionSheetAssistant:(id)arg1;
- (void)useSelectionAssistantWithMode:(int)arg1;
- (id)webSelectionAssistant;
- (id)webSelectionRects;
- (void)willMoveToWindow:(id)arg1;
- (void)willStartZoomOrScroll;
- (id)wordContainingCaretSelection;
- (id)wordRangeContainingCaretSelection;

@end
