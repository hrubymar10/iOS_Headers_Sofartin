/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/WebKit.framework/WebKit
 */

@interface WKWebView : UIView <UIScrollViewDelegate> {
    bool _allowsBackForwardNavigationGestures;
    struct RetainPtr<WKWebViewConfiguration> { 
        void *m_ptr; 
    } _configuration;
    struct RetainPtr<WKContentView> { 
        void *m_ptr; 
    } _contentView;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _customContentFixedOverlayView;
    struct RetainPtr<UIView<WKWebViewContentProvider> > { 
        void *m_ptr; 
    } _customContentView;
    bool _delayUpdateVisibleContentRects;
    int _dynamicViewportUpdateMode;
    struct FloatRect { 
        struct FloatPoint { 
            float m_x; 
            float m_y; 
        } m_location; 
        struct FloatSize { 
            float m_width; 
            float m_height; 
        } m_size; 
    } _exposedRectToRestore;
    unsigned long long _firstPaintAfterCommitLoadTransactionID;
    unsigned long long _firstTransactionIDAfterPageRestore;
    struct WeakObjCPtr<id<_WKFormDelegate> > { 
        id m_weakReference; 
    } _formDelegate;
    struct unique_ptr<WebKit::ViewGestureController, std::__1::default_delete<WebKit::ViewGestureController> > { 
        struct __compressed_pair<WebKit::ViewGestureController *, std::__1::default_delete<WebKit::ViewGestureController> > { 
            struct ViewGestureController {} *__first_; 
        } __ptr_; 
    } _gestureController;
    bool _hadDelayedUpdateVisibleContentRects;
    bool _hasCommittedLoadForMainFrame;
    bool _haveSetObscuredInsets;
    struct CGRect { 
        struct CGPoint { 
            double x; 
            double y; 
        } origin; 
        struct CGSize { 
            double width; 
            double height; 
        } size; 
    } _inputViewBounds;
    long long _interfaceOrientationOverride;
    bool _isChangingObscuredInsetsInteractively;
    double _lastAdjustmentForScroller;
    struct CGSize { 
        double width; 
        double height; 
    } _maximumUnobscuredSizeOverride;
    struct CGSize { 
        double width; 
        double height; 
    } _minimumLayoutSizeOverride;
    struct CGSize { 
        double width; 
        double height; 
    } _minimumLayoutSizeOverrideForMinimalUI;
    struct unique_ptr<WebKit::NavigationState, std::__1::default_delete<WebKit::NavigationState> > { 
        struct __compressed_pair<WebKit::NavigationState *, std::__1::default_delete<WebKit::NavigationState> > { 
            struct NavigationState {} *__first_; 
        } __ptr_; 
    } _navigationState;
    bool _needsResetViewStateAfterCommitLoadForMainFrame;
    bool _needsToNotifyDelegateAboutMinimalUI;
    bool _needsToRestoreExposedRect;
    bool _needsToRestoreUnobscuredCenter;
    struct UIEdgeInsets { 
        double top; 
        double left; 
        double bottom; 
        double right; 
    } _obscuredInsets;
    unsigned long long _observedRenderingProgressEvents;
    bool _overridesInterfaceOrientation;
    bool _overridesMaximumUnobscuredSize;
    bool _overridesMinimumLayoutSize;
    bool _overridesMinimumLayoutSizeForMinimalUI;
    struct RefPtr<WebKit::WebPageProxy> { 
        struct WebPageProxy {} *m_ptr; 
    } _page;
    bool _pageIsPrintingToPDF;
    struct RetainPtr<CGPDFDocument *> { 
        void *m_ptr; 
    } _printedDocument;
    struct RetainPtr<_WKRemoteObjectRegistry> { 
        void *m_ptr; 
    } _remoteObjectRegistry;
    struct CATransform3D { 
        double m11; 
        double m12; 
        double m13; 
        double m14; 
        double m21; 
        double m22; 
        double m23; 
        double m24; 
        double m31; 
        double m32; 
        double m33; 
        double m34; 
        double m41; 
        double m42; 
        double m43; 
        double m44; 
    } _resizeAnimationTransformAdjustments;
    unsigned long long _resizeAnimationTransformTransactionID;
    struct RetainPtr<UIView> { 
        void *m_ptr; 
    } _resizeAnimationView;
    double _scaleToRestore;
    struct RetainPtr<WKScrollView> { 
        void *m_ptr; 
    } _scrollView;
    struct Color { 
        unsigned int m_color; 
        bool m_valid; 
    } _scrollViewBackgroundColor;
    struct unique_ptr<WebKit::UIDelegate, std::__1::default_delete<WebKit::UIDelegate> > { 
        struct __compressed_pair<WebKit::UIDelegate *, std::__1::default_delete<WebKit::UIDelegate> > { 
            struct UIDelegate {} *__first_; 
        } __ptr_; 
    } _uiDelegate;
    struct FloatPoint { 
        float m_x; 
        float m_y; 
    } _unobscuredCenterToRestore;
    bool _usesMinimalUI;
    double _viewportMetaTagWidth;
}

@property (nonatomic) <WKUIDelegate> *UIDelegate;
@property (nonatomic, readonly, copy) NSURL *URL;
@property (nonatomic, readonly) NSString *_MIMEType;
@property (setter=_setAddsVisitedLinks:, nonatomic) bool _addsVisitedLinks;
@property (setter=_setAllowsRemoteInspection:, nonatomic) bool _allowsRemoteInspection;
@property (setter=_setApplicationNameForUserAgent:, copy) NSString *_applicationNameForUserAgent;
@property (setter=_setBackgroundExtendsBeyondPage:, nonatomic) bool _backgroundExtendsBeyondPage;
@property (nonatomic, readonly) NSArray *_certificateChain;
@property (nonatomic, readonly) NSURL *_committedURL;
@property (nonatomic, readonly) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _computedContentInset;
@property (setter=_setCustomUserAgent:, copy) NSString *_customUserAgent;
@property (nonatomic, readonly) NSData *_dataForDisplayedPDF;
@property (getter=_isDisplayingPDF, nonatomic, readonly) bool _displayingPDF;
@property (getter=_isDisplayingStandaloneImageDocument, nonatomic, readonly) bool _displayingStandaloneImageDocument;
@property (setter=_setFindDelegate:, nonatomic) <_WKFindDelegate> *_findDelegate;
@property (setter=_setFormDelegate:, nonatomic) <_WKFormDelegate> *_formDelegate;
@property (setter=_setGapBetweenPages:, nonatomic) double _gapBetweenPages;
@property (nonatomic, readonly) WKBrowsingContextHandle *_handle;
@property (setter=_setHistoryDelegate:, nonatomic) <WKHistoryDelegatePrivate> *_historyDelegate;
@property (setter=_setInterfaceOrientationOverride:, nonatomic) long long _interfaceOrientationOverride;
@property (setter=_setMaximumUnobscuredSizeOverride:, nonatomic) struct CGSize { double x1; double x2; } _maximumUnobscuredSizeOverride;
@property (setter=_setMinimumLayoutSizeOverride:, nonatomic) struct CGSize { double x1; double x2; } _minimumLayoutSizeOverride;
@property (setter=_setMinimumLayoutSizeOverrideForMinimalUI:, nonatomic) struct CGSize { double x1; double x2; } _minimumLayoutSizeOverrideForMinimalUI;
@property (nonatomic, readonly) bool _networkRequestsInProgress;
@property (setter=_setObscuredInsets:, nonatomic) struct UIEdgeInsets { double x1; double x2; double x3; double x4; } _obscuredInsets;
@property (setter=_setObservedRenderingProgressEvents:, nonatomic) unsigned long long _observedRenderingProgressEvents;
@property (readonly) unsigned long long _pageCount;
@property (setter=_setPageLength:, nonatomic) double _pageLength;
@property (setter=_setPageZoomFactor:, nonatomic) double _pageZoomFactor;
@property (setter=_setPaginationBehavesLikeColumns:, nonatomic) bool _paginationBehavesLikeColumns;
@property (setter=_setPaginationMode:, nonatomic) long long _paginationMode;
@property (setter=_setPrintedDocument:, nonatomic) struct CGPDFDocument { }*_printedDocument;
@property (nonatomic, readonly) id _remoteObjectRegistry;
@property (nonatomic, readonly) _WKSessionState *_sessionState;
@property (nonatomic, readonly) NSData *_sessionStateData;
@property (getter=_isShowingNavigationGestureSnapshot, nonatomic, readonly) bool _showingNavigationGestureSnapshot;
@property (nonatomic, readonly) NSString *_suggestedFilenameForDisplayedPDF;
@property (nonatomic, readonly) bool _supportsTextZoom;
@property (setter=_setTextZoomFactor:, nonatomic) double _textZoomFactor;
@property (nonatomic, readonly) NSURL *_unreachableURL;
@property (nonatomic, readonly) bool _usesMinimalUI;
@property (setter=_setUsesMinimalUI:, nonatomic) bool _usesMinimalUI;
@property (nonatomic, readonly) double _viewportMetaTagWidth;
@property (nonatomic, readonly) int _webProcessIdentifier;
@property (nonatomic, readonly) _WKWebViewPrintFormatter *_webViewPrintFormatter;
@property (nonatomic) bool allowsBackForwardNavigationGestures;
@property (nonatomic, readonly) WKBackForwardList *backForwardList;
@property (nonatomic, readonly) bool canGoBack;
@property (nonatomic, readonly) bool canGoForward;
@property (nonatomic, readonly, copy) WKWebViewConfiguration *configuration;
@property (readonly, copy) NSString *debugDescription;
@property (readonly, copy) NSString *description;
@property (nonatomic, readonly) double estimatedProgress;
@property (nonatomic, readonly) bool hasOnlySecureContent;
@property (readonly) unsigned long long hash;
@property (getter=isLoading, nonatomic, readonly) bool loading;
@property (nonatomic) <WKNavigationDelegate> *navigationDelegate;
@property (nonatomic, readonly) UIScrollView *scrollView;
@property (readonly) Class superclass;
@property (nonatomic, readonly, copy) NSString *title;

- (id).cxx_construct;
- (void).cxx_destruct;
- (id)UIDelegate;
- (id)URL;
- (id)_MIMEType;
- (bool)_addsVisitedLinks;
- (struct CGPoint { double x1; double x2; })_adjustedContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (bool)_allowsRemoteInspection;
- (id)_applicationNameForUserAgent;
- (bool)_backgroundExtendsBeyondPage;
- (void)_beginAnimatedResizeWithUpdates:(id)arg1;
- (void)_beginInteractiveObscuredInsetsChange;
- (id)_certificateChain;
- (void)_close;
- (id)_committedURL;
- (long long)_computePageCountAndStartDrawingToPDFForFrame:(id)arg1 printInfo:(const struct PrintInfo { float x1; float x2; float x3; }*)arg2 firstPage:(unsigned int)arg3 computedTotalScaleFactor:(double*)arg4;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_computedContentInset;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_contentRectForUserInteraction;
- (id)_contentSizeCategory;
- (void)_contentSizeCategoryDidChange:(id)arg1;
- (void)_countStringMatches:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (id)_currentContentView;
- (id)_customUserAgent;
- (id)_dataForDisplayedPDF;
- (void)_didCommitLayerTree:(const struct RemoteLayerTreeTransaction { unsigned long long x1; struct Vector<WTF::RefPtr<WebKit::PlatformCALayerRemote>, 0, WTF::CrashOnOverflow> { struct RefPtr<WebKit::PlatformCALayerRemote> {} *x_2_1_1; unsigned int x_2_1_2; unsigned int x_2_1_3; } x2; struct HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > > { struct HashTable<unsigned long long, WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >, WTF::IntHash<unsigned long long>, WTF::HashMap<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> >, WTF::IntHash<unsigned long long>, WTF::HashTraits<unsigned long long>, WTF::HashTraits<std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > >::KeyValuePairTraits, WTF::HashTraits<unsigned long long> > { struct KeyValuePair<unsigned long long, std::__1::unique_ptr<WebKit::RemoteLayerTreeTransaction::LayerProperties, std::__1::default_delete<WebKit::RemoteLayerTreeTransaction::LayerProperties> > > {} *x_1_2_1; int x_1_2_2; int x_1_2_3; int x_1_2_4; int x_1_2_5; } x_3_1_1; } x3; struct Vector<WebKit::RemoteLayerTreeTransaction::LayerCreationProperties, 0, WTF::CrashOnOverflow> { struct LayerCreationProperties {} *x_4_1_1; unsigned int x_4_1_2; unsigned int x_4_1_3; } x4; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_5_1_1; unsigned int x_5_1_2; unsigned int x_5_1_3; } x5; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_6_1_1; unsigned int x_6_1_2; unsigned int x_6_1_3; } x6; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_7_1_1; unsigned int x_7_1_2; unsigned int x_7_1_3; } x7; struct Vector<unsigned long long, 0, WTF::CrashOnOverflow> { unsigned long long *x_8_1_1; unsigned int x_8_1_2; unsigned int x_8_1_3; } x8; struct IntSize { int x_9_1_1; int x_9_1_2; } x9; struct Color { unsigned int x_10_1_1; bool x_10_1_2; } x10; double x11; double x12; double x13; unsigned long long x14; unsigned long long x15; bool x16; bool x17; }*)arg1;
- (void)_didCommitLoadForMainFrame;
- (void)_didFinishLoadingDataForCustomContentProviderWithSuggestedFilename:(const struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; }*)arg1 data:(id)arg2;
- (void)_didFinishScrolling;
- (void)_didInvokeUIScrollViewDelegateCallback;
- (void)_didRelaunchProcess;
- (void)_didSameDocumentNavigationForMainFrame:(int)arg1;
- (void)_dynamicViewportUpdateChangedTargetToScale:(double)arg1 position:(struct CGPoint { double x1; double x2; })arg2 nextValidLayerTreeTransactionID:(unsigned long long)arg3;
- (void)_endAnimatedResize;
- (void)_endInteractiveObscuredInsetsChange;
- (void)_endPrinting;
- (id)_findDelegate;
- (void)_findString:(id)arg1 options:(unsigned long long)arg2 maxCount:(unsigned long long)arg3;
- (id)_formDelegate;
- (void)_frameOrBoundsChanged;
- (double)_gapBetweenPages;
- (void)_getMainResourceDataWithCompletionHandler:(id)arg1;
- (void)_getWebArchiveDataWithCompletionHandler:(id)arg1;
- (id)_handle;
- (void)_hideFindUI;
- (id)_historyDelegate;
- (long long)_interfaceOrientationOverride;
- (bool)_isDisplayingPDF;
- (bool)_isDisplayingStandaloneImageDocument;
- (bool)_isShowingNavigationGestureSnapshot;
- (void)_keyboardChangedWithInfo:(id)arg1 adjustScrollView:(bool)arg2;
- (void)_keyboardDidChangeFrame:(id)arg1;
- (void)_keyboardWillChangeFrame:(id)arg1;
- (void)_keyboardWillHide:(id)arg1;
- (void)_keyboardWillShow:(id)arg1;
- (void)_killWebContentProcess;
- (void)_loadAlternateHTMLString:(id)arg1 baseURL:(id)arg2 forUnreachableURL:(id)arg3;
- (struct CGSize { double x1; double x2; })_maximumUnobscuredSizeOverride;
- (struct CGSize { double x1; double x2; })_minimumLayoutSizeOverride;
- (struct CGSize { double x1; double x2; })_minimumLayoutSizeOverrideForMinimalUI;
- (bool)_networkRequestsInProgress;
- (struct UIEdgeInsets { double x1; double x2; double x3; double x4; })_obscuredInsets;
- (unsigned long long)_observedRenderingProgressEvents;
- (void)_overrideLayoutParametersWithMinimumLayoutSize:(struct CGSize { double x1; double x2; })arg1 minimumLayoutSizeForMinimalUI:(struct CGSize { double x1; double x2; })arg2 maximumUnobscuredSizeOverride:(struct CGSize { double x1; double x2; })arg3;
- (unsigned long long)_pageCount;
- (double)_pageLength;
- (double)_pageZoomFactor;
- (bool)_paginationBehavesLikeColumns;
- (long long)_paginationMode;
- (Class)_printFormatterClass;
- (struct CGPDFDocument { }*)_printedDocument;
- (void)_processDidExit;
- (id)_remoteObjectRegistry;
- (void)_resizeWhileHidingContentWithUpdates:(id)arg1;
- (void)_restoreFromSessionStateData:(id)arg1;
- (void)_restorePageStateToExposedRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 scale:(double)arg2;
- (void)_restorePageStateToUnobscuredCenter:(struct FloatPoint { float x1; float x2; })arg1 scale:(double)arg2;
- (id)_restoreSessionState:(id)arg1 andNavigate:(bool)arg2;
- (void)_scrollToContentOffset:(struct FloatPoint { float x1; float x2; })arg1;
- (bool)_scrollToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 origin:(struct FloatPoint { float x1; float x2; })arg2 minimumScrollDistance:(float)arg3;
- (void)_scrollViewDidInterruptDecelerating:(id)arg1;
- (id)_sessionState;
- (id)_sessionStateData;
- (void)_setAddsVisitedLinks:(bool)arg1;
- (void)_setAllowsRemoteInspection:(bool)arg1;
- (void)_setApplicationNameForUserAgent:(id)arg1;
- (void)_setBackgroundExtendsBeyondPage:(bool)arg1;
- (void)_setCustomUserAgent:(id)arg1;
- (void)_setFindDelegate:(id)arg1;
- (void)_setFormDelegate:(id)arg1;
- (void)_setGapBetweenPages:(double)arg1;
- (void)_setHasCustomContentView:(bool)arg1 loadedMIMEType:(const struct String { struct RefPtr<WTF::StringImpl> { struct StringImpl {} *x_1_1_1; } x1; }*)arg2;
- (void)_setHistoryDelegate:(id)arg1;
- (void)_setInterfaceOrientationOverride:(long long)arg1;
- (void)_setMaximumUnobscuredSizeOverride:(struct CGSize { double x1; double x2; })arg1;
- (void)_setMinimumLayoutSizeOverride:(struct CGSize { double x1; double x2; })arg1;
- (void)_setMinimumLayoutSizeOverrideForMinimalUI:(struct CGSize { double x1; double x2; })arg1;
- (void)_setObscuredInsets:(struct UIEdgeInsets { double x1; double x2; double x3; double x4; })arg1;
- (void)_setObservedRenderingProgressEvents:(unsigned long long)arg1;
- (void)_setOverlaidAccessoryViewsInset:(struct CGSize { double x1; double x2; })arg1;
- (void)_setPageLength:(double)arg1;
- (void)_setPageZoomFactor:(double)arg1;
- (void)_setPaginationBehavesLikeColumns:(bool)arg1;
- (void)_setPaginationMode:(long long)arg1;
- (void)_setPrintedDocument:(struct CGPDFDocument { }*)arg1;
- (void)_setTextZoomFactor:(double)arg1;
- (void)_setUsesMinimalUI:(bool)arg1;
- (void)_setViewportMetaTagWidth:(float)arg1;
- (void)_snapshotRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 intoImageOfWidth:(double)arg2 completionHandler:(id)arg3;
- (id)_suggestedFilenameForDisplayedPDF;
- (bool)_supportsTextZoom;
- (struct PassRefPtr<WebKit::ViewSnapshot> { struct ViewSnapshot {} *x1; })_takeViewSnapshot;
- (double)_textZoomFactor;
- (id)_unreachableURL;
- (void)_updateScrollViewBackground;
- (void)_updateVisibleContentRects;
- (bool)_usesMinimalUI;
- (id)_viewForFindUI;
- (double)_viewportMetaTagWidth;
- (int)_webProcessIdentifier;
- (id)_webViewPrintFormatter;
- (void)_willInvokeUIScrollViewDelegateCallback;
- (void)_windowDidRotate:(id)arg1;
- (void)_zoomOutWithOrigin:(struct FloatPoint { float x1; float x2; })arg1 animated:(bool)arg2;
- (void)_zoomToFocusRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 selectionRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg2 fontSize:(float)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 allowScaling:(bool)arg6 forceScroll:(bool)arg7;
- (void)_zoomToPoint:(struct FloatPoint { float x1; float x2; })arg1 atScale:(double)arg2 animated:(bool)arg3;
- (void)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 atScale:(double)arg2 origin:(struct FloatPoint { float x1; float x2; })arg3 animated:(bool)arg4;
- (bool)_zoomToRect:(struct FloatRect { struct FloatPoint { float x_1_1_1; float x_1_1_2; } x1; struct FloatSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withOrigin:(struct FloatPoint { float x1; float x2; })arg2 fitEntireRect:(bool)arg3 minimumScale:(double)arg4 maximumScale:(double)arg5 minimumScrollDistance:(float)arg6;
- (bool)allowsBackForwardNavigationGestures;
- (id)backForwardList;
- (id)browsingContextController;
- (bool)canGoBack;
- (bool)canGoForward;
- (id)configuration;
- (void)dealloc;
- (void)didMoveToWindow;
- (double)estimatedProgress;
- (void)evaluateJavaScript:(id)arg1 completionHandler:(id)arg2;
- (id)goBack;
- (id)goForward;
- (id)goToBackForwardListItem:(id)arg1;
- (bool)hasOnlySecureContent;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 configuration:(id)arg2;
- (bool)isLoading;
- (id)loadHTMLString:(id)arg1 baseURL:(id)arg2;
- (id)loadRequest:(id)arg1;
- (id)navigationDelegate;
- (id)reload;
- (id)reloadFromOrigin;
- (id)scrollView;
- (struct CGSize { double x1; double x2; })scrollView:(id)arg1 contentSizeForZoomScale:(double)arg2 withProposedSize:(struct CGSize { double x1; double x2; })arg3;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndZooming:(id)arg1 withView:(id)arg2 atScale:(double)arg3;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewDidScrollToTop:(id)arg1;
- (void)scrollViewDidZoom:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)scrollViewWillBeginZooming:(id)arg1 withView:(id)arg2;
- (void)scrollViewWillEndDragging:(id)arg1 withVelocity:(struct CGPoint { double x1; double x2; })arg2 targetContentOffset:(inout struct CGPoint { double x1; double x2; }*)arg3;
- (void)setAllowsBackForwardNavigationGestures:(bool)arg1;
- (void)setBackgroundColor:(id)arg1;
- (void)setBounds:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (void)setNavigationDelegate:(id)arg1;
- (void)setOpaque:(bool)arg1;
- (void)setUIDelegate:(id)arg1;
- (void)stopLoading;
- (id)title;
- (bool)usesStandardContentView;
- (id)viewForZoomingInScrollView:(id)arg1;

@end
