/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@interface MPMediaPlaybackItemMetadata : NSObject {
    NSString *_albumArtistName;
    long long _albumStoreAdamID;
    NSString *_albumTitle;
    bool _allowsInitiatingPlayWhileDownload;
    NSString *_artistName;
    NSString *_buyParameters;
    NSString *_composerName;
    NSString *_contentTitle;
    unsigned long long _contentType;
    NSString *_copyrightText;
    long long _endpointType;
    double _expectedDuration;
    NSString *_genreTitle;
    NSNumber *_iTunesStoreContentDSID;
    NSNumber *_iTunesStoreContentID;
    bool _isExplicitTrack;
    NSURL *_localNetworkContentURL;
    MPMediaItem *_mediaItem;
    long long _mediaLibraryPersistentID;
    NSURL *_protectedContentSupportStorageURL;
    bool _requiresPlayWhileDownload;
    bool _shouldReportPlayEventsToStore;
    long long _storeAdamID;
    unsigned long long _storeSagaID;
    long long _storeSubscriptionAdamID;
    float _volumeNormalization;
}

@property(assign,readonly) MPUContentItemIdentifierCollection * MPU_contentItemIdentifierCollection;
@property(assign,copy) NSString * albumArtistName;
@property(assign,readonly) long long albumStoreAdamID;
@property(assign,copy) NSString * albumTitle;
@property(assign,readonly) bool allowsAssetCaching;
@property(assign,readonly) bool allowsInitiatingPlayWhileDownload;
@property(assign,copy) NSString * artistName;
@property(assign,readonly) NSString * buyParameters;
@property(assign,copy) NSString * composerName;
@property(assign,copy) NSString * contentTitle;
@property(assign,readonly) unsigned long long contentType;
@property(assign,copy) NSString * copyrightText;
@property(assign,readonly) long long endpointType;
@property(assign,readonly) double expectedDuration;
@property(assign,copy) NSString * genreTitle;
@property(assign,copy) NSNumber * iTunesStoreContentDSID;
@property(assign,copy) NSString * iTunesStoreContentDownloadParameters;
@property(assign,copy) NSNumber * iTunesStoreContentID;
@property(assign,copy) NSString * iTunesStoreContentPurchasedMediaKind;
@property(assign,copy) NSString * iTunesStoreContentType;
@property(assign,copy) NSString * iTunesStoreContentUserAgent;
@property(assign,readonly) bool isExplicitTrack;
@property(assign,readonly) long long likedState;
@property(assign,copy) NSURL * localNetworkContentURL;
@property(assign,readonly) MPMediaItem * mediaItem;
@property(assign,readonly) long long mediaLibraryPersistentID;
@property(assign,copy) NSURL * protectedContentSupportStorageURL;
@property(assign,readonly) bool requiresPlayWhileDownload;
@property(assign,readonly) bool shouldReportPlayEventsToStore;
@property(assign,readonly) long long storeAdamID;
@property(assign,readonly) unsigned long long storeSagaID;
@property(assign,readonly) long long storeSubscriptionAdamID;
@property(assign,readonly) float volumeNormalization;

- (void).cxx_destruct;
- (id)MPU_contentItemIdentifierCollection;
- (void)_cloudControllerIsCellularDataRestrictedDidChangeNotification:(id)arg1;
- (void)_contentTasteControllerDidChangeNotification:(id)arg1;
- (id)albumArtistName;
- (long long)albumStoreAdamID;
- (id)albumTitle;
- (bool)allowsAssetCaching;
- (bool)allowsInitiatingPlayWhileDownload;
- (id)artistName;
- (id)artworkCatalogForPlaybackTime:(double)arg1;
- (id)buyParameters;
- (id)cachedLocalPlaybackAssetFilePathReturningAssetQuality:(unsigned long long*)arg1 protectionType:(unsigned long long*)arg2;
- (bool)canDownloadContentForNetworkType:(long long)arg1;
- (id)composerName;
- (id)contentTitle;
- (unsigned long long)contentType;
- (id)copyrightText;
- (void)dealloc;
- (long long)endpointType;
- (double)expectedDuration;
- (id)genreTitle;
- (void)getNetworkConstraintsForDownloadKind:(id)arg1 withCompletionHandler:(id)arg2;
- (id)iTunesStoreContentDSID;
- (id)iTunesStoreContentDownloadParameters;
- (id)iTunesStoreContentID;
- (id)iTunesStoreContentPurchasedMediaKind;
- (id)iTunesStoreContentType;
- (id)iTunesStoreContentUserAgent;
- (id)init;
- (bool)isEqual:(id)arg1;
- (bool)isExplicitTrack;
- (long long)likedState;
- (id)localNetworkContentURL;
- (id)mediaItem;
- (long long)mediaLibraryPersistentID;
- (id)protectedContentSupportStorageURL;
- (bool)requiresPlayWhileDownload;
- (bool)setCachedLocalPlaybackAssetFilePath:(id)arg1 protectionType:(unsigned long long)arg2 assetQuality:(unsigned long long)arg3 returningReplacedFilePath:(id*)arg4 replacedProtectionType:(unsigned long long*)arg5 replacedAssetQuality:(unsigned long long*)arg6;
- (void)setLikedState:(long long)arg1 withCompletionHandler:(id)arg2;
- (bool)shouldReportPlayEventsToStore;
- (long long)storeAdamID;
- (id)storeItemLookupDictionary;
- (unsigned long long)storeSagaID;
- (long long)storeSubscriptionAdamID;
- (id)streamingPlaybackAssetDestinationFilePathForAssetQuality:(unsigned long long)arg1 assetFlavor:(id)arg2 protectionType:(unsigned long long)arg3 pathExtension:(id)arg4;
- (id)streamingPlaybackPurchaseBundleDestinationFilePathForAssetFilePath:(id)arg1;
- (float)volumeNormalization;

@end
