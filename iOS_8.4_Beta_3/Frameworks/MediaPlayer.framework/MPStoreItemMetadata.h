/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@interface MPStoreItemMetadata : NSObject <MusicEntityValueProviding> {
    NSDictionary *_downloadAssetDictionary;
    NSDictionary *_downloadMetadataDictionary;
    MPStoreItemMetadata *_parentStoreItemMetadata;
    NSDictionary *_storePlatformDictionary;
}

@property(assign,copy) NSString * artistName;
@property(assign,copy) id artistStoreID;
@property(assign,copy) NSArray * artworkTrackIDs;
@property(assign,copy) NSArray * childrenStoreIDs;
@property(assign,copy) NSString * collectionName;
@property(assign,copy) id collectionStoreID;
@property(assign,copy) MPUContentItemIdentifierCollection * contentItemIdentifierCollection;
@property(assign,copy) NSString * copyrightText;
@property(assign,copy) NSString * debugDescription;
@property(assign,copy) NSString * description;
@property(assign,readonly) unsigned long long discCount;
@property(assign,readonly) unsigned long long discNumber;
@property(assign,readonly) double duration;
@property(assign,copy) NSString * editorNotes;
@property(assign,copy) NSDictionary * effectiveStorePlatformDictionary;
@property(getter=isExplicitContent,assign,readonly) bool explicitContent;
@property(assign,copy) NSArray * genreNames;
@property(assign,readonly) unsigned long long hash;
@property(assign,copy) NSString * itemKind;
@property(assign,copy) NSString * name;
@property(assign,copy) NSArray * offers;
@property(assign,copy) NSDate * releaseDate;
@property(assign,copy) id storeID;
@property(assign,readonly) Class superclass;
@property(assign,readonly) unsigned long long trackCount;
@property(assign,readonly) unsigned long long trackNumber;

- (void).cxx_destruct;
- (id)_artworkCatalogDataSource;
- (id)_entityValueHandlerForProperty:(id)arg1;
- (id)_newEntityValueHandlers;
- (id)_storePlatformDateFormatter;
- (id)artistName;
- (id)artistStoreID;
- (id)artworkCatalog;
- (id)artworkCatalogForStorePlatformDictionary:(id)arg1;
- (id)artworkTrackIDs;
- (id)childStorePlatformDictionaryForArtworkTrackID:(id)arg1;
- (id)childStorePlatformDictionaryForStoreID:(id)arg1;
- (id)childrenStoreIDs;
- (id)collectionName;
- (id)collectionStoreID;
- (id)contentItemIdentifierCollection;
- (id)copyrightText;
- (unsigned long long)discCount;
- (unsigned long long)discNumber;
- (double)duration;
- (id)editorNotes;
- (id)effectiveStorePlatformDictionary;
- (id)entityUniqueIdentifier;
- (id)genreNames;
- (id)imageURLForEntityArtworkProperty:(id)arg1 fittingSize:(struct CGSize { double x1; double x2; })arg2 destinationScale:(double)arg3;
- (id)initWithDownloadAssetDictionary:(id)arg1;
- (id)initWithStorePlatformDictionary:(id)arg1;
- (id)initWithStorePlatformDictionary:(id)arg1 parentStoreItemMetadata:(id)arg2;
- (bool)isExplicitContent;
- (id)itemKind;
- (id)name;
- (id)offers;
- (id)releaseDate;
- (id)storeID;
- (unsigned long long)trackCount;
- (unsigned long long)trackNumber;
- (id)valueForEntityProperty:(id)arg1;
- (id)valuesForEntityProperties:(id)arg1;

@end
