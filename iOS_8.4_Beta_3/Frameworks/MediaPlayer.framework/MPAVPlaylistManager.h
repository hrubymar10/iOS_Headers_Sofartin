/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
 */

@interface MPAVPlaylistManager : NSObject <MPAVQueueCoordinatorDataSource, MPQueueBehaviorManaging, MPQueueFeederDelegate, NSCoding> {
    NSString *_audioSessionModeOverride;
    MPAVController *_avController;
    bool _changingPlayer;
    bool _changingPlaylistFeeder;
    MPAVItem *_currentItem;
    <MPAVPlaylistManagerDelegate> *_delegate;
    bool _goToTargetIndex;
    long long _lastSelectionDirection;
    long long _playbackMode;
    MPQueuePlayer *_player;
    MPQueueFeeder *_playlistFeeder;
    MPAVQueueCoordinator *_queueCoordinator;
    long long _repeatMode;
    long long _targetIndex;
    bool _updatedAudioSessionMode;
}

@property (nonatomic, readonly) bool allowsUserVisibleUpcomingItems;
@property (nonatomic, retain) NSString *audioSessionModeOverride;
@property (nonatomic) MPAVController *avController;
@property (nonatomic, readonly) bool canSeek;
@property (nonatomic, readonly) bool canSkipToPreviousItem;
@property (getter=isChangingPlayer, nonatomic, readonly) bool changingPlayer;
@property (getter=isChangingPlaylistFeeder, nonatomic, readonly) bool changingPlaylistFeeder;
@property (readonly) long long currentIndex;
@property (readonly) MPAVItem *currentItem;
@property (readonly, copy) NSString *debugDescription;
@property (nonatomic) <MPAVPlaylistManagerDelegate> *delegate;
@property (readonly, copy) NSString *description;
@property (readonly) unsigned long long hash;
@property (nonatomic, readonly) long long playbackMode;
@property (readonly) MPQueuePlayer *player;
@property (nonatomic, readonly) MPQueueFeeder *playlistFeeder;
@property (readonly) MPAVQueueCoordinator *queueCoordinator;
@property long long repeatMode;
@property (readonly) Class superclass;
@property (nonatomic, readonly) bool userCanChangeShuffleAndRepeatType;

- (void).cxx_destruct;
- (void)_awakeFromCoder:(id)arg1;
- (void)_handleDownloadCancelledForDownloadToken:(unsigned long long)arg1;
- (id)_itemToFollowItemIndex:(long long)arg1 skipUnavailableContent:(bool)arg2;
- (void)_mediaLibraryDisplayValuesDidChangeNotification:(id)arg1;
- (long long)_nextItemIndex:(long long)arg1 repeatMode:(long long)arg2;
- (void)_notifyQueueFeederContentsChanged;
- (unsigned long long)_playbackIndexForDelta:(long long)arg1 fromIndex:(unsigned long long)arg2 ignoreElapsedTime:(bool)arg3;
- (long long)_prepareToQueuePlaybackIndex:(long long)arg1 selectionDirection:(long long)arg2;
- (id)_queuePlayerFeederItemForIndex:(long long)arg1;
- (void)_reloadQueuedItemsIfPathBecameAvailable;
- (void)_setStateForPlaylistFeeder:(id)arg1 startIndex:(unsigned long long)arg2;
- (void)_storePlayWhileDownloadControllerDidFinishPlayWhileDownloadSessionNotification:(id)arg1;
- (void)_streamingDownloadSessionControllerDidFailDownloadSessionNotification:(id)arg1;
- (void)_updateAudioSessionModeWithIndex:(unsigned long long)arg1;
- (void)_willFinishReloadWithQueueFeeder:(id)arg1 fromPlaybackContext:(id)arg2;
- (bool)allowsUserVisibleUpcomingItems;
- (id)audioSessionModeOverride;
- (id)avController;
- (bool)canChangePlaylistFeeder;
- (bool)canSeek;
- (bool)canSkipItem:(id)arg1;
- (bool)canSkipToPreviousItem;
- (void)clearQueueFeeder;
- (void)connectPlayer;
- (long long)currentIndex;
- (id)currentItem;
- (void)dealloc;
- (id)delegate;
- (void)disconnectPlayer;
- (unsigned long long)displayCountForItem:(id)arg1;
- (unsigned long long)displayIndexForItem:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (bool)isChangingPlayer;
- (bool)isChangingPlaylistFeeder;
- (id)itemForPlaylistIndex:(long long)arg1;
- (id)metadataItemForPlaylistIndex:(long long)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (long long)playbackMode;
- (id)player;
- (void)player:(id)arg1 currentItemDidChangeFromItem:(id)arg2 toItem:(id)arg3;
- (id)playlistFeeder;
- (id)playlistFeederForPlaylistIndex:(long long)arg1;
- (long long)playlistIndexOfIndex:(long long)arg1 inPlaylistFeeder:(id)arg2;
- (long long)playlistIndexOfItem:(id)arg1;
- (long long)playlistIndexOfItemIdentifier:(id)arg1;
- (long long)playlistIndexWithDelta:(long long)arg1 fromIndex:(long long)arg2 ignoreElapsedTime:(bool)arg3;
- (id)queueCoordinator;
- (id)queueCoordinator:(id)arg1 itemToFollowItem:(id)arg2;
- (void)queueCoordinatorFailedToQueueAnyItems;
- (void)queueFeeder:(id)arg1 didChangeContentsWithPreferredStartIndex:(unsigned long long)arg2;
- (void)reloadItemsKeepingCurrentItem:(bool)arg1;
- (void)reloadWithPlaybackContext:(id)arg1 completionHandler:(id)arg2;
- (long long)repeatMode;
- (void)setAudioSessionModeOverride:(id)arg1;
- (void)setAvController:(id)arg1;
- (void)setCurrentIndex:(long long)arg1 selectionDirection:(long long)arg2;
- (void)setDelegate:(id)arg1;
- (bool)setPlaylistFeeder:(id)arg1 startIndex:(long long)arg2 keepPlaying:(bool)arg3;
- (void)setRepeatMode:(long long)arg1;
- (void)updateForSoundCheckDefaultsChange;
- (bool)userCanChangeShuffleAndRepeatType;

@end
