/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SpriteKit.framework/SpriteKit
 */

@interface SKView : UIView {
    bool _allowsTransparency;
    unsigned int _colorRenderBuffer;
    EAGLContext *_context;
    unsigned int _depthStencilRenderBuffer;
    bool _disableInput;
    SKDisplayLink *_displayLink;
    float _fps;
    unsigned int _frameBuffer;
    unsigned long long _frameInterval;
    int _frames;
    bool _hasRenderedForCurrentUpdate;
    bool _hasRenderedOnce;
    bool _isBackgrounded;
    bool _isInTransition;
    bool _mouseIsDown;
    SKScene *_nextScene;
    SKNode *_nodeUnderCursor;
    bool _paused;
    bool _prefersLowPowerGPU;
    float _prevBackingScaleFactor;
    unsigned int _prevSpritesRendered;
    unsigned int _prevSpritesRenderedSubmitted;
    double _prevViewAspect;
    bool _priorResignActivePausedState;
    NSObject<OS_dispatch_queue> *_renderQueue;
    struct SKCRenderer { id x1; id x2; bool x3; bool x4; float x5; float x6; id x7; id x8; float x9; struct { float x_10_1_1; float x_10_1_2; } x10; struct { struct xglProgram {} *x_11_1_1; struct { struct { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_11_1_2; unsigned int x_11_1_3; union _GLKMatrix4 { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; float x_1_3_4; float x_1_3_5; float x_1_3_6; float x_1_3_7; float x_1_3_8; float x_1_3_9; float x_1_3_10; float x_1_3_11; float x_1_3_12; float x_1_3_13; float x_1_3_14; float x_1_3_15; float x_1_3_16; } x_4_2_1; float x_4_2_2[16]; } x_11_1_4; unsigned int x_11_1_5; unsigned int x_11_1_6; unsigned int x_11_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; float x_8_2_4; } x_11_1_8; long long x_11_1_9; struct { float x_10_2_1; float x_10_2_2; } x_11_1_10; struct { unsigned int x_11_2_1; unsigned int x_11_2_2; unsigned int x_11_2_3; unsigned int x_11_2_4; struct { float x_5_3_1; float x_5_3_2; } x_11_2_5; bool x_11_2_6; } x_11_1_11; } x11; struct { struct xglProgram {} *x_12_1_1; struct { struct { float x_1_3_1; float x_1_3_2; } x_2_2_1; struct { float x_2_3_1; float x_2_3_2; } x_2_2_2; } x_12_1_2; unsigned int x_12_1_3; union _GLKMatrix4 { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; float x_1_3_4; float x_1_3_5; float x_1_3_6; float x_1_3_7; float x_1_3_8; float x_1_3_9; float x_1_3_10; float x_1_3_11; float x_1_3_12; float x_1_3_13; float x_1_3_14; float x_1_3_15; float x_1_3_16; } x_4_2_1; float x_4_2_2[16]; } x_12_1_4; unsigned int x_12_1_5; unsigned int x_12_1_6; unsigned int x_12_1_7; struct { float x_8_2_1; float x_8_2_2; float x_8_2_3; float x_8_2_4; } x_12_1_8; long long x_12_1_9; struct { float x_10_2_1; float x_10_2_2; } x_12_1_10; struct { unsigned int x_11_2_1; unsigned int x_11_2_2; unsigned int x_11_2_3; unsigned int x_11_2_4; struct { float x_5_3_1; float x_5_3_2; } x_11_2_5; bool x_11_2_6; } x_12_1_11; } x12; struct stack<PKRect, std::__1::deque<PKRect, std::__1::allocator<PKRect> > > { struct deque<PKRect, std::__1::allocator<PKRect> > { struct __split_buffer<PKRect *, std::__1::allocator<PKRect *> > { struct { /* ? */ } **x_1_3_1; struct { /* ? */ } **x_1_3_2; struct { /* ? */ } **x_1_3_3; struct __compressed_pair<PKRect **, std::__1::allocator<PKRect *> > { struct { /* ? */ } **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned long long x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<PKRect> > { unsigned long long x_3_3_1; } x_1_2_3; } x_13_1_1; } x13; struct stack<_GLKMatrix4, std::__1::deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> > > { struct deque<_GLKMatrix4, std::__1::allocator<_GLKMatrix4> > { struct __split_buffer<_GLKMatrix4 *, std::__1::allocator<_GLKMatrix4 *> > { union { /* Warning: Unrecognized filer type: '_' using 'void*' */ void*x_1_4_1; void*x_1_4_2; unsigned long x_1_4_3; void*x_1_4_4; void*x_1_4_5; void*x_1_4_6; void*x_1_4_7; const int x_1_4_8; void*x_1_4_9; void*x_1_4_10; } **x_1_3_1; union { void*x_2_4_1; void*x_2_4_2; unsigned long x_2_4_3; void*x_2_4_4; void*x_2_4_5; void*x_2_4_6; void*x_2_4_7; const int x_2_4_8; void*x_2_4_9; void*x_2_4_10; } **x_1_3_2; union { void*x_3_4_1; void*x_3_4_2; unsigned long x_3_4_3; void*x_3_4_4; void*x_3_4_5; void*x_3_4_6; void*x_3_4_7; const int x_3_4_8; void*x_3_4_9; void*x_3_4_10; } **x_1_3_3; struct __compressed_pair<_GLKMatrix4 **, std::__1::allocator<_GLKMatrix4 *> > { union { void*x_1_5_1; void*x_1_5_2; unsigned long x_1_5_3; void*x_1_5_4; void*x_1_5_5; void*x_1_5_6; void*x_1_5_7; const int x_1_5_8; void*x_1_5_9; void*x_1_5_10; } **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned long long x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<_GLKMatrix4> > { unsigned long long x_3_3_1; } x_1_2_3; } x_14_1_1; } x14; struct stack<SKCTextureAttachment, std::__1::deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> > > { struct deque<SKCTextureAttachment, std::__1::allocator<SKCTextureAttachment> > { struct __split_buffer<SKCTextureAttachment *, std::__1::allocator<SKCTextureAttachment *> > { struct { /* ? */ } **x_1_3_1; struct { /* ? */ } **x_1_3_2; struct { /* ? */ } **x_1_3_3; struct __compressed_pair<SKCTextureAttachment **, std::__1::allocator<SKCTextureAttachment *> > { struct { /* ? */ } **x_4_4_1; } x_1_3_4; } x_1_2_1; unsigned long long x_1_2_2; struct __compressed_pair<unsigned long, std::__1::allocator<SKCTextureAttachment> > { unsigned long long x_3_3_1; } x_1_2_3; } x_15_1_1; } x15; struct { float x_16_1_1; float x_16_1_2; } x16; struct { float x_17_1_1; float x_17_1_2; } x17; struct SKCRenderPassNew { struct xglProgram {} *x_18_1_1; union _GLKMatrix4 { struct { float x_1_3_1; float x_1_3_2; float x_1_3_3; float x_1_3_4; float x_1_3_5; float x_1_3_6; float x_1_3_7; float x_1_3_8; float x_1_3_9; float x_1_3_10; float x_1_3_11; float x_1_3_12; float x_1_3_13; float x_1_3_14; float x_1_3_15; float x_1_3_16; } x_2_2_1; float x_2_2_2[16]; } x_18_1_2; unsigned int x_18_1_3; unsigned long long x_18_1_4; unsigned int x_18_1_5; unsigned int x_18_1_6; long long x_18_1_7; struct { struct { float x_1_3_1; float x_1_3_2; } x_8_2_1; struct { float x_2_3_1; float x_2_3_2; } x_8_2_2; } x_18_1_8; struct SKCSprite {} *x_18_1_9; unsigned int x_18_1_10; unsigned int x_18_1_11; bool x_18_1_12; bool x_18_1_13; bool x_18_1_14; bool x_18_1_15; bool x_18_1_16; bool x_18_1_17; bool x_18_1_18; bool x_18_1_19; bool x_18_1_20; struct { unsigned int x_21_2_1; unsigned int x_21_2_2; unsigned int x_21_2_3; unsigned int x_21_2_4; struct { float x_5_3_1; float x_5_3_2; } x_21_2_5; bool x_21_2_6; } x_18_1_21; bool x_18_1_22; bool x_18_1_23; bool x_18_1_24; bool x_18_1_25; bool x_18_1_26; bool x_18_1_27; bool x_18_1_28; bool x_18_1_29; bool x_18_1_30; bool x_18_1_31; bool x_18_1_32; bool x_18_1_33; id x_18_1_34; float x_18_1_35; float x_18_1_36; unsigned int x_18_1_37; struct { float x_38_2_1; float x_38_2_2; float x_38_2_3; float x_38_2_4; } x_18_1_38; id x_18_1_39; struct { struct { float x_1_3_1; float x_1_3_2; } x_40_2_1; struct { float x_2_3_1; float x_2_3_2; } x_40_2_2; } x_18_1_40; struct { struct { float x_1_3_1; float x_1_3_2; } x_41_2_1; struct { float x_2_3_1; float x_2_3_2; } x_41_2_2; } x_18_1_41; struct { float x_42_2_1; float x_42_2_2; } x_18_1_42; float x_18_1_43; unsigned int x_18_1_44; bool x_18_1_45; char *x_18_1_46; id x_18_1_47; } x18; unsigned int x19; int x20; int x21; float x22; float x23; int x24; double x25; unsigned long long x26; unsigned long long x27; unsigned long long x28; unsigned long long x29; unsigned long long x30; unsigned long long x31; float x32; float x33; unsigned int x34; unsigned int x35; unsigned int x36; unsigned int x37; double x38; float x39; unsigned int x40; int x41; id x42; id x43; id x44; id x45; bool x46; bool x47; bool x48; bool x49; struct list<SKCRenderPassNew, std::__1::allocator<SKCRenderPassNew> > { struct __list_node_base<SKCRenderPassNew, void *> { struct __list_node<SKCRenderPassNew, void *> {} *x_1_2_1; struct __list_node<SKCRenderPassNew, void *> {} *x_1_2_2; } x_50_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCRenderPassNew, void *> > > { unsigned long long x_2_2_1; } x_50_1_2; } x50; unsigned int x51; unsigned int x52; unsigned short *x53; struct { struct { union _GLKVector4 { struct { float x_1_4_1; float x_1_4_2; float x_1_4_3; float x_1_4_4; } x_1_3_1; struct { float x_2_4_1; float x_2_4_2; float x_2_4_3; float x_2_4_4; } x_1_3_2; struct { float x_3_4_1; float x_3_4_2; float x_3_4_3; float x_3_4_4; } x_1_3_3; float x_1_3_4[4]; } x_1_2_1; unsigned char x_1_2_2[4]; float x_1_2_3[3]; } x_54_1_1[4]; } x54[10500]; unsigned int x55; unsigned int x56; unsigned int x57; unsigned int x58; struct xglProgram {} *x59; struct xglProgram {} *x60; struct xglProgram {} *x61; struct xglProgram {} *x62; struct xglProgram {} *x63; struct xglProgram {} *x64; id x65; int x66; id x67; int x68; unsigned int x69; unsigned int x70; struct list<SKCSprite *, std::__1::allocator<SKCSprite *> > { struct __list_node_base<SKCSprite *, void *> { struct __list_node<SKCSprite *, void *> {} *x_1_2_1; struct __list_node<SKCSprite *, void *> {} *x_1_2_2; } x_71_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCSprite *, void *> > > { unsigned long long x_2_2_1; } x_71_1_2; } x71; struct vector<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > { struct SpriteRenderInfo {} **x_72_1_1; struct SpriteRenderInfo {} **x_72_1_2; struct __compressed_pair<const SKCRenderer::SpriteRenderInfo **, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > { struct SpriteRenderInfo {} **x_3_2_1; } x_72_1_3; } x72; struct vector<SKCRenderer::SpriteRenderInfo, std::__1::allocator<SKCRenderer::SpriteRenderInfo> > { struct SpriteRenderInfo {} *x_73_1_1; struct SpriteRenderInfo {} *x_73_1_2; struct __compressed_pair<SKCRenderer::SpriteRenderInfo *, std::__1::allocator<SKCRenderer::SpriteRenderInfo> > { struct SpriteRenderInfo {} *x_3_2_1; } x_73_1_3; } x73; struct SKRenderQuadPool { struct vector<SKRenderQuad *, std::__1::allocator<SKRenderQuad *> > { struct { /* ? */ } **x_1_2_1; struct { /* ? */ } **x_1_2_2; struct __compressed_pair<SKRenderQuad **, std::__1::allocator<SKRenderQuad *> > { struct { /* ? */ } **x_3_3_1; } x_1_2_3; } x_74_1_1; unsigned long long x_74_1_2; unsigned long long x_74_1_3; struct { /* ? */ } *x_74_1_4; unsigned long long x_74_1_5; } x74; struct map<const SKCSprite *, PKPoint, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, PKPoint> > > { struct __tree<std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, PKPoint> > > { struct __tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, PKPoint>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, PKPoint>, std::__1::less<const SKCSprite *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_75_1_1; } x75; struct list<const SKCSprite *, std::__1::allocator<const SKCSprite *> > { struct __list_node_base<const SKCSprite *, void *> { struct __list_node<const SKCSprite *, void *> {} *x_1_2_1; struct __list_node<const SKCSprite *, void *> {} *x_1_2_2; } x_76_1_1; struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<const SKCSprite *, void *> > > { unsigned long long x_2_2_1; } x_76_1_2; } x76; struct map<const SKCSprite *, ShadowInfo *, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, ShadowInfo *> > > { struct __tree<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, ShadowInfo *> > > { struct __tree_node<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, ShadowInfo *>, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, ShadowInfo *>, std::__1::less<const SKCSprite *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_77_1_1; } x77; struct map<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> >, std::__1::less<const SKCSprite *>, std::__1::allocator<std::__1::pair<const SKCSprite *const, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > > { struct __tree<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true>, std::__1::allocator<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > > > > { struct __tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *> {} *x_1_2_1; struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, void *> > > { struct __tree_end_node<std::__1::__tree_node_base<void *> *> { struct __tree_node_base<void *> {} *x_1_4_1; } x_2_3_1; } x_1_2_2; struct __compressed_pair<unsigned long, std::__1::__map_value_compare<const SKCSprite *, std::__1::__value_type<const SKCSprite *, std::__1::list<const SKCRenderer::SpriteRenderInfo *, std::__1::allocator<const SKCRenderer::SpriteRenderInfo *> > >, std::__1::less<const SKCSprite *>, true> > { unsigned long long x_3_3_1; } x_1_2_3; } x_78_1_1; } x78; id x79; bool x80; bool x81; bool x82; bool x83; bool x84; bool x85; bool x86; bool x87; bool x88; bool x89; bool x90; bool x91; bool x92; bool x93; } *_renderer;
    SKScene *_scene;
    NSData *_spriteArrayHint;
    unsigned int _spritesRendered;
    unsigned int _spritesSubmitted;
    SKLabelNode *_statsLabel;
    double _timeBeginFrameCount;
    double _timePreviousUpdate;
    NSMutableDictionary *_touchMap;
    float _transitionDuration;
    float _transitionTime;
    NSObject<OS_dispatch_queue> *_updateQueue;
    bool _usesAsyncUpdateQueue;
    bool showsFPS;
    bool showsNodeCount;
}

@property (retain) EAGLContext *_context;
@property (nonatomic, readonly) double _fps;
@property (nonatomic, readonly) SKScene *_nextScene;
@property (nonatomic, readonly) SKScene *_scene;
@property (nonatomic) bool _shouldCenterStats;
@property (nonatomic) bool _showsCPUStats;
@property (nonatomic) bool _showsCoreAnimationFPS;
@property (nonatomic) bool _showsCulledNodesInNodeCount;
@property (nonatomic) bool _showsGPUStats;
@property (nonatomic) bool _showsOutlineInterior;
@property (nonatomic) bool _showsSpriteBounds;
@property (nonatomic) bool _showsTotalAreaRendered;
@property (nonatomic, readonly) int _spriteRenderCount;
@property (nonatomic, readonly) int _spriteSubmitCount;
@property (nonatomic) bool _usesAsyncUpdateQueue;
@property (nonatomic) double _viewScale;
@property (nonatomic) struct CGPoint { double x1; double x2; } _viewTranslation;
@property (nonatomic) bool allowsTransparency;
@property (getter=isAsynchronous, nonatomic) bool asynchronous;
@property (nonatomic) long long frameInterval;
@property (nonatomic) bool ignoresSiblingOrder;
@property (getter=isPaused, nonatomic) bool paused;
@property (nonatomic) double physicsDebugStrokeWidth;
@property (nonatomic, readonly) struct CGSize { double x1; double x2; } pixelSize;
@property (nonatomic, readonly) SKScene *scene;
@property (nonatomic) bool shouldCullNonVisibleNodes;
@property (nonatomic) bool showsDrawCount;
@property (nonatomic) bool showsFPS;
@property (nonatomic) bool showsFields;
@property (nonatomic) bool showsNodeCount;
@property (nonatomic) bool showsPhysics;
@property (nonatomic) bool showsQuadCount;

+ (Class)layerClass;

- (void).cxx_destruct;
- (void)CBApplicationDidBecomeActive;
- (void)CBApplicationWillResignActive;
- (id)_context;
- (double)_fps;
- (void)_initialize;
- (id)_nextScene;
- (void)_renderContent;
- (id)_scene;
- (void)_setUpdateQueue:(id)arg1;
- (void)_setupContext;
- (bool)_shouldCenterStats;
- (void)_showAllStats;
- (bool)_showsCPUStats;
- (bool)_showsCoreAnimationFPS;
- (bool)_showsCulledNodesInNodeCount;
- (bool)_showsGPUStats;
- (bool)_showsOutlineInterior;
- (bool)_showsSpriteBounds;
- (bool)_showsTotalAreaRendered;
- (int)_spriteRenderCount;
- (int)_spriteSubmitCount;
- (id)_textureFromNode:(id)arg1 crop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)_update:(double)arg1;
- (bool)_usesAsyncUpdateQueue;
- (double)_viewScale;
- (struct CGPoint { double x1; double x2; })_viewTranslation;
- (bool)allowsTransparency;
- (void)bindOpenGLContext;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 fromScene:(id)arg2;
- (struct CGPoint { double x1; double x2; })convertPoint:(struct CGPoint { double x1; double x2; })arg1 toScene:(id)arg2;
- (void)dealloc;
- (void)displayLayer:(id)arg1;
- (long long)frameInterval;
- (bool)ignoresSiblingOrder;
- (id)init;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1;
- (id)initWithFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 updateQueue:(id)arg2;
- (bool)isAsynchronous;
- (bool)isOpaque;
- (bool)isPaused;
- (void)layoutSubviews;
- (double)physicsDebugStrokeWidth;
- (struct CGSize { double x1; double x2; })pixelSize;
- (void)presentScene:(id)arg1;
- (void)presentScene:(id)arg1 transition:(id)arg2;
- (void)remakeFramebuffer:(double)arg1;
- (void)renderCallback:(double)arg1 shouldBlock:(bool)arg2;
- (void)renderContent;
- (void)renderForTime:(double)arg1 shouldBlock:(bool)arg2;
- (void)renderToIOSurfaceID:(unsigned int)arg1 withScaleFactor:(double)arg2;
- (void)renderToOpenGLTextureId:(unsigned int)arg1 size:(struct CGSize { double x1; double x2; })arg2 scaleFactor:(double)arg3;
- (id)scene;
- (void)scrollViewDidScroll:(id)arg1;
- (void)setAllowsTransparency:(bool)arg1;
- (void)setAsynchronous:(bool)arg1;
- (void)setFrameInterval:(long long)arg1;
- (void)setIgnoresSiblingOrder:(bool)arg1;
- (void)setPaused:(bool)arg1;
- (void)setPhysicsDebugStrokeWidth:(double)arg1;
- (void)setShouldCullNonVisibleNodes:(bool)arg1;
- (void)setShowsDrawCount:(bool)arg1;
- (void)setShowsFPS:(bool)arg1;
- (void)setShowsFields:(bool)arg1;
- (void)setShowsNodeCount:(bool)arg1;
- (void)setShowsPhysics:(bool)arg1;
- (void)setShowsQuadCount:(bool)arg1;
- (void)setShowsSpriteBounds:(bool)arg1;
- (void)setUpRenderCallback;
- (void)set_context:(id)arg1;
- (void)set_shouldCenterStats:(bool)arg1;
- (void)set_showsCPUStats:(bool)arg1;
- (void)set_showsCoreAnimationFPS:(bool)arg1;
- (void)set_showsCulledNodesInNodeCount:(bool)arg1;
- (void)set_showsGPUStats:(bool)arg1;
- (void)set_showsOutlineInterior:(bool)arg1;
- (void)set_showsSpriteBounds:(bool)arg1;
- (void)set_showsTotalAreaRendered:(bool)arg1;
- (void)set_usesAsyncUpdateQueue:(bool)arg1;
- (void)set_viewScale:(double)arg1;
- (void)set_viewTranslation:(struct CGPoint { double x1; double x2; })arg1;
- (bool)shouldCullNonVisibleNodes;
- (bool)showsDrawCount;
- (bool)showsFPS;
- (bool)showsFields;
- (bool)showsNodeCount;
- (bool)showsPhysics;
- (bool)showsQuadCount;
- (bool)showsSpriteBounds;
- (id)snapshot;
- (void)startRenderCallbacks;
- (void)stopRenderCallbacks;
- (id)textureFromNode:(id)arg1;
- (id)textureFromNode:(id)arg1 crop:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)touchesCancelled:(id)arg1 withEvent:(id)arg2;
- (void)touchesEnded:(id)arg1 withEvent:(id)arg2;
- (void)touchesMoved:(id)arg1 withEvent:(id)arg2;
- (void)willMoveToSuperview:(id)arg1;
- (void)writeContentsToPNG:(id)arg1;

@end
