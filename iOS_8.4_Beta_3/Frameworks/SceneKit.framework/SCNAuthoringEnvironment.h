/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/SceneKit.framework/SceneKit
 */

@interface SCNAuthoringEnvironment : NSObject {
    unsigned short _arrowIndicesCount;
    const void *_arrowIndicesOffset;
    struct { 
        struct __C3DFXGLSLProgram {} *weakProgram; 
        struct { 
            unsigned int vbo; 
            unsigned int ibo; 
            unsigned int baseIndex; 
            unsigned int baseVertex; 
            unsigned int vertexSize; 
            unsigned int allocatedVerticesSize; 
            unsigned int allocatedIndicesSize; 
        } dynamicVBOInfo; 
        unsigned int textureID; 
        unsigned int vao; 
        unsigned int drawMode; 
        bool orthographic; 
        bool clearDepthBuffer; 
        bool enableDepthTest; 
        bool enableCulling; 
        bool isDynamic; 
    } _boldLogsInfo;
    struct { 
        struct { 
            unsigned int textureID; 
            struct CGSize { 
                double width; 
                double height; 
            } textureSize; 
            bool isRetina; 
        } textureInfo; 
        double lineHeight; 
        short characterWidth_texture; 
        double characterWidth_typography; 
        short characterHeight_texture; 
        struct { /* ? */ } *symbolRects; 
    } _boldTextInfo;
    struct __C3DFXGLSLProgram { } *_colorAndTextureProgram;
    struct __C3DFXGLSLProgram { } *_colorOnlyProgram;
    float _drawScale;
    struct { 
        struct __C3DFXGLSLProgram {} *weakProgram; 
        struct { 
            unsigned int vbo; 
            unsigned int ibo; 
            unsigned int baseIndex; 
            unsigned int baseVertex; 
            unsigned int vertexSize; 
            unsigned int allocatedVerticesSize; 
            unsigned int allocatedIndicesSize; 
        } dynamicVBOInfo; 
        unsigned int textureID; 
        unsigned int vao; 
        unsigned int drawMode; 
        bool orthographic; 
        bool clearDepthBuffer; 
        bool enableDepthTest; 
        bool enableCulling; 
        bool isDynamic; 
    } _dynamicLinesInfo;
    struct { 
        struct __C3DFXGLSLProgram {} *weakProgram; 
        struct { 
            unsigned int vbo; 
            unsigned int ibo; 
            unsigned int baseIndex; 
            unsigned int baseVertex; 
            unsigned int vertexSize; 
            unsigned int allocatedVerticesSize; 
            unsigned int allocatedIndicesSize; 
        } dynamicVBOInfo; 
        unsigned int textureID; 
        unsigned int vao; 
        unsigned int drawMode; 
        bool orthographic; 
        bool clearDepthBuffer; 
        bool enableDepthTest; 
        bool enableCulling; 
        bool isDynamic; 
    } _dynamicTrianglesInfo;
    struct __C3DEngineContext { } *_engineContext;
    bool _hasLighting;
    NSMutableArray *_individualNodesWantingBoundingBox;
    NSMutableArray *_individualNodesWantingCameraAttributes;
    NSMutableArray *_individualNodesWantingLightAttributes;
    struct { 
        struct __C3DFXGLSLProgram {} *weakProgram; 
        struct { 
            unsigned int vbo; 
            unsigned int ibo; 
            unsigned int baseIndex; 
            unsigned int baseVertex; 
            unsigned int vertexSize; 
            unsigned int allocatedVerticesSize; 
            unsigned int allocatedIndicesSize; 
        } dynamicVBOInfo; 
        unsigned int textureID; 
        unsigned int vao; 
        unsigned int drawMode; 
        bool orthographic; 
        bool clearDepthBuffer; 
        bool enableDepthTest; 
        bool enableCulling; 
        bool isDynamic; 
    } _logsInfo;
    SCNManipulator *_manipulator;
    struct { 
        struct __C3DFXGLSLProgram {} *weakProgram; 
        struct { 
            unsigned int vbo; 
            unsigned int ibo; 
            unsigned int baseIndex; 
            unsigned int baseVertex; 
            unsigned int vertexSize; 
            unsigned int allocatedVerticesSize; 
            unsigned int allocatedIndicesSize; 
        } dynamicVBOInfo; 
        unsigned int textureID; 
        unsigned int vao; 
        unsigned int drawMode; 
        bool orthographic; 
        bool clearDepthBuffer; 
        bool enableDepthTest; 
        bool enableCulling; 
        bool isDynamic; 
    } _manipulatorsInfo;
    struct __C3DFXGLSLProgram { } *_noColorProgram;
    struct { 
        struct { 
            unsigned int textureID; 
            struct CGSize { 
                double width; 
                double height; 
            } textureSize; 
            bool isRetina; 
        } textureInfo; 
        double lineHeight; 
        short characterWidth_texture; 
        double characterWidth_typography; 
        short characterHeight_texture; 
        struct { /* ? */ } *symbolRects; 
    } _normalTextInfo;
    struct { 
        struct __C3DFXGLSLProgram {} *weakProgram; 
        struct { 
            unsigned int vbo; 
            unsigned int ibo; 
            unsigned int baseIndex; 
            unsigned int baseVertex; 
            unsigned int vertexSize; 
            unsigned int allocatedVerticesSize; 
            unsigned int allocatedIndicesSize; 
        } dynamicVBOInfo; 
        unsigned int textureID; 
        unsigned int vao; 
        unsigned int drawMode; 
        bool orthographic; 
        bool clearDepthBuffer; 
        bool enableDepthTest; 
        bool enableCulling; 
        bool isDynamic; 
    } _overlayDynamicLinesInfo;
    unsigned short _quadrantIndicesCount;
    const void *_quadrantIndicesOffset;
    unsigned short _quadrantRingIndicesCount;
    const void *_quadrantRingIndicesOffset;
    <SCNSceneRenderer> *_sceneRenderer;
    bool _showsAllBoundingBoxes;
    bool _showsAllBoundingSpheres;
    bool _showsAttributesOfAllCameras;
    bool _showsAttributesOfAllLights;
    bool _showsLighting;
    bool _showsPhysics;
    struct { 
        bool initialized; 
        bool showFullStatistics; 
        float fps; 
        float waitDisplayLinkTime; 
        long long pressedButtonIndex; 
        struct __CFString {} *fpsString; 
        struct __CFString {} *shortString; 
        unsigned int lightingStatistics[9]; 
        struct __C3DRendererContextStats { 
            unsigned int verticesProcessed; 
            unsigned int primitivesProcessed; 
            unsigned int drawCount; 
            unsigned int drawStep; 
            unsigned int frameCount; 
            unsigned int fboSwitches; 
            unsigned int vboSwitches; 
            unsigned int attSwitches; 
            unsigned int attEnabling; 
            unsigned int iboSwitches; 
            unsigned int vaoSwitches; 
            unsigned int prgSwitches; 
            unsigned int texSwitches; 
            unsigned int rssSwitches; 
            unsigned int getCount; 
            unsigned int uniformFloatSent; 
            unsigned int uniformIntSent; 
            unsigned int uniformVector2Sent; 
            unsigned int uniformVector3Sent; 
            unsigned int uniformVector4Sent; 
            unsigned int uniformMatrix4Sent; 
            unsigned int vboUploaded; 
            unsigned int iboUploaded; 
            unsigned int texUploaded; 
            double cpuTime; 
            double cstrTime; 
            double phyTime; 
            double prtTime; 
            double animTime; 
            double syncTime; 
            double cullTime; 
            double liteTime; 
            double sortTime; 
            double twoDTime; 
            double delegateTime; 
            double glFlushTime; 
            double waitDisplayLinkTime; 
            double lastDisplayLinkTime; 
            unsigned int prgCount; 
            unsigned int texCount; 
            unsigned int fboCount; 
            unsigned int vboCount; 
            unsigned int rboCount; 
            unsigned int iboCount; 
            unsigned int vaoCount; 
            unsigned int fboMemory; 
            unsigned int rboMemory; 
            unsigned int vboMemory; 
            unsigned int iboMemory; 
            unsigned int texMemory; 
            unsigned int backBufferMemory; 
            unsigned int depthBuffersMemory; 
            double frmAvgTime; 
            double frmMinTime; 
            double frmMaxTime; 
            double frameTimeHistory[60]; 
            unsigned int frameTimeCurrentIndex; 
            double startTime; 
            double lastFrameTime; 
        } stats; 
    } _statisticsInfo;
    struct { 
        struct __C3DFXGLSLProgram {} *weakProgram; 
        struct { 
            unsigned int vbo; 
            unsigned int ibo; 
            unsigned int baseIndex; 
            unsigned int baseVertex; 
            unsigned int vertexSize; 
            unsigned int allocatedVerticesSize; 
            unsigned int allocatedIndicesSize; 
        } dynamicVBOInfo; 
        unsigned int textureID; 
        unsigned int vao; 
        unsigned int drawMode; 
        bool orthographic; 
        bool clearDepthBuffer; 
        bool enableDepthTest; 
        bool enableCulling; 
        bool isDynamic; 
    } _textInfo;
}

@property (readonly) <SCNSceneRenderer> *sceneRenderer;
@property (nonatomic) bool showsAllBoundingBoxes;
@property (nonatomic) bool showsAllBoundingSpheres;
@property (nonatomic) bool showsAttributesOfAllCameras;
@property (nonatomic) bool showsAttributesOfAllLights;
@property (nonatomic) bool showsLighting;
@property (nonatomic) bool showsPhysics;

+ (id)authoringEnvironmentForSceneRenderer:(id)arg1;

- (id)_initWithEngineContext:(struct __C3DEngineContext { }*)arg1;
- (void)beginEditingNode:(id)arg1;
- (void)cancelEdition;
- (void)dealloc;
- (bool)didTapAtPoint:(struct CGPoint { double x1; double x2; })arg1;
- (void)drawLineFromPoint:(struct SCNVector3 { float x1; float x2; float x3; })arg1 toPoint:(struct SCNVector3 { float x1; float x2; float x3; })arg2 color:(id)arg3;
- (void)drawString:(id)arg1 atPoint:(struct CGPoint { double x1; double x2; })arg2 color:(id)arg3;
- (void)hideAllIndividualBoundingBoxes;
- (void)hideAttributesOfAllIndividualCameras;
- (void)hideAttributesOfAllIndividualLights;
- (void)hideBoundingBoxForNode:(id)arg1;
- (void)hideCameraAttributesForNode:(id)arg1;
- (void)hideLightAttributesForNode:(id)arg1;
- (id)init;
- (id)sceneRenderer;
- (void)setShowsAllBoundingBoxes:(bool)arg1;
- (void)setShowsAllBoundingSpheres:(bool)arg1;
- (void)setShowsAttributesOfAllCameras:(bool)arg1;
- (void)setShowsAttributesOfAllLights:(bool)arg1;
- (void)setShowsLighting:(bool)arg1;
- (void)setShowsPhysics:(bool)arg1;
- (void)showBoundingBoxForNode:(id)arg1;
- (void)showCameraAttributesForNode:(id)arg1;
- (void)showLightAttributesForNode:(id)arg1;
- (bool)showsAllBoundingBoxes;
- (bool)showsAllBoundingSpheres;
- (bool)showsAttributesOfAllCameras;
- (bool)showsAttributesOfAllLights;
- (bool)showsLighting;
- (bool)showsPhysics;

@end
