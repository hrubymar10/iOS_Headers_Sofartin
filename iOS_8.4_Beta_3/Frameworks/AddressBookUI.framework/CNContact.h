/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/AddressBookUI.framework/AddressBookUI
 */

@interface CNContact : NSObject <NSCopying, NSMutableCopying, NSSecureCoding> {
    void *_addressBook;
    bool _checkedForOriginalRecord;
    CNContactIdentifier *_identifier;
    int _isFacebook;
    NSArray *_linkedContacts;
    void *_originalRecord;
    void *_record;
    unsigned int _recordType;
    void *_source;
    bool _unified;
}

@property(assign,readwrite) void* addressBook;
@property(assign,copy) NSDateComponents * alternateBirthday;
@property(assign,copy) NSDateComponents * birthday;
@property(assign,copy) NSArray * birthdays;
@property(assign,readonly) long long contactType;
@property(assign,copy) NSArray * dates;
@property(assign,copy) NSString * departmentName;
@property(assign,copy) NSString * displayName;
@property(assign,copy) NSArray * emailAddresses;
@property(getter=isFacebook,assign,readonly) bool facebook;
@property(assign,copy) NSString * familyName;
@property(assign,copy) NSString * fullName;
@property(assign,copy) NSString * givenName;
@property(assign,readonly) bool hasChanges;
@property(assign,copy) CNContactIdentifier * identifier;
@property(assign,copy) NSArray * instantMessageAddresses;
@property(assign,copy) NSString * jobTitle;
@property(assign,readonly) NSData * largestAvailablePhoto;
@property(assign,retain) NSArray * linkedContacts;
@property(getter=isMeContact,assign,readonly) bool meContact;
@property(assign,copy) NSString * middleName;
@property(assign,readonly) long long nameOrder;
@property(assign,copy) NSString * namePrefix;
@property(assign,copy) NSString * nameSuffix;
@property(assign,copy) NSString * nickname;
@property(assign,copy) NSString * note;
@property(assign,copy) NSString * organizationName;
@property(assign,readonly) void* originalRecord;
@property(assign,copy) NSString * personName;
@property(assign,copy) NSArray * phoneNumbers;
@property(assign,copy) NSString * phoneticFamilyName;
@property(assign,copy) NSString * phoneticFullName;
@property(assign,copy) NSString * phoneticGivenName;
@property(assign,copy) NSString * phoneticMiddleName;
@property(assign,readonly) NSData * photoThumbnail;
@property(assign,copy) NSArray * postalAddresses;
@property(assign,copy) CNContact * preferredContactForName;
@property(assign,copy) CNContact * preferredContactForPhoto;
@property(getter=isPreferredForName,assign,readwrite) bool preferredForName;
@property(getter=isPreferredForPhoto,assign,readwrite) bool preferredForPhoto;
@property(assign,copy) NSString * previousFamilyName;
@property(assign,copy) NSString * primarySourceName;
@property(getter=isReadonly,assign,readonly) bool readonly;
@property(assign,retain) CRRecentContact * recentContact;
@property(assign,readonly) void* record;
@property(assign,readonly) int recordID;
@property(assign,readonly) unsigned int recordType;
@property(assign,copy) NSArray * relatedNames;
@property(assign,copy) NSArray * ringtone;
@property(assign,copy) NSArray * socialProfiles;
@property(assign,readwrite) void* source;
@property(assign,copy) NSArray * textTone;
@property(getter=isUnified,assign,readonly) bool unified;
@property(getter=isUnknown,assign,readonly) bool unknown;
@property(assign,copy) NSArray * urlAddresses;

+ (id)contact;
+ (id)contactWithPkDictionary:(id)arg1;
+ (id)contactWithRecord:(void*)arg1;
+ (id)contactWithRecord:(void*)arg1 unify:(bool)arg2;
+ (id)contactWithRecordID:(int)arg1 addressBook:(void*)arg2;
+ (id)contactWithStateRestorationCoder:(id)arg1 addressBook:(void*)arg2;
+ (id)contactWithUserActivityUserInfo:(id)arg1 addressBook:(void*)arg2;
+ (long long)defaultNameOrderForEdit;
+ (void)pkAddLabeledValues:(id)arg1 toRecord:(void*)arg2 withProperty:(int)arg3;
+ (id)pkContactWithFirstName:(id)arg1 lastName:(id)arg2 labeledValue:(id)arg3 propertyID:(int)arg4;
+ (id)pkContactWithFirstName:(id)arg1 lastName:(id)arg2 postalAddresses:(id)arg3 emailAddresses:(id)arg4 phoneNumbers:(id)arg5;
+ (id)pkContactWithNameFromContact:(id)arg1 labeledValue:(id)arg2 propertyID:(int)arg3;
+ (id)propertiesFromPropertyIDs:(id)arg1;
+ (id)propertyForPropertyID:(int)arg1;
+ (int)propertyIDForProperty:(id)arg1;
+ (bool)supportsSecureCoding;

- (id)_CNLabelFromABLabel:(struct __CFString { }*)arg1;
- (id)_labeledValueForSoundIdentifier:(int)arg1;
- (id)_labelledStringValuesForProperty:(int)arg1;
- (id)_labelledValuesForProperty:(int)arg1 valueFromABValue:(id)arg2;
- (struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })_squareCropRectForSize:(struct CGSize { double x1; double x2; })arg1;
- (id)_squareImage:(id)arg1;
- (id)_stringValueForProperty:(int)arg1;
- (void*)addressBook;
- (id)alternateBirthday;
- (id)birthday;
- (id)birthdays;
- (long long)contactType;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)dates;
- (void)dealloc;
- (bool)deleteContact;
- (id)departmentName;
- (id)description;
- (id)displayName;
- (id)emailAddresses;
- (void)encodeWithCoder:(id)arg1;
- (id)familyName;
- (id)fullName;
- (id)givenName;
- (bool)hasChanges;
- (bool)hasLinkedContacts;
- (bool)hasValidRecordID;
- (unsigned long long)hash;
- (id)identifier;
- (id)initWithCoder:(id)arg1;
- (id)initWithRecord:(void*)arg1;
- (id)initWithRecord:(void*)arg1 unify:(bool)arg2;
- (id)initWithRecord:(void*)arg1 unify:(bool)arg2 originalRecord:(void*)arg3;
- (id)instantMessageAddresses;
- (bool)isEqual:(id)arg1;
- (bool)isEqualToContact:(id)arg1;
- (bool)isEqualToContact:(id)arg1 includeIdentifiers:(bool)arg2;
- (bool)isFacebook;
- (bool)isMeContact;
- (bool)isPreferredForName;
- (bool)isPreferredForPhoto;
- (bool)isReadonly;
- (bool)isUnified;
- (bool)isUnknown;
- (id)jobTitle;
- (id)largestAvailablePhoto;
- (id)largestAvailablePhotoAndCropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; }*)arg1;
- (id)linkedContacts;
- (id)localizedNameForProperty:(id)arg1;
- (long long)maximumNumberOfValuesForProperty:(id)arg1;
- (id)middleName;
- (id)mutableCopyWithZone:(struct _NSZone { }*)arg1;
- (long long)nameOrder;
- (id)namePrefix;
- (id)nameSuffix;
- (id)nickname;
- (id)note;
- (id)organizationName;
- (void*)originalRecord;
- (id)personName;
- (id)phoneNumbers;
- (id)phoneticFamilyName;
- (id)phoneticFullName;
- (id)phoneticGivenName;
- (id)phoneticMiddleName;
- (id)photoThumbnail;
- (id)pkDictionaryForPropertyID:(int)arg1;
- (id)pkFormattedContactAddress;
- (id)pkSingleLineFormattedContactAddress;
- (id)postalAddresses;
- (id)preferredContactForName;
- (id)preferredContactForPhoto;
- (id)previousFamilyName;
- (id)primarySourceName;
- (id)recentContact;
- (void*)record;
- (int)recordID;
- (unsigned int)recordType;
- (id)relatedNames;
- (void)reloadRecord;
- (void)removePhoto;
- (id)ringtone;
- (void)setAddressBook:(void*)arg1;
- (void)setImageData:(id)arg1 forFormat:(int)arg2 cropRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg3;
- (void)setLinkedContacts:(id)arg1;
- (void)setPhoto:(id)arg1;
- (void)setPreferredForName:(bool)arg1;
- (void)setPreferredForPhoto:(bool)arg1;
- (void)setRecentContact:(id)arg1;
- (void)setSource:(void*)arg1;
- (id)socialProfiles;
- (void*)source;
- (id)supportedLabelsForProperty:(id)arg1;
- (bool)supportsCustomLabelsForProperty:(id)arg1;
- (bool)supportsInstantMessageService;
- (id)textTone;
- (id)urlAddresses;
- (id)userActivityUserInfo;
- (id)vCardRepresentation;
- (bool)validatesPredicate:(id)arg1 onPropertyKey:(id)arg2 propertyIdentifier:(int)arg3;

@end
