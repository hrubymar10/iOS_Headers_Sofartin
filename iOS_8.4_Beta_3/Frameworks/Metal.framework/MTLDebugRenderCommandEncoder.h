/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/Metal.framework/Metal
 */

@interface MTLDebugRenderCommandEncoder : MTLToolsRenderCommandEncoder {
    float _blendColorAlpha;
    float _blendColorBlue;
    float _blendColorGreen;
    float _blendColorRed;
    <MTLDevice> *_cachedDevice;
    unsigned long long _cullMode;
    MTLDepthStencilDescriptor *_defaultDepthStencilDescriptor;
    float _depthBias;
    float _depthBiasClamp;
    float _depthBiasSlopeScale;
    <MTLDepthStencilState> *_depthStencilState;
    MTLRenderPassDescriptor *_descriptor;
    unsigned int _encoderState;
    MTLDebugFunctionArgument *_fragmentBuffers;
    MTLDebugFunctionArgument *_fragmentSamplers;
    MTLDebugFunctionArgument *_fragmentTextures;
    unsigned long long _frontFacingWinding;
    unsigned long long _height;
    const struct { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; unsigned int x5; unsigned int x6; unsigned int x7; unsigned int x8; unsigned int x9; unsigned int x10; unsigned int x11; unsigned int x12; unsigned int x13; unsigned int x14; unsigned int x15; unsigned int x16; unsigned int x17; unsigned int x18; unsigned int x19; float x20; float x21; unsigned int x22; unsigned int x23; unsigned int x24; unsigned int x25; unsigned int x26; unsigned int x27; unsigned int x28; unsigned int x29; unsigned int x30; unsigned int x31; } *_limits;
    float _lineWidth;
    <MTLRenderPipelineState> *_renderPipelineState;
    struct { 
        unsigned long long x; 
        unsigned long long y; 
        unsigned long long width; 
        unsigned long long height; 
    } _scissorRect;
    unsigned int _stencilRef;
    unsigned long long _triangleFillMode;
    MTLDebugFunctionArgument *_vertexBuffers;
    MTLDebugFunctionArgument *_vertexSamplers;
    MTLDebugFunctionArgument *_vertexTextures;
    struct { 
        double originX; 
        double originY; 
        double width; 
        double height; 
        double znear; 
        double zfar; 
    } _viewport;
    unsigned long long _visibilityResultMode;
    unsigned long long _visibilityResultOffset;
    unsigned long long _width;
}

@property (nonatomic, readonly) float blendColorAlpha;
@property (nonatomic, readonly) float blendColorBlue;
@property (nonatomic, readonly) float blendColorGreen;
@property (nonatomic, readonly) float blendColorRed;
@property (nonatomic, readonly) <MTLDevice> *cachedDevice;
@property (nonatomic, readonly) unsigned long long cullMode;
@property (nonatomic, readonly) MTLDepthStencilDescriptor *defaultDepthStencilDescriptor;
@property (nonatomic, readonly) float depthBias;
@property (nonatomic, readonly) float depthBiasClamp;
@property (nonatomic, readonly) float depthBiasSlopeScale;
@property (nonatomic, readonly) <MTLDepthStencilState> *depthStencilState;
@property (nonatomic, readonly, copy) MTLRenderPassDescriptor *descriptor;
@property (nonatomic, readonly) unsigned long long frontFacingWinding;
@property (readonly) unsigned long long height;
@property (nonatomic, readonly) float lineWidth;
@property (nonatomic, readonly) <MTLRenderPipelineState> *renderPipelineState;
@property (nonatomic, readonly) struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; } scissorRect;
@property (nonatomic, readonly) unsigned int stencilRef;
@property (nonatomic, readonly) unsigned long long triangleFillMode;
@property (nonatomic, readonly) struct { double x1; double x2; double x3; double x4; double x5; double x6; } viewport;
@property (nonatomic, readonly) unsigned long long visibilityResultMode;
@property (nonatomic, readonly) unsigned long long visibilityResultOffset;
@property (readonly) unsigned long long width;

- (id).cxx_construct;
- (void).cxx_destruct;
- (void)_setDefaults;
- (void)_validateAllFunctionArguments;
- (float)blendColorAlpha;
- (float)blendColorBlue;
- (float)blendColorGreen;
- (float)blendColorRed;
- (id)cachedDevice;
- (unsigned long long)cullMode;
- (void)dealloc;
- (id)defaultDepthStencilDescriptor;
- (float)depthBias;
- (float)depthBiasClamp;
- (float)depthBiasSlopeScale;
- (id)depthStencilState;
- (id)description;
- (id)descriptor;
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5;
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6;
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3;
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3 instanceCount:(unsigned long long)arg4;
- (void)endEncoding;
- (void)enumerateFragmentBuffersUsingBlock:(id)arg1;
- (void)enumerateFragmentSamplersUsingBlock:(id)arg1;
- (void)enumerateFragmentTexturesUsingBlock:(id)arg1;
- (void)enumerateVertexBuffersUsingBlock:(id)arg1;
- (void)enumerateVertexSamplersUsingBlock:(id)arg1;
- (void)enumerateVertexTexturesUsingBlock:(id)arg1;
- (unsigned long long)frontFacingWinding;
- (unsigned long long)height;
- (id)initWithRenderCommandEncoder:(id)arg1 parent:(id)arg2 descriptor:(id)arg3;
- (float)lineWidth;
- (id)renderPipelineState;
- (struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })scissorRect;
- (void)setBlendColorRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4;
- (void)setCullMode:(unsigned long long)arg1;
- (void)setDepthBias:(float)arg1 slopeScale:(float)arg2 clamp:(float)arg3;
- (void)setDepthStencilState:(id)arg1;
- (void)setFragmentBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setFragmentBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;
- (void)setFragmentBuffers:(const id*)arg1 offsets:(const unsigned long long*)arg2 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)setFragmentBytes:(const void*)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setFragmentSamplerState:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)setFragmentSamplerState:(id)arg1 lodMinClamp:(float)arg2 lodMaxClamp:(float)arg3 atIndex:(unsigned long long)arg4;
- (void)setFragmentSamplerStates:(const id*)arg1 lodMinClamps:(const float*)arg2 lodMaxClamps:(const float*)arg3 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (void)setFragmentSamplerStates:(const id*)arg1 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setFragmentTexture:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)setFragmentTextures:(const id*)arg1 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setFrontFacingWinding:(unsigned long long)arg1;
- (void)setLineWidth:(float)arg1;
- (void)setRenderPipelineState:(id)arg1;
- (void)setScissorRect:(struct { unsigned long long x1; unsigned long long x2; unsigned long long x3; unsigned long long x4; })arg1;
- (void)setStencilReferenceValue:(unsigned int)arg1;
- (void)setTriangleFillMode:(unsigned long long)arg1;
- (void)setVertexBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setVertexBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;
- (void)setVertexBuffers:(const id*)arg1 offsets:(const unsigned long long*)arg2 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg3;
- (void)setVertexBytes:(const void*)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;
- (void)setVertexSamplerState:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)setVertexSamplerState:(id)arg1 lodMinClamp:(float)arg2 lodMaxClamp:(float)arg3 atIndex:(unsigned long long)arg4;
- (void)setVertexSamplerStates:(const id*)arg1 lodMinClamps:(const float*)arg2 lodMaxClamps:(const float*)arg3 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg4;
- (void)setVertexSamplerStates:(const id*)arg1 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setVertexTexture:(id)arg1 atIndex:(unsigned long long)arg2;
- (void)setVertexTextures:(const id*)arg1 withRange:(struct _NSRange { unsigned long long x1; unsigned long long x2; })arg2;
- (void)setViewport:(struct { double x1; double x2; double x3; double x4; double x5; double x6; })arg1;
- (void)setVisibilityResultMode:(unsigned long long)arg1 offset:(unsigned long long)arg2;
- (unsigned int)stencilRef;
- (unsigned long long)triangleFillMode;
- (void)validateCommonDrawErrors:(unsigned long long)arg1 instanceCount:(unsigned long long)arg2 maxVertexID:(unsigned long long)arg3;
- (void)validateFramebufferWithRenderPipelineState:(id)arg1;
- (struct { double x1; double x2; double x3; double x4; double x5; double x6; })viewport;
- (unsigned long long)visibilityResultMode;
- (unsigned long long)visibilityResultOffset;
- (unsigned long long)width;

@end
