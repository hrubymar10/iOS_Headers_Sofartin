/* Generated by RuntimeBrowser
   Image: /System/Library/Frameworks/EventKitUI.framework/EventKitUI
 */

@interface EKDayViewController : UIViewController <BlockableScrollViewDelegate, EKDayViewDataSource, EKDayViewDelegate, EKEventGestureControllerDelegate, UIScrollViewDelegate> {
    bool _adjustingForDeceleration;
    bool _allowsDaySwitching;
    bool _allowsSelection;
    bool _alwaysAnimate;
    bool _animateAllDayAreaHeight;
    NSCalendar *_calendar;
    UIView *_clipView;
    bool _correctAfterScroll;
    EKDayView *_currentDay;
    EKDayViewWithGutters *_currentDayWithGutter;
    EKEventEditViewController *_currentEditor;
    <EKDayViewControllerDataSource> *_dataSource;
    double _dayEnd;
    double _dayStart;
    unsigned int _decelerating;
    ScrollSpringFactory *_decelerationSpringFactory;
    <EKDayViewControllerDelegate> *_delegate;
    bool _disableGestureDayChange;
    bool _disableNotifyDateChangeDuringTracking;
    NSDateComponents *_displayDate;
    EKEventGestureController *_eventGestureController;
    bool _fingerDown;
    UIView *_gestureOccurrenceSuperview;
    double _gutterWidth;
    unsigned int _hasPendingNextDate;
    unsigned int _hasPendingPreviousDate;
    UIScrollView *_horizontalScrollingView;
    bool _initialLoad;
    bool _instigatedDateChange;
    bool _needToCompleteDeceleration;
    bool _needToCompleteScrollingAnimation;
    EKDayView *_nextDay;
    CalendarOccurrencesCollection *_nextDayOccurrences;
    EKDayViewWithGutters *_nextDayWithGutter;
    struct CGPoint { 
        double x; 
        double y; 
    } _normalizedContentOffset;
    bool _notifyWhenTapOtherEventDuringDragging;
    CalendarOccurrencesCollection *_occurrences;
    NSDateComponents *_originalDisplayDate;
    int _parallaxState;
    NSDateComponents *_pendingNextDate;
    NSDateComponents *_pendingPreviousDate;
    EKDayView *_previousDay;
    CalendarOccurrencesCollection *_previousDayOccurrences;
    EKDayViewWithGutters *_previousDayWithGutter;
    bool _resizing;
    unsigned int _scrollViewAnimating;
    unsigned int _settingDateFromScrolling;
    bool _shouldAutoscrollAfterAppearance;
    bool _shouldAutoscrollOnNextActivation;
    NSTimer *_showNowTimer;
    bool _showsBanner;
    NSDateComponents *_targetDateComponents;
    bool _transitionedToSameDay;
    bool _viewAppeared;
}

@property(assign,readwrite) bool allowsDaySwitching;
@property(assign,readwrite) bool allowsSelection;
@property(assign,readwrite) bool alwaysAnimate;
@property(assign,readwrite) bool animateAllDayAreaHeight;
@property(assign,copy) NSCalendar * calendar;
@property(assign,readonly) UIView * currentAllDayView;
@property(assign,readonly) bool currentDayContainsOccurrences;
@property(assign,retain) EKEventEditViewController * currentEditor;
@property(assign,readwrite) <EKDayViewControllerDataSource> * dataSource;
@property(assign,copy) NSString * debugDescription;
@property(assign,readwrite) <EKDayViewControllerDelegate> * delegate;
@property(assign,copy) NSString * description;
@property(assign,readwrite) bool disableGestureDayChange;
@property(assign,readwrite) bool disableNotifyDateChangeDuringTracking;
@property(assign,copy) NSDateComponents * displayDate;
@property(assign,retain) UIView * gestureOccurrenceSuperview;
@property(assign,readwrite) double gutterWidth;
@property(assign,readonly) unsigned long long hash;
@property(assign,readwrite) struct CGPoint { double x1; double x2; } normalizedContentOffset;
@property(assign,readwrite) bool notifyWhenTapOtherEventDuringDragging;
@property(assign,copy) NSDateComponents * pendingNextDate;
@property(assign,copy) NSDateComponents * pendingPreviousDate;
@property(assign,readwrite) bool shouldAutoscrollAfterAppearance;
@property(assign,readwrite) bool shouldAutoscrollOnNextActivation;
@property(assign,retain) NSTimer * showNowTimer;
@property(assign,readwrite) bool showsBanner;
@property(assign,readonly) Class superclass;
@property(assign,readwrite) bool transitionedToSameDay;

+ (bool)_shouldForwardViewWillTransitionToSize;

- (void).cxx_destruct;
- (void)_beginParallaxStateIfPossible;
- (bool)_canScrollToNow;
- (bool)_canShowNowAfterScrollViewDidEndDecelerating:(id)arg1;
- (void)_cleanUpTargetDateComponents;
- (void)_completeDecelerationIfNeeded;
- (void)_completeScrollingAnimationIfNeeded;
- (id)_createGutterDayViewWithDayView:(id)arg1;
- (void)_didRespondToApplicationDidBecomeActiveStateChange;
- (void)_endParallaxStateIfNeeded;
- (id)_eventGestureSuperview;
- (id)_eventsForDay:(id)arg1;
- (void)_highlightDayViewDate:(double)arg1 isAllDay:(bool)arg2;
- (bool)_isCalendarDate:(id)arg1 sameDayAsComponents:(id)arg2;
- (bool)_isCurrentDayToday;
- (bool)_isViewInVisibleRect:(id)arg1;
- (void)_localeChanged:(id)arg1;
- (void)_notifyDelegateOfSelectedDateChange;
- (id)_occurrencesForDayView:(id)arg1;
- (void)_relayoutDays;
- (void)_relayoutDaysDuringScrolling;
- (void)_relayoutDaysDuringScrollingAndPerformDayChanges:(bool)arg1;
- (void)_scrollDayViewAfterAppearance:(bool)arg1;
- (void)_scrollDayViewAfterAppearanceIfNeeded;
- (void)_scrollToNowOnScrollViewDidEndScrollingAnimation:(id)arg1;
- (void)_scrollViewDidEndDecelerating:(id)arg1 notifyParallxState:(bool)arg2;
- (void)_setDayView:(id)arg1 toDate:(id)arg2;
- (void)_setDisplayDate:(id)arg1 forRepeat:(bool)arg2;
- (void)_setDisplayDate:(id)arg1 forRepeat:(bool)arg2 animate:(bool)arg3;
- (void)_setDisplayDateInternal:(id)arg1;
- (void)_setHorizontalContentOffsetUsingSpringAnimation:(struct CGPoint { double x1; double x2; })arg1;
- (void)_setNextAndPreviousFirstVisibleSecondToCurrent;
- (bool)_shouldRespondToApplicationDidBecomeActiveStateChange;
- (bool)_shouldScrollToNow;
- (void)_showNowAfterScrollViewDidEndDecelerating:(id)arg1;
- (double)_showNowDelay;
- (void)_showNowTimerFired:(id)arg1;
- (void)_showWeekNumbersPreferenceChanged:(id)arg1;
- (void)_stopShowNowTimer;
- (void)_updateAllDayAreaHeight;
- (double)_weightedAllDayHeightForView:(id)arg1 visibleRect:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg2;
- (bool)allowsDaySwitching;
- (bool)allowsSelection;
- (bool)alwaysAnimate;
- (bool)animateAllDayAreaHeight;
- (void)applicationDidBecomeActive;
- (void)applicationWillResignActive;
- (void)beginExternallyControlledScrolling;
- (bool)blockableScrollViewShouldAllowScrolling;
- (void)bringEventToFront:(id)arg1;
- (id)calendar;
- (id)createEventForEventGestureController:(id)arg1;
- (id)createOccurrenceViewForEventGestureController:(id)arg1;
- (id)currentAllDayView;
- (bool)currentDayContainsOccurrences;
- (id)currentEditor;
- (id)dataSource;
- (void)dayView:(id)arg1 didCreateOccurrenceViews:(id)arg2;
- (void)dayView:(id)arg1 didScaleDayViewWithScale:(double)arg2;
- (void)dayView:(id)arg1 didSelectEvent:(id)arg2;
- (void)dayView:(id)arg1 didUpdateScrollPosition:(struct CGPoint { double x1; double x2; })arg2;
- (id)dayView:(id)arg1 eventsForStartDate:(id)arg2 endDate:(id)arg3;
- (void)dayView:(id)arg1 firstVisibleSecondChanged:(unsigned long long)arg2;
- (void)dayView:(id)arg1 isPinchingDayViewWithScale:(double)arg2;
- (void)dayView:(id)arg1 scrollViewWillBeginDragging:(id)arg2;
- (void)dayViewDidTapEmptySpace:(id)arg1;
- (void)dealloc;
- (id)delegate;
- (bool)didScrollWhenEventGestureController:(id)arg1 scrollTimerFiredToMoveLeft:(bool)arg2 right:(bool)arg3 vertically:(bool)arg4 towardPoint:(struct CGPoint { double x1; double x2; })arg5;
- (bool)disableGestureDayChange;
- (bool)disableNotifyDateChangeDuringTracking;
- (id)displayDate;
- (void)editorDidCancelEditingEvent:(id)arg1;
- (void)editorDidDeleteEvent:(id)arg1;
- (void)editorDidSaveEvent:(id)arg1;
- (void)endExternallyControlledScrolling;
- (bool)eventEditorPopoverActiveWhileDraggingForEventGestureController:(id)arg1;
- (void)eventGestureController:(id)arg1 addViewToScroller:(id)arg2 isAllDay:(bool)arg3;
- (void)eventGestureController:(id)arg1 adjustDraggingViewForAllDay:(bool)arg2;
- (double)eventGestureController:(id)arg1 dateAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (void)eventGestureController:(id)arg1 didCancelEditingOccurrence:(id)arg2 fadedOut:(bool)arg3;
- (bool)eventGestureController:(id)arg1 didCommitOccurrence:(id)arg2 toDate:(double)arg3 isAllDay:(bool)arg4 span:(int)arg5;
- (void)eventGestureController:(id)arg1 didMoveToDate:(double)arg2 isAllDay:(bool)arg3;
- (void)eventGestureController:(id)arg1 didSetUpAtDate:(double)arg2 isAllDay:(bool)arg3;
- (void)eventGestureController:(id)arg1 didSingleTapOccurrence:(id)arg2;
- (double)eventGestureController:(id)arg1 heightForOccurrenceViewOfDuration:(double)arg2 allDay:(bool)arg3;
- (bool)eventGestureController:(id)arg1 isAllDayAtPoint:(struct CGPoint { double x1; double x2; })arg2 requireInsistence:(bool)arg3;
- (id)eventGestureController:(id)arg1 occurrenceViewAtPoint:(struct CGPoint { double x1; double x2; })arg2;
- (id)eventGestureController:(id)arg1 occurrenceViewForOccurrence:(id)arg2;
- (struct CGPoint { double x1; double x2; })eventGestureController:(id)arg1 pointAtDate:(double)arg2 isAllDay:(bool)arg3;
- (double)eventGestureController:(id)arg1 widthForOccurrenceViewOfDays:(unsigned long long)arg2;
- (double)eventGestureController:(id)arg1 yPositionPerhapsMatchingAllDayOccurrence:(id)arg2 atPoint:(struct CGPoint { double x1; double x2; })arg3;
- (bool)eventGestureControllerShouldAllowLongPress:(id)arg1;
- (id)eventsForStartDate:(id)arg1 endDate:(id)arg2;
- (void)externallyEndedGestureDragging;
- (unsigned long long)firstVisibleSecond;
- (id)gestureController;
- (id)gestureOccurrenceSuperview;
- (double)gutterWidth;
- (double)horizontalOffsetForPagingForEventGestureController:(id)arg1;
- (id)initWithNibName:(id)arg1 bundle:(id)arg2;
- (void)insertViewForEvent:(id)arg1 belowViewForOtherEvent:(id)arg2;
- (void)layoutContainerView:(id)arg1;
- (void)loadView;
- (struct CGPoint { double x1; double x2; })normalizedContentOffset;
- (bool)notifyWhenTapOtherEventDuringDragging;
- (id)occurrenceViewForEvent:(id)arg1;
- (id)occurrenceViewForEvent:(id)arg1 includeNextAndPreviousDays:(bool)arg2;
- (id)occurrenceViewSuperviewForEventGestureController:(id)arg1;
- (id)pendingNextDate;
- (id)pendingPreviousDate;
- (id)preferredEventToSelectOnDate:(id)arg1;
- (void)reloadData;
- (void)reloadDataBetweenStart:(id)arg1 end:(id)arg2;
- (void)scrollEventIntoView:(id)arg1 animated:(bool)arg2;
- (void)scrollEventsIntoViewAnimated:(bool)arg1;
- (void)scrollToNow:(bool)arg1;
- (void)scrollViewDidEndDecelerating:(id)arg1;
- (void)scrollViewDidEndDragging:(id)arg1 willDecelerate:(bool)arg2;
- (void)scrollViewDidEndScrollingAnimation:(id)arg1;
- (void)scrollViewDidScroll:(id)arg1;
- (void)scrollViewWillBeginDecelerating:(id)arg1;
- (void)scrollViewWillBeginDragging:(id)arg1;
- (void)setAllowsDaySwitching:(bool)arg1;
- (void)setAllowsSelection:(bool)arg1;
- (void)setAlwaysAnimate:(bool)arg1;
- (void)setAnimateAllDayAreaHeight:(bool)arg1;
- (void)setCalendar:(id)arg1;
- (void)setCurrentEditor:(id)arg1;
- (void)setDataSource:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)setDisableGestureDayChange:(bool)arg1;
- (void)setDisableNotifyDateChangeDuringTracking:(bool)arg1;
- (void)setDisplayDate:(id)arg1;
- (void)setFrame:(struct CGRect { struct CGPoint { double x_1_1_1; double x_1_1_2; } x1; struct CGSize { double x_2_1_1; double x_2_1_2; } x2; })arg1 gutterWidth:(double)arg2;
- (void)setGestureOccurrenceSuperview:(id)arg1;
- (void)setGutterWidth:(double)arg1;
- (void)setNormalizedContentOffset:(struct CGPoint { double x1; double x2; })arg1;
- (void)setNotifyWhenTapOtherEventDuringDragging:(bool)arg1;
- (void)setPendingNextDate:(id)arg1;
- (void)setPendingPreviousDate:(id)arg1;
- (void)setShouldAutoscrollAfterAppearance:(bool)arg1;
- (void)setShouldAutoscrollOnNextActivation:(bool)arg1;
- (void)setShowNowTimer:(id)arg1;
- (void)setShowsBanner:(bool)arg1;
- (void)setTimeZone:(id)arg1;
- (void)setToDay:(id)arg1 normalizedOffset:(double)arg2;
- (void)setTransitionedToSameDay:(bool)arg1;
- (bool)shouldAutoscrollAfterAppearance;
- (bool)shouldAutoscrollOnNextActivation;
- (id)showNowTimer;
- (bool)showsBanner;
- (void)significantTimeChangeOccurred;
- (double)timedRegionOriginForEventGestureController:(id)arg1;
- (id)touchTrackingViewForEventGestureController:(id)arg1;
- (bool)transitionedToSameDay;
- (void)viewDidAppear:(bool)arg1;
- (void)viewDidDisappear:(bool)arg1;
- (void)viewDidLayoutSubviews;
- (void)viewWillAppear:(bool)arg1;
- (void)viewWillDisappear:(bool)arg1;
- (void)viewWillTransitionToSize:(struct CGSize { double x1; double x2; })arg1 withTransitionCoordinator:(id)arg2;

@end
